"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/docxtemplater";
exports.ids = ["vendor-chunks/docxtemplater"];
exports.modules = {

/***/ "(ssr)/./node_modules/docxtemplater/js/collect-content-types.js":
/*!****************************************************************!*\
  !*** ./node_modules/docxtemplater/js/collect-content-types.js ***!
  \****************************************************************/
/***/ ((module) => {

eval("\nvar ctXML = \"[Content_Types].xml\";\nfunction collectContentTypes(overrides, defaults, zip) {\n    var partNames = {};\n    for(var i = 0, len = overrides.length; i < len; i++){\n        var override = overrides[i];\n        var contentType = override.getAttribute(\"ContentType\");\n        var partName = override.getAttribute(\"PartName\").substr(1);\n        partNames[partName] = contentType;\n    }\n    var _loop = function _loop() {\n        var def = defaults[_i];\n        var contentType = def.getAttribute(\"ContentType\");\n        var extension = def.getAttribute(\"Extension\");\n        // eslint-disable-next-line no-loop-func\n        zip.file(/./).map(function(_ref) {\n            var name = _ref.name;\n            if (name.slice(name.length - extension.length) === extension && !partNames[name] && name !== ctXML) {\n                partNames[name] = contentType;\n            }\n        });\n    };\n    for(var _i = 0, _len = defaults.length; _i < _len; _i++){\n        _loop();\n    }\n    return partNames;\n}\nmodule.exports = collectContentTypes;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZG9jeHRlbXBsYXRlci9qcy9jb2xsZWN0LWNvbnRlbnQtdHlwZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYixJQUFJQSxRQUFRO0FBQ1osU0FBU0Msb0JBQW9CQyxTQUFTLEVBQUVDLFFBQVEsRUFBRUMsR0FBRztJQUNuRCxJQUFJQyxZQUFZLENBQUM7SUFDakIsSUFBSyxJQUFJQyxJQUFJLEdBQUdDLE1BQU1MLFVBQVVNLE1BQU0sRUFBRUYsSUFBSUMsS0FBS0QsSUFBSztRQUNwRCxJQUFJRyxXQUFXUCxTQUFTLENBQUNJLEVBQUU7UUFDM0IsSUFBSUksY0FBY0QsU0FBU0UsWUFBWSxDQUFDO1FBQ3hDLElBQUlDLFdBQVdILFNBQVNFLFlBQVksQ0FBQyxZQUFZRSxNQUFNLENBQUM7UUFDeERSLFNBQVMsQ0FBQ08sU0FBUyxHQUFHRjtJQUN4QjtJQUNBLElBQUlJLFFBQVEsU0FBU0E7UUFDbkIsSUFBSUMsTUFBTVosUUFBUSxDQUFDYSxHQUFHO1FBQ3RCLElBQUlOLGNBQWNLLElBQUlKLFlBQVksQ0FBQztRQUNuQyxJQUFJTSxZQUFZRixJQUFJSixZQUFZLENBQUM7UUFDakMsd0NBQXdDO1FBQ3hDUCxJQUFJYyxJQUFJLENBQUMsS0FBS0MsR0FBRyxDQUFDLFNBQVVDLElBQUk7WUFDOUIsSUFBSUMsT0FBT0QsS0FBS0MsSUFBSTtZQUNwQixJQUFJQSxLQUFLQyxLQUFLLENBQUNELEtBQUtiLE1BQU0sR0FBR1MsVUFBVVQsTUFBTSxNQUFNUyxhQUFhLENBQUNaLFNBQVMsQ0FBQ2dCLEtBQUssSUFBSUEsU0FBU3JCLE9BQU87Z0JBQ2xHSyxTQUFTLENBQUNnQixLQUFLLEdBQUdYO1lBQ3BCO1FBQ0Y7SUFDRjtJQUNBLElBQUssSUFBSU0sS0FBSyxHQUFHTyxPQUFPcEIsU0FBU0ssTUFBTSxFQUFFUSxLQUFLTyxNQUFNUCxLQUFNO1FBQ3hERjtJQUNGO0lBQ0EsT0FBT1Q7QUFDVDtBQUNBbUIsT0FBT0MsT0FBTyxHQUFHeEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWQtcGxhbm5lci1mcm9udC1lbmQvLi9ub2RlX21vZHVsZXMvZG9jeHRlbXBsYXRlci9qcy9jb2xsZWN0LWNvbnRlbnQtdHlwZXMuanM/NDhiMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIGN0WE1MID0gXCJbQ29udGVudF9UeXBlc10ueG1sXCI7XG5mdW5jdGlvbiBjb2xsZWN0Q29udGVudFR5cGVzKG92ZXJyaWRlcywgZGVmYXVsdHMsIHppcCkge1xuICB2YXIgcGFydE5hbWVzID0ge307XG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBvdmVycmlkZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICB2YXIgb3ZlcnJpZGUgPSBvdmVycmlkZXNbaV07XG4gICAgdmFyIGNvbnRlbnRUeXBlID0gb3ZlcnJpZGUuZ2V0QXR0cmlidXRlKFwiQ29udGVudFR5cGVcIik7XG4gICAgdmFyIHBhcnROYW1lID0gb3ZlcnJpZGUuZ2V0QXR0cmlidXRlKFwiUGFydE5hbWVcIikuc3Vic3RyKDEpO1xuICAgIHBhcnROYW1lc1twYXJ0TmFtZV0gPSBjb250ZW50VHlwZTtcbiAgfVxuICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcCgpIHtcbiAgICB2YXIgZGVmID0gZGVmYXVsdHNbX2ldO1xuICAgIHZhciBjb250ZW50VHlwZSA9IGRlZi5nZXRBdHRyaWJ1dGUoXCJDb250ZW50VHlwZVwiKTtcbiAgICB2YXIgZXh0ZW5zaW9uID0gZGVmLmdldEF0dHJpYnV0ZShcIkV4dGVuc2lvblwiKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbG9vcC1mdW5jXG4gICAgemlwLmZpbGUoLy4vKS5tYXAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgIHZhciBuYW1lID0gX3JlZi5uYW1lO1xuICAgICAgaWYgKG5hbWUuc2xpY2UobmFtZS5sZW5ndGggLSBleHRlbnNpb24ubGVuZ3RoKSA9PT0gZXh0ZW5zaW9uICYmICFwYXJ0TmFtZXNbbmFtZV0gJiYgbmFtZSAhPT0gY3RYTUwpIHtcbiAgICAgICAgcGFydE5hbWVzW25hbWVdID0gY29udGVudFR5cGU7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG4gIGZvciAodmFyIF9pID0gMCwgX2xlbiA9IGRlZmF1bHRzLmxlbmd0aDsgX2kgPCBfbGVuOyBfaSsrKSB7XG4gICAgX2xvb3AoKTtcbiAgfVxuICByZXR1cm4gcGFydE5hbWVzO1xufVxubW9kdWxlLmV4cG9ydHMgPSBjb2xsZWN0Q29udGVudFR5cGVzOyJdLCJuYW1lcyI6WyJjdFhNTCIsImNvbGxlY3RDb250ZW50VHlwZXMiLCJvdmVycmlkZXMiLCJkZWZhdWx0cyIsInppcCIsInBhcnROYW1lcyIsImkiLCJsZW4iLCJsZW5ndGgiLCJvdmVycmlkZSIsImNvbnRlbnRUeXBlIiwiZ2V0QXR0cmlidXRlIiwicGFydE5hbWUiLCJzdWJzdHIiLCJfbG9vcCIsImRlZiIsIl9pIiwiZXh0ZW5zaW9uIiwiZmlsZSIsIm1hcCIsIl9yZWYiLCJuYW1lIiwic2xpY2UiLCJfbGVuIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/docxtemplater/js/collect-content-types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/docxtemplater/js/content-types.js":
/*!********************************************************!*\
  !*** ./node_modules/docxtemplater/js/content-types.js ***!
  \********************************************************/
/***/ ((module) => {

eval("\nvar coreContentType = \"application/vnd.openxmlformats-package.core-properties+xml\";\nvar appContentType = \"application/vnd.openxmlformats-officedocument.extended-properties+xml\";\nvar customContentType = \"application/vnd.openxmlformats-officedocument.custom-properties+xml\";\nvar settingsContentType = \"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml\";\nmodule.exports = {\n    settingsContentType: settingsContentType,\n    coreContentType: coreContentType,\n    appContentType: appContentType,\n    customContentType: customContentType\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZG9jeHRlbXBsYXRlci9qcy9jb250ZW50LXR5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWIsSUFBSUEsa0JBQWtCO0FBQ3RCLElBQUlDLGlCQUFpQjtBQUNyQixJQUFJQyxvQkFBb0I7QUFDeEIsSUFBSUMsc0JBQXNCO0FBQzFCQyxPQUFPQyxPQUFPLEdBQUc7SUFDZkYscUJBQXFCQTtJQUNyQkgsaUJBQWlCQTtJQUNqQkMsZ0JBQWdCQTtJQUNoQkMsbUJBQW1CQTtBQUNyQiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZC1wbGFubmVyLWZyb250LWVuZC8uL25vZGVfbW9kdWxlcy9kb2N4dGVtcGxhdGVyL2pzL2NvbnRlbnQtdHlwZXMuanM/MmM2YSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIGNvcmVDb250ZW50VHlwZSA9IFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLXBhY2thZ2UuY29yZS1wcm9wZXJ0aWVzK3htbFwiO1xudmFyIGFwcENvbnRlbnRUeXBlID0gXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuZXh0ZW5kZWQtcHJvcGVydGllcyt4bWxcIjtcbnZhciBjdXN0b21Db250ZW50VHlwZSA9IFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LmN1c3RvbS1wcm9wZXJ0aWVzK3htbFwiO1xudmFyIHNldHRpbmdzQ29udGVudFR5cGUgPSBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC53b3JkcHJvY2Vzc2luZ21sLnNldHRpbmdzK3htbFwiO1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldHRpbmdzQ29udGVudFR5cGU6IHNldHRpbmdzQ29udGVudFR5cGUsXG4gIGNvcmVDb250ZW50VHlwZTogY29yZUNvbnRlbnRUeXBlLFxuICBhcHBDb250ZW50VHlwZTogYXBwQ29udGVudFR5cGUsXG4gIGN1c3RvbUNvbnRlbnRUeXBlOiBjdXN0b21Db250ZW50VHlwZVxufTsiXSwibmFtZXMiOlsiY29yZUNvbnRlbnRUeXBlIiwiYXBwQ29udGVudFR5cGUiLCJjdXN0b21Db250ZW50VHlwZSIsInNldHRpbmdzQ29udGVudFR5cGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/docxtemplater/js/content-types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/docxtemplater/js/doc-utils.js":
/*!****************************************************!*\
  !*** ./node_modules/docxtemplater/js/doc-utils.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nfunction _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _iterableToArrayLimit(r, l) {\n    var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n    if (null != t) {\n        var e, n, i, u, a = [], f = !0, o = !1;\n        try {\n            if (i = (t = t.call(r)).next, 0 === l) {\n                if (Object(t) !== t) return;\n                f = !1;\n            } else for(; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n        } catch (r) {\n            o = !0, n = r;\n        } finally{\n            try {\n                if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n            } finally{\n                if (o) throw n;\n            }\n        }\n        return a;\n    }\n}\nfunction _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nvar _require = __webpack_require__(/*! @xmldom/xmldom */ \"(ssr)/./node_modules/@xmldom/xmldom/lib/index.js\"), DOMParser = _require.DOMParser, XMLSerializer = _require.XMLSerializer;\nvar _require2 = __webpack_require__(/*! ./errors.js */ \"(ssr)/./node_modules/docxtemplater/js/errors.js\"), throwXmlTagNotFound = _require2.throwXmlTagNotFound;\nvar _require3 = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/docxtemplater/js/utils.js\"), last = _require3.last, first = _require3.first;\nfunction isWhiteSpace(value) {\n    return /^[ \\n\\r\\t]+$/.test(value);\n}\nfunction parser(tag) {\n    return {\n        get: function get(scope) {\n            if (tag === \".\") {\n                return scope;\n            }\n            if (scope) {\n                return scope[tag];\n            }\n            return scope;\n        }\n    };\n}\nvar attrToRegex = {};\nfunction setSingleAttribute(partValue, attr, attrValue) {\n    var regex;\n    // Stryker disable next-line all : because this is an optimisation\n    if (attrToRegex[attr]) {\n        regex = attrToRegex[attr];\n    } else {\n        regex = new RegExp(\"(<.* \".concat(attr, '=\")([^\"]*)(\".*)$'));\n        attrToRegex[attr] = regex;\n    }\n    if (regex.test(partValue)) {\n        return partValue.replace(regex, \"$1\".concat(attrValue, \"$3\"));\n    }\n    var end = partValue.lastIndexOf(\"/>\");\n    if (end === -1) {\n        end = partValue.lastIndexOf(\">\");\n    }\n    return partValue.substr(0, end) + \" \".concat(attr, '=\"').concat(attrValue, '\"') + partValue.substr(end);\n}\nfunction getSingleAttribute(value, attributeName) {\n    var index = value.indexOf(\" \".concat(attributeName, '=\"'));\n    if (index === -1) {\n        return null;\n    }\n    var startIndex = value.substr(index).search(/[\"']/) + index;\n    var endIndex = value.substr(startIndex + 1).search(/[\"']/) + startIndex;\n    return value.substr(startIndex + 1, endIndex - startIndex);\n}\nfunction endsWith(str, suffix) {\n    return str.indexOf(suffix, str.length - suffix.length) !== -1;\n}\nfunction startsWith(str, prefix) {\n    return str.substring(0, prefix.length) === prefix;\n}\nfunction getDuplicates(arr) {\n    var duplicates = [];\n    var hash = {}, result = [];\n    for(var i = 0, l = arr.length; i < l; ++i){\n        if (!hash[arr[i]]) {\n            hash[arr[i]] = true;\n            result.push(arr[i]);\n        } else {\n            duplicates.push(arr[i]);\n        }\n    }\n    return duplicates;\n}\nfunction uniq(arr) {\n    var hash = {}, result = [];\n    for(var i = 0, l = arr.length; i < l; ++i){\n        if (!hash[arr[i]]) {\n            hash[arr[i]] = true;\n            result.push(arr[i]);\n        }\n    }\n    return result;\n}\nfunction chunkBy(parsed, f) {\n    return parsed.reduce(function(chunks, p) {\n        var currentChunk = last(chunks);\n        var res = f(p);\n        if (res === \"start\") {\n            chunks.push([\n                p\n            ]);\n        } else if (res === \"end\") {\n            currentChunk.push(p);\n            chunks.push([]);\n        } else {\n            currentChunk.push(p);\n        }\n        return chunks;\n    }, [\n        []\n    ]).filter(function(p) {\n        return p.length > 0;\n    });\n}\nvar defaults = {\n    errorLogging: \"json\",\n    paragraphLoop: false,\n    nullGetter: function nullGetter(part) {\n        return part.module ? \"\" : \"undefined\";\n    },\n    xmlFileNames: [\n        \"[Content_Types].xml\"\n    ],\n    parser: parser,\n    linebreaks: false,\n    fileTypeConfig: null,\n    delimiters: {\n        start: \"{\",\n        end: \"}\"\n    },\n    syntax: {}\n};\nfunction xml2str(xmlNode) {\n    var a = new XMLSerializer();\n    return a.serializeToString(xmlNode).replace(/xmlns(:[a-z0-9]+)?=\"\" ?/g, \"\");\n}\nfunction str2xml(str) {\n    if (str.charCodeAt(0) === 65279) {\n        // BOM sequence\n        str = str.substr(1);\n    }\n    return new DOMParser().parseFromString(str, \"text/xml\");\n}\nvar charMap = [\n    [\n        \"&\",\n        \"&amp;\"\n    ],\n    [\n        \"<\",\n        \"&lt;\"\n    ],\n    [\n        \">\",\n        \"&gt;\"\n    ],\n    [\n        '\"',\n        \"&quot;\"\n    ],\n    [\n        \"'\",\n        \"&apos;\"\n    ]\n];\nvar charMapRegexes = charMap.map(function(_ref) {\n    var _ref2 = _slicedToArray(_ref, 2), endChar = _ref2[0], startChar = _ref2[1];\n    return {\n        rstart: new RegExp(startChar, \"g\"),\n        rend: new RegExp(endChar, \"g\"),\n        start: startChar,\n        end: endChar\n    };\n});\nfunction wordToUtf8(string) {\n    var r;\n    for(var i = charMapRegexes.length - 1; i >= 0; i--){\n        r = charMapRegexes[i];\n        string = string.replace(r.rstart, r.end);\n    }\n    return string;\n}\nfunction utf8ToWord(string) {\n    // To make sure that the object given is a string (this is a noop for strings).\n    string = string.toString();\n    var r;\n    for(var i = 0, l = charMapRegexes.length; i < l; i++){\n        r = charMapRegexes[i];\n        string = string.replace(r.rend, r.start);\n    }\n    return string;\n}\n// This function is written with for loops for performance\nfunction concatArrays(arrays) {\n    var result = [];\n    for(var i = 0; i < arrays.length; i++){\n        var array = arrays[i];\n        for(var j = 0, len = array.length; j < len; j++){\n            result.push(array[j]);\n        }\n    }\n    return result;\n}\nvar spaceRegexp = new RegExp(String.fromCharCode(160), \"g\");\nfunction convertSpaces(s) {\n    return s.replace(spaceRegexp, \" \");\n}\nfunction pregMatchAll(regex, content) {\n    /* regex is a string, content is the content. It returns an array of all matches with their offset, for example:\n  \t\tregex=la\n  \tcontent=lolalolilala\n  \t\treturns:\n  \t\t[\n  \t\t\t{array: {0: 'la'}, offset: 2},\n  \t\t\t{array: {0: 'la'}, offset: 8},\n  \t\t\t{array: {0: 'la'}, offset: 10}\n  \t\t]\n  */ var matchArray = [];\n    var match;\n    while((match = regex.exec(content)) != null){\n        matchArray.push({\n            array: match,\n            offset: match.index\n        });\n    }\n    return matchArray;\n}\nfunction isEnding(value, element) {\n    return value === \"</\" + element + \">\";\n}\nfunction isStarting(value, element) {\n    return value.indexOf(\"<\" + element) === 0 && [\n        \">\",\n        \" \",\n        \"/\"\n    ].indexOf(value[element.length + 1]) !== -1;\n}\nfunction getRight(parsed, element, index) {\n    var val = getRightOrNull(parsed, element, index);\n    if (val !== null) {\n        return val;\n    }\n    throwXmlTagNotFound({\n        position: \"right\",\n        element: element,\n        parsed: parsed,\n        index: index\n    });\n}\nfunction getRightOrNull(parsed, elements, index) {\n    if (typeof elements === \"string\") {\n        elements = [\n            elements\n        ];\n    }\n    var level = 1;\n    for(var i = index, l = parsed.length; i < l; i++){\n        var part = parsed[i];\n        for(var j = 0, len = elements.length; j < len; j++){\n            var element = elements[j];\n            if (isEnding(part.value, element)) {\n                level--;\n            }\n            if (isStarting(part.value, element)) {\n                level++;\n            }\n            if (level === 0) {\n                return i;\n            }\n        }\n    }\n    return null;\n}\nfunction getLeft(parsed, element, index) {\n    var val = getLeftOrNull(parsed, element, index);\n    if (val !== null) {\n        return val;\n    }\n    throwXmlTagNotFound({\n        position: \"left\",\n        element: element,\n        parsed: parsed,\n        index: index\n    });\n}\nfunction getLeftOrNull(parsed, elements, index) {\n    if (typeof elements === \"string\") {\n        elements = [\n            elements\n        ];\n    }\n    var level = 1;\n    for(var i = index; i >= 0; i--){\n        var part = parsed[i];\n        for(var j = 0, len = elements.length; j < len; j++){\n            var element = elements[j];\n            if (isStarting(part.value, element)) {\n                level--;\n            }\n            if (isEnding(part.value, element)) {\n                level++;\n            }\n            if (level === 0) {\n                return i;\n            }\n        }\n    }\n    return null;\n}\n// Stryker disable all : because those are functions that depend on the parsed\n// structure based and we don't want minimal code here, but rather code that\n// makes things clear.\nfunction isTagStart(tagType, _ref3) {\n    var type = _ref3.type, tag = _ref3.tag, position = _ref3.position;\n    return type === \"tag\" && tag === tagType && (position === \"start\" || position === \"selfclosing\");\n}\nfunction isTagStartStrict(tagType, _ref4) {\n    var type = _ref4.type, tag = _ref4.tag, position = _ref4.position;\n    return type === \"tag\" && tag === tagType && position === \"start\";\n}\nfunction isTagEnd(tagType, _ref5) {\n    var type = _ref5.type, tag = _ref5.tag, position = _ref5.position;\n    return type === \"tag\" && tag === tagType && position === \"end\";\n}\nfunction isParagraphStart(part) {\n    return isTagStartStrict(\"w:p\", part) || isTagStartStrict(\"a:p\", part);\n}\nfunction isParagraphEnd(part) {\n    return isTagEnd(\"w:p\", part) || isTagEnd(\"a:p\", part);\n}\nfunction isTextStart(_ref6) {\n    var type = _ref6.type, position = _ref6.position, text = _ref6.text;\n    return type === \"tag\" && position === \"start\" && text;\n}\nfunction isTextEnd(_ref7) {\n    var type = _ref7.type, position = _ref7.position, text = _ref7.text;\n    return type === \"tag\" && position === \"end\" && text;\n}\nfunction isContent(_ref8) {\n    var type = _ref8.type, position = _ref8.position;\n    return type === \"placeholder\" || type === \"content\" && position === \"insidetag\";\n}\nfunction isModule(_ref9, modules) {\n    var module1 = _ref9.module, type = _ref9.type;\n    if (!(modules instanceof Array)) {\n        modules = [\n            modules\n        ];\n    }\n    return type === \"placeholder\" && modules.indexOf(module1) !== -1;\n}\n// Stryker restore all\nvar corruptCharacters = /[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F]/;\n// 00    NUL '\\0' (null character)\n// 01    SOH (start of heading)\n// 02    STX (start of text)\n// 03    ETX (end of text)\n// 04    EOT (end of transmission)\n// 05    ENQ (enquiry)\n// 06    ACK (acknowledge)\n// 07    BEL '\\a' (bell)\n// 08    BS  '\\b' (backspace)\n// 0B    VT  '\\v' (vertical tab)\n// 0C    FF  '\\f' (form feed)\n// 0E    SO  (shift out)\n// 0F    SI  (shift in)\n// 10    DLE (data link escape)\n// 11    DC1 (device control 1)\n// 12    DC2 (device control 2)\n// 13    DC3 (device control 3)\n// 14    DC4 (device control 4)\n// 15    NAK (negative ack.)\n// 16    SYN (synchronous idle)\n// 17    ETB (end of trans. blk)\n// 18    CAN (cancel)\n// 19    EM  (end of medium)\n// 1A    SUB (substitute)\n// 1B    ESC (escape)\n// 1C    FS  (file separator)\n// 1D    GS  (group separator)\n// 1E    RS  (record separator)\n// 1F    US  (unit separator)\nfunction hasCorruptCharacters(string) {\n    return corruptCharacters.test(string);\n}\nfunction invertMap(map) {\n    return Object.keys(map).reduce(function(invertedMap, key) {\n        var value = map[key];\n        invertedMap[value] = invertedMap[value] || [];\n        invertedMap[value].push(key);\n        return invertedMap;\n    }, {});\n}\n// This ensures that the sort is stable. The default Array.sort of the browser\n// is not stable in firefox, as the JS spec does not enforce the sort to be\n// stable.\nfunction stableSort(arr, compare) {\n    // Stryker disable all : in previous versions of Chrome, sort was not stable by itself, so we had to add this. This is to support older versions of JS runners.\n    return arr.map(function(item, index) {\n        return {\n            item: item,\n            index: index\n        };\n    }).sort(function(a, b) {\n        return compare(a.item, b.item) || a.index - b.index;\n    }).map(function(_ref10) {\n        var item = _ref10.item;\n        return item;\n    });\n// Stryker restore all\n}\nmodule.exports = {\n    endsWith: endsWith,\n    startsWith: startsWith,\n    isContent: isContent,\n    isParagraphStart: isParagraphStart,\n    isParagraphEnd: isParagraphEnd,\n    isTagStart: isTagStart,\n    isTagEnd: isTagEnd,\n    isTextStart: isTextStart,\n    isTextEnd: isTextEnd,\n    isStarting: isStarting,\n    isEnding: isEnding,\n    isModule: isModule,\n    uniq: uniq,\n    getDuplicates: getDuplicates,\n    chunkBy: chunkBy,\n    last: last,\n    first: first,\n    xml2str: xml2str,\n    str2xml: str2xml,\n    getRightOrNull: getRightOrNull,\n    getRight: getRight,\n    getLeftOrNull: getLeftOrNull,\n    getLeft: getLeft,\n    pregMatchAll: pregMatchAll,\n    convertSpaces: convertSpaces,\n    charMapRegexes: charMapRegexes,\n    hasCorruptCharacters: hasCorruptCharacters,\n    defaults: defaults,\n    wordToUtf8: wordToUtf8,\n    utf8ToWord: utf8ToWord,\n    concatArrays: concatArrays,\n    invertMap: invertMap,\n    charMap: charMap,\n    getSingleAttribute: getSingleAttribute,\n    setSingleAttribute: setSingleAttribute,\n    isWhiteSpace: isWhiteSpace,\n    stableSort: stableSort\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/docxtemplater/js/doc-utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/docxtemplater/js/docxtemplater.js":
/*!********************************************************!*\
  !*** ./node_modules/docxtemplater/js/docxtemplater.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar _excluded = [\n    \"modules\"\n];\nfunction _typeof(o) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o) {\n        return typeof o;\n    } : function(o) {\n        return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n}\nfunction _objectWithoutProperties(source, excluded) {\n    if (source == null) return {};\n    var target = _objectWithoutPropertiesLoose(source, excluded);\n    var key, i;\n    if (Object.getOwnPropertySymbols) {\n        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n        for(i = 0; i < sourceSymbolKeys.length; i++){\n            key = sourceSymbolKeys[i];\n            if (excluded.indexOf(key) >= 0) continue;\n            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    for(var key in source){\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n            if (excluded.indexOf(key) >= 0) continue;\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    Object.defineProperty(Constructor, \"prototype\", {\n        writable: false\n    });\n    return Constructor;\n}\nfunction _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n    if (\"object\" != _typeof(t) || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n        var i = e.call(t, r || \"default\");\n        if (\"object\" != _typeof(i)) return i;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n}\nvar DocUtils = __webpack_require__(/*! ./doc-utils.js */ \"(ssr)/./node_modules/docxtemplater/js/doc-utils.js\");\nDocUtils.traits = __webpack_require__(/*! ./traits.js */ \"(ssr)/./node_modules/docxtemplater/js/traits.js\");\nDocUtils.moduleWrapper = __webpack_require__(/*! ./module-wrapper.js */ \"(ssr)/./node_modules/docxtemplater/js/module-wrapper.js\");\nvar createScope = __webpack_require__(/*! ./scope-manager.js */ \"(ssr)/./node_modules/docxtemplater/js/scope-manager.js\");\nvar _require = __webpack_require__(/*! ./errors.js */ \"(ssr)/./node_modules/docxtemplater/js/errors.js\"), throwMultiError = _require.throwMultiError, throwResolveBeforeCompile = _require.throwResolveBeforeCompile, throwRenderInvalidTemplate = _require.throwRenderInvalidTemplate, throwRenderTwice = _require.throwRenderTwice;\nvar logErrors = __webpack_require__(/*! ./error-logger.js */ \"(ssr)/./node_modules/docxtemplater/js/error-logger.js\");\nvar collectContentTypes = __webpack_require__(/*! ./collect-content-types.js */ \"(ssr)/./node_modules/docxtemplater/js/collect-content-types.js\");\nvar ctXML = \"[Content_Types].xml\";\nvar relsFile = \"_rels/.rels\";\nvar commonModule = __webpack_require__(/*! ./modules/common.js */ \"(ssr)/./node_modules/docxtemplater/js/modules/common.js\");\nvar Lexer = __webpack_require__(/*! ./lexer.js */ \"(ssr)/./node_modules/docxtemplater/js/lexer.js\");\nvar defaults = DocUtils.defaults, str2xml = DocUtils.str2xml, xml2str = DocUtils.xml2str, moduleWrapper = DocUtils.moduleWrapper, concatArrays = DocUtils.concatArrays, uniq = DocUtils.uniq, getDuplicates = DocUtils.getDuplicates, stableSort = DocUtils.stableSort;\nvar _require2 = __webpack_require__(/*! ./errors.js */ \"(ssr)/./node_modules/docxtemplater/js/errors.js\"), XTInternalError = _require2.XTInternalError, throwFileTypeNotIdentified = _require2.throwFileTypeNotIdentified, throwFileTypeNotHandled = _require2.throwFileTypeNotHandled, throwApiVersionError = _require2.throwApiVersionError;\nvar currentModuleApiVersion = [\n    3,\n    40,\n    0\n];\nfunction dropUnsupportedFileTypesModules(dx) {\n    dx.modules = dx.modules.filter(function(module1) {\n        if (module1.supportedFileTypes) {\n            if (!Array.isArray(module1.supportedFileTypes)) {\n                throw new Error(\"The supportedFileTypes field of the module must be an array\");\n            }\n            var isSupportedModule = module1.supportedFileTypes.indexOf(dx.fileType) !== -1;\n            if (!isSupportedModule) {\n                module1.on(\"detached\");\n            }\n            return isSupportedModule;\n        }\n        return true;\n    });\n}\nvar Docxtemplater = /*#__PURE__*/ function() {\n    function Docxtemplater(zip) {\n        var _this = this;\n        var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, _ref$modules = _ref.modules, modules = _ref$modules === void 0 ? [] : _ref$modules, options = _objectWithoutProperties(_ref, _excluded);\n        _classCallCheck(this, Docxtemplater);\n        if (!Array.isArray(modules)) {\n            throw new Error(\"The modules argument of docxtemplater's constructor must be an array\");\n        }\n        this.targets = [];\n        this.rendered = false;\n        this.scopeManagers = {};\n        this.compiled = {};\n        this.modules = [\n            commonModule()\n        ];\n        this.setOptions(options);\n        modules.forEach(function(module1) {\n            _this.attachModule(module1);\n        });\n        if (arguments.length > 0) {\n            if (!zip || !zip.files || typeof zip.file !== \"function\") {\n                throw new Error(\"The first argument of docxtemplater's constructor must be a valid zip file (jszip v2 or pizzip v3)\");\n            }\n            this.loadZip(zip);\n            this.compile();\n            this.v4Constructor = true;\n        }\n    }\n    return _createClass(Docxtemplater, [\n        {\n            key: \"verifyApiVersion\",\n            value: function verifyApiVersion(neededVersion) {\n                neededVersion = neededVersion.split(\".\").map(function(i) {\n                    return parseInt(i, 10);\n                });\n                if (neededVersion.length !== 3) {\n                    throwApiVersionError(\"neededVersion is not a valid version\", {\n                        neededVersion: neededVersion,\n                        explanation: \"the neededVersion must be an array of length 3\"\n                    });\n                }\n                if (neededVersion[0] !== currentModuleApiVersion[0]) {\n                    throwApiVersionError(\"The major api version do not match, you probably have to update docxtemplater with npm install --save docxtemplater\", {\n                        neededVersion: neededVersion,\n                        currentModuleApiVersion: currentModuleApiVersion,\n                        explanation: \"moduleAPIVersionMismatch : needed=\".concat(neededVersion.join(\".\"), \", current=\").concat(currentModuleApiVersion.join(\".\"))\n                    });\n                }\n                if (neededVersion[1] > currentModuleApiVersion[1]) {\n                    throwApiVersionError(\"The minor api version is not uptodate, you probably have to update docxtemplater with npm install --save docxtemplater\", {\n                        neededVersion: neededVersion,\n                        currentModuleApiVersion: currentModuleApiVersion,\n                        explanation: \"moduleAPIVersionMismatch : needed=\".concat(neededVersion.join(\".\"), \", current=\").concat(currentModuleApiVersion.join(\".\"))\n                    });\n                }\n                if (neededVersion[1] === currentModuleApiVersion[1] && neededVersion[2] > currentModuleApiVersion[2]) {\n                    throwApiVersionError(\"The patch api version is not uptodate, you probably have to update docxtemplater with npm install --save docxtemplater\", {\n                        neededVersion: neededVersion,\n                        currentModuleApiVersion: currentModuleApiVersion,\n                        explanation: \"moduleAPIVersionMismatch : needed=\".concat(neededVersion.join(\".\"), \", current=\").concat(currentModuleApiVersion.join(\".\"))\n                    });\n                }\n                return true;\n            }\n        },\n        {\n            key: \"setModules\",\n            value: function setModules(obj) {\n                this.modules.forEach(function(module1) {\n                    module1.set(obj);\n                });\n            }\n        },\n        {\n            key: \"sendEvent\",\n            value: function sendEvent(eventName) {\n                this.modules.forEach(function(module1) {\n                    module1.on(eventName);\n                });\n            }\n        },\n        {\n            key: \"attachModule\",\n            value: function attachModule(module1) {\n                if (this.v4Constructor) {\n                    throw new XTInternalError(\"attachModule() should not be called manually when using the v4 constructor\");\n                }\n                var moduleType = _typeof(module1);\n                if (moduleType === \"function\") {\n                    throw new XTInternalError(\"Cannot attach a class/function as a module. Most probably you forgot to instantiate the module by using `new` on the module.\");\n                }\n                if (!module1 || moduleType !== \"object\") {\n                    throw new XTInternalError(\"Cannot attachModule with a falsy value\");\n                }\n                if (module1.requiredAPIVersion) {\n                    this.verifyApiVersion(module1.requiredAPIVersion);\n                }\n                if (module1.attached === true) {\n                    if (typeof module1.clone === \"function\") {\n                        module1 = module1.clone();\n                    } else {\n                        throw new Error('Cannot attach a module that was already attached : \"'.concat(module1.name, '\". The most likely cause is that you are instantiating the module at the root level, and using it for multiple instances of Docxtemplater'));\n                    }\n                }\n                module1.attached = true;\n                var wrappedModule = moduleWrapper(module1);\n                this.modules.push(wrappedModule);\n                wrappedModule.on(\"attached\");\n                if (this.fileType) {\n                    dropUnsupportedFileTypesModules(this);\n                }\n                return this;\n            }\n        },\n        {\n            key: \"setOptions\",\n            value: function setOptions(options) {\n                var _this2 = this;\n                if (this.v4Constructor) {\n                    throw new Error(\"setOptions() should not be called manually when using the v4 constructor\");\n                }\n                if (!options) {\n                    throw new Error(\"setOptions should be called with an object as first parameter\");\n                }\n                this.options = {};\n                Object.keys(defaults).forEach(function(key) {\n                    var defaultValue = defaults[key];\n                    _this2.options[key] = options[key] != null ? options[key] : _this2[key] || defaultValue;\n                    _this2[key] = _this2.options[key];\n                });\n                this.delimiters.start = DocUtils.utf8ToWord(this.delimiters.start);\n                this.delimiters.end = DocUtils.utf8ToWord(this.delimiters.end);\n                return this;\n            }\n        },\n        {\n            key: \"loadZip\",\n            value: function loadZip(zip) {\n                if (this.v4Constructor) {\n                    throw new Error(\"loadZip() should not be called manually when using the v4 constructor\");\n                }\n                if (zip.loadAsync) {\n                    throw new XTInternalError(\"Docxtemplater doesn't handle JSZip version >=3, please use pizzip\");\n                }\n                this.zip = zip;\n                this.updateFileTypeConfig();\n                this.modules = concatArrays([\n                    this.fileTypeConfig.baseModules.map(function(moduleFunction) {\n                        return moduleFunction();\n                    }),\n                    this.modules\n                ]);\n                dropUnsupportedFileTypesModules(this);\n                return this;\n            }\n        },\n        {\n            key: \"precompileFile\",\n            value: function precompileFile(fileName) {\n                var currentFile = this.createTemplateClass(fileName);\n                currentFile.preparse();\n                this.compiled[fileName] = currentFile;\n            }\n        },\n        {\n            key: \"compileFile\",\n            value: function compileFile(fileName) {\n                this.compiled[fileName].parse();\n            }\n        },\n        {\n            key: \"getScopeManager\",\n            value: function getScopeManager(to, currentFile, tags) {\n                if (!this.scopeManagers[to]) {\n                    this.scopeManagers[to] = createScope({\n                        tags: tags,\n                        parser: this.parser,\n                        cachedParsers: currentFile.cachedParsers\n                    });\n                }\n                return this.scopeManagers[to];\n            }\n        },\n        {\n            key: \"resolveData\",\n            value: function resolveData(data) {\n                var _this3 = this;\n                var errors = [];\n                if (!Object.keys(this.compiled).length) {\n                    throwResolveBeforeCompile();\n                }\n                return Promise.resolve(data).then(function(data) {\n                    _this3.setData(data);\n                    _this3.setModules({\n                        data: _this3.data,\n                        Lexer: Lexer\n                    });\n                    _this3.mapper = _this3.modules.reduce(function(value, module1) {\n                        return module1.getRenderedMap(value);\n                    }, {});\n                    return Promise.all(Object.keys(_this3.mapper).map(function(to) {\n                        var _this3$mapper$to = _this3.mapper[to], from = _this3$mapper$to.from, data = _this3$mapper$to.data;\n                        return Promise.resolve(data).then(function(data) {\n                            var currentFile = _this3.compiled[from];\n                            currentFile.filePath = to;\n                            currentFile.scopeManager = _this3.getScopeManager(to, currentFile, data);\n                            return currentFile.resolveTags(data).then(function(result) {\n                                currentFile.scopeManager.finishedResolving = true;\n                                return result;\n                            }, function(errs) {\n                                Array.prototype.push.apply(errors, errs);\n                            });\n                        });\n                    })).then(function(resolved) {\n                        if (errors.length !== 0) {\n                            if (_this3.options.errorLogging) {\n                                logErrors(errors, _this3.options.errorLogging);\n                            }\n                            throwMultiError(errors);\n                        }\n                        return concatArrays(resolved);\n                    });\n                });\n            }\n        },\n        {\n            key: \"reorderModules\",\n            value: function reorderModules() {\n                this.modules = stableSort(this.modules, function(m1, m2) {\n                    return (m2.priority || 0) - (m1.priority || 0);\n                });\n            }\n        },\n        {\n            key: \"throwIfDuplicateModules\",\n            value: function throwIfDuplicateModules() {\n                var duplicates = getDuplicates(this.modules.map(function(_ref2) {\n                    var name = _ref2.name;\n                    return name;\n                }));\n                if (duplicates.length > 0) {\n                    throw new XTInternalError('Detected duplicate module \"'.concat(duplicates[0], '\"'));\n                }\n            }\n        },\n        {\n            key: \"compile\",\n            value: function compile() {\n                var _this4 = this;\n                this.updateFileTypeConfig();\n                this.throwIfDuplicateModules();\n                this.reorderModules();\n                if (Object.keys(this.compiled).length) {\n                    return this;\n                }\n                this.options = this.modules.reduce(function(options, module1) {\n                    return module1.optionsTransformer(options, _this4);\n                }, this.options);\n                this.options.xmlFileNames = uniq(this.options.xmlFileNames);\n                this.xmlDocuments = this.options.xmlFileNames.reduce(function(xmlDocuments, fileName) {\n                    var content = _this4.zip.files[fileName].asText();\n                    xmlDocuments[fileName] = str2xml(content);\n                    return xmlDocuments;\n                }, {});\n                this.setModules({\n                    zip: this.zip,\n                    xmlDocuments: this.xmlDocuments\n                });\n                this.getTemplatedFiles();\n                // Loop inside all templatedFiles (ie xml files with content).\n                // Sometimes they don't exist (footer.xml for example)\n                this.templatedFiles.forEach(function(fileName) {\n                    if (_this4.zip.files[fileName] != null) {\n                        _this4.precompileFile(fileName);\n                    }\n                });\n                this.templatedFiles.forEach(function(fileName) {\n                    if (_this4.zip.files[fileName] != null) {\n                        _this4.compileFile(fileName);\n                    }\n                });\n                this.setModules({\n                    compiled: this.compiled\n                });\n                verifyErrors(this);\n                return this;\n            }\n        },\n        {\n            key: \"getRelsTypes\",\n            value: function getRelsTypes() {\n                var rootRels = this.zip.files[relsFile];\n                var rootRelsXml = rootRels ? str2xml(rootRels.asText()) : null;\n                var rootRelationships = rootRelsXml ? rootRelsXml.getElementsByTagName(\"Relationship\") : [];\n                var relsTypes = {};\n                for(var i = 0, len = rootRelationships.length; i < len; i++){\n                    var r = rootRelationships[i];\n                    relsTypes[r.getAttribute(\"Target\")] = r.getAttribute(\"Type\");\n                }\n                return relsTypes;\n            }\n        },\n        {\n            key: \"getContentTypes\",\n            value: function getContentTypes() {\n                var contentTypes = this.zip.files[ctXML];\n                var contentTypeXml = contentTypes ? str2xml(contentTypes.asText()) : null;\n                var overrides = contentTypeXml ? contentTypeXml.getElementsByTagName(\"Override\") : null;\n                var defaults = contentTypeXml ? contentTypeXml.getElementsByTagName(\"Default\") : null;\n                return {\n                    overrides: overrides,\n                    defaults: defaults,\n                    contentTypes: contentTypes,\n                    contentTypeXml: contentTypeXml\n                };\n            }\n        },\n        {\n            key: \"updateFileTypeConfig\",\n            value: function updateFileTypeConfig() {\n                var _this5 = this;\n                var fileType;\n                if (this.zip.files.mimetype) {\n                    fileType = \"odt\";\n                }\n                this.relsTypes = this.getRelsTypes();\n                var _this$getContentTypes = this.getContentTypes(), overrides = _this$getContentTypes.overrides, defaults = _this$getContentTypes.defaults, contentTypes = _this$getContentTypes.contentTypes, contentTypeXml = _this$getContentTypes.contentTypeXml;\n                if (contentTypeXml) {\n                    this.filesContentTypes = collectContentTypes(overrides, defaults, this.zip);\n                    this.invertedContentTypes = DocUtils.invertMap(this.filesContentTypes);\n                    this.setModules({\n                        contentTypes: this.contentTypes,\n                        invertedContentTypes: this.invertedContentTypes\n                    });\n                }\n                this.modules.forEach(function(module1) {\n                    fileType = module1.getFileType({\n                        zip: _this5.zip,\n                        contentTypes: contentTypes,\n                        contentTypeXml: contentTypeXml,\n                        overrides: overrides,\n                        defaults: defaults,\n                        doc: _this5\n                    }) || fileType;\n                });\n                if (fileType === \"odt\") {\n                    throwFileTypeNotHandled(fileType);\n                }\n                if (!fileType) {\n                    throwFileTypeNotIdentified(this.zip);\n                }\n                this.fileType = fileType;\n                dropUnsupportedFileTypesModules(this);\n                this.fileTypeConfig = this.options.fileTypeConfig || this.fileTypeConfig || Docxtemplater.FileTypeConfig[this.fileType]();\n                return this;\n            }\n        },\n        {\n            key: \"renderAsync\",\n            value: function renderAsync(data) {\n                var _this6 = this;\n                return this.resolveData(data).then(function() {\n                    return _this6.render();\n                });\n            }\n        },\n        {\n            key: \"render\",\n            value: function render(data) {\n                var _this7 = this;\n                if (this.rendered) {\n                    throwRenderTwice();\n                }\n                this.rendered = true;\n                this.compile();\n                if (this.errors.length > 0) {\n                    throwRenderInvalidTemplate();\n                }\n                if (data) {\n                    this.setData(data);\n                }\n                this.setModules({\n                    data: this.data,\n                    Lexer: Lexer\n                });\n                this.mapper = this.mapper || this.modules.reduce(function(value, module1) {\n                    return module1.getRenderedMap(value);\n                }, {});\n                Object.keys(this.mapper).forEach(function(to) {\n                    var _this7$mapper$to = _this7.mapper[to], from = _this7$mapper$to.from, data = _this7$mapper$to.data;\n                    var currentFile = _this7.compiled[from];\n                    currentFile.scopeManager = _this7.getScopeManager(to, currentFile, data);\n                    currentFile.render(to);\n                    _this7.zip.file(to, currentFile.content, {\n                        createFolders: true\n                    });\n                });\n                verifyErrors(this);\n                this.sendEvent(\"syncing-zip\");\n                this.syncZip();\n                // The synced-zip event is used in the subtemplate module for example\n                this.sendEvent(\"synced-zip\");\n                return this;\n            }\n        },\n        {\n            key: \"syncZip\",\n            value: function syncZip() {\n                var _this8 = this;\n                Object.keys(this.xmlDocuments).forEach(function(fileName) {\n                    _this8.zip.remove(fileName);\n                    var content = xml2str(_this8.xmlDocuments[fileName]);\n                    return _this8.zip.file(fileName, content, {\n                        createFolders: true\n                    });\n                });\n            }\n        },\n        {\n            key: \"setData\",\n            value: function setData(data) {\n                this.data = data;\n                return this;\n            }\n        },\n        {\n            key: \"getZip\",\n            value: function getZip() {\n                return this.zip;\n            }\n        },\n        {\n            key: \"createTemplateClass\",\n            value: function createTemplateClass(path) {\n                var content = this.zip.files[path].asText();\n                return this.createTemplateClassFromContent(content, path);\n            }\n        },\n        {\n            key: \"createTemplateClassFromContent\",\n            value: function createTemplateClassFromContent(content, filePath) {\n                var _this9 = this;\n                var xmltOptions = {\n                    filePath: filePath,\n                    contentType: this.filesContentTypes[filePath],\n                    relsType: this.relsTypes[filePath]\n                };\n                Object.keys(defaults).concat([\n                    \"filesContentTypes\",\n                    \"fileTypeConfig\",\n                    \"fileType\",\n                    \"modules\"\n                ]).forEach(function(key) {\n                    xmltOptions[key] = _this9[key];\n                });\n                return new Docxtemplater.XmlTemplater(content, xmltOptions);\n            }\n        },\n        {\n            key: \"getFullText\",\n            value: function getFullText(path) {\n                return this.createTemplateClass(path || this.fileTypeConfig.textPath(this)).getFullText();\n            }\n        },\n        {\n            key: \"getTemplatedFiles\",\n            value: function getTemplatedFiles() {\n                var _this10 = this;\n                this.templatedFiles = this.fileTypeConfig.getTemplatedFiles(this.zip);\n                this.targets.forEach(function(target) {\n                    _this10.templatedFiles.push(target);\n                });\n                this.templatedFiles = uniq(this.templatedFiles);\n                return this.templatedFiles;\n            }\n        }\n    ]);\n}();\nfunction verifyErrors(doc) {\n    var compiled = doc.compiled;\n    doc.errors = concatArrays(Object.keys(compiled).map(function(name) {\n        return compiled[name].allErrors;\n    }));\n    if (doc.errors.length !== 0) {\n        if (doc.options.errorLogging) {\n            logErrors(doc.errors, doc.options.errorLogging);\n        }\n        throwMultiError(doc.errors);\n    }\n}\nDocxtemplater.DocUtils = DocUtils;\nDocxtemplater.Errors = __webpack_require__(/*! ./errors.js */ \"(ssr)/./node_modules/docxtemplater/js/errors.js\");\nDocxtemplater.XmlTemplater = __webpack_require__(/*! ./xml-templater.js */ \"(ssr)/./node_modules/docxtemplater/js/xml-templater.js\");\nDocxtemplater.FileTypeConfig = __webpack_require__(/*! ./file-type-config.js */ \"(ssr)/./node_modules/docxtemplater/js/file-type-config.js\");\nDocxtemplater.XmlMatcher = __webpack_require__(/*! ./xml-matcher.js */ \"(ssr)/./node_modules/docxtemplater/js/xml-matcher.js\");\nmodule.exports = Docxtemplater;\nmodule.exports[\"default\"] = Docxtemplater;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/docxtemplater/js/docxtemplater.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/docxtemplater/js/error-logger.js":
/*!*******************************************************!*\
  !*** ./node_modules/docxtemplater/js/error-logger.js ***!
  \*******************************************************/
/***/ ((module) => {

eval("\n// The error thrown here contains additional information when logged with JSON.stringify (it contains a properties object containing all suberrors).\nfunction replaceErrors(key, value) {\n    if (value instanceof Error) {\n        return Object.getOwnPropertyNames(value).concat(\"stack\").reduce(function(error, key) {\n            error[key] = value[key];\n            if (key === \"stack\") {\n                // This is used because in Firefox, stack is not an own property\n                error[key] = value[key].toString();\n            }\n            return error;\n        }, {});\n    }\n    return value;\n}\nfunction logger(error, logging) {\n    // eslint-disable-next-line no-console\n    console.log(JSON.stringify({\n        error: error\n    }, replaceErrors, logging === \"json\" ? 2 : null));\n    if (error.properties && error.properties.errors instanceof Array) {\n        var errorMessages = error.properties.errors.map(function(error) {\n            return error.properties.explanation;\n        }).join(\"\\n\");\n        // eslint-disable-next-line no-console\n        console.log(\"errorMessages\", errorMessages);\n    // errorMessages is a humanly readable message looking like this :\n    // 'The tag beginning with \"foobar\" is unopened'\n    }\n}\nmodule.exports = logger;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZG9jeHRlbXBsYXRlci9qcy9lcnJvci1sb2dnZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYixvSkFBb0o7QUFDcEosU0FBU0EsY0FBY0MsR0FBRyxFQUFFQyxLQUFLO0lBQy9CLElBQUlBLGlCQUFpQkMsT0FBTztRQUMxQixPQUFPQyxPQUFPQyxtQkFBbUIsQ0FBQ0gsT0FBT0ksTUFBTSxDQUFDLFNBQVNDLE1BQU0sQ0FBQyxTQUFVQyxLQUFLLEVBQUVQLEdBQUc7WUFDbEZPLEtBQUssQ0FBQ1AsSUFBSSxHQUFHQyxLQUFLLENBQUNELElBQUk7WUFDdkIsSUFBSUEsUUFBUSxTQUFTO2dCQUNuQixnRUFBZ0U7Z0JBQ2hFTyxLQUFLLENBQUNQLElBQUksR0FBR0MsS0FBSyxDQUFDRCxJQUFJLENBQUNRLFFBQVE7WUFDbEM7WUFDQSxPQUFPRDtRQUNULEdBQUcsQ0FBQztJQUNOO0lBQ0EsT0FBT047QUFDVDtBQUNBLFNBQVNRLE9BQU9GLEtBQUssRUFBRUcsT0FBTztJQUM1QixzQ0FBc0M7SUFDdENDLFFBQVFDLEdBQUcsQ0FBQ0MsS0FBS0MsU0FBUyxDQUFDO1FBQ3pCUCxPQUFPQTtJQUNULEdBQUdSLGVBQWVXLFlBQVksU0FBUyxJQUFJO0lBQzNDLElBQUlILE1BQU1RLFVBQVUsSUFBSVIsTUFBTVEsVUFBVSxDQUFDQyxNQUFNLFlBQVlDLE9BQU87UUFDaEUsSUFBSUMsZ0JBQWdCWCxNQUFNUSxVQUFVLENBQUNDLE1BQU0sQ0FBQ0csR0FBRyxDQUFDLFNBQVVaLEtBQUs7WUFDN0QsT0FBT0EsTUFBTVEsVUFBVSxDQUFDSyxXQUFXO1FBQ3JDLEdBQUdDLElBQUksQ0FBQztRQUNSLHNDQUFzQztRQUN0Q1YsUUFBUUMsR0FBRyxDQUFDLGlCQUFpQk07SUFDN0Isa0VBQWtFO0lBQ2xFLGdEQUFnRDtJQUNsRDtBQUNGO0FBQ0FJLE9BQU9DLE9BQU8sR0FBR2QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWQtcGxhbm5lci1mcm9udC1lbmQvLi9ub2RlX21vZHVsZXMvZG9jeHRlbXBsYXRlci9qcy9lcnJvci1sb2dnZXIuanM/ZTc2YSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLy8gVGhlIGVycm9yIHRocm93biBoZXJlIGNvbnRhaW5zIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gd2hlbiBsb2dnZWQgd2l0aCBKU09OLnN0cmluZ2lmeSAoaXQgY29udGFpbnMgYSBwcm9wZXJ0aWVzIG9iamVjdCBjb250YWluaW5nIGFsbCBzdWJlcnJvcnMpLlxuZnVuY3Rpb24gcmVwbGFjZUVycm9ycyhrZXksIHZhbHVlKSB7XG4gIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHZhbHVlKS5jb25jYXQoXCJzdGFja1wiKS5yZWR1Y2UoZnVuY3Rpb24gKGVycm9yLCBrZXkpIHtcbiAgICAgIGVycm9yW2tleV0gPSB2YWx1ZVtrZXldO1xuICAgICAgaWYgKGtleSA9PT0gXCJzdGFja1wiKSB7XG4gICAgICAgIC8vIFRoaXMgaXMgdXNlZCBiZWNhdXNlIGluIEZpcmVmb3gsIHN0YWNrIGlzIG5vdCBhbiBvd24gcHJvcGVydHlcbiAgICAgICAgZXJyb3Jba2V5XSA9IHZhbHVlW2tleV0udG9TdHJpbmcoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBlcnJvcjtcbiAgICB9LCB7fSk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gbG9nZ2VyKGVycm9yLCBsb2dnaW5nKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KHtcbiAgICBlcnJvcjogZXJyb3JcbiAgfSwgcmVwbGFjZUVycm9ycywgbG9nZ2luZyA9PT0gXCJqc29uXCIgPyAyIDogbnVsbCkpO1xuICBpZiAoZXJyb3IucHJvcGVydGllcyAmJiBlcnJvci5wcm9wZXJ0aWVzLmVycm9ycyBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgdmFyIGVycm9yTWVzc2FnZXMgPSBlcnJvci5wcm9wZXJ0aWVzLmVycm9ycy5tYXAoZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICByZXR1cm4gZXJyb3IucHJvcGVydGllcy5leHBsYW5hdGlvbjtcbiAgICB9KS5qb2luKFwiXFxuXCIpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS5sb2coXCJlcnJvck1lc3NhZ2VzXCIsIGVycm9yTWVzc2FnZXMpO1xuICAgIC8vIGVycm9yTWVzc2FnZXMgaXMgYSBodW1hbmx5IHJlYWRhYmxlIG1lc3NhZ2UgbG9va2luZyBsaWtlIHRoaXMgOlxuICAgIC8vICdUaGUgdGFnIGJlZ2lubmluZyB3aXRoIFwiZm9vYmFyXCIgaXMgdW5vcGVuZWQnXG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gbG9nZ2VyOyJdLCJuYW1lcyI6WyJyZXBsYWNlRXJyb3JzIiwia2V5IiwidmFsdWUiLCJFcnJvciIsIk9iamVjdCIsImdldE93blByb3BlcnR5TmFtZXMiLCJjb25jYXQiLCJyZWR1Y2UiLCJlcnJvciIsInRvU3RyaW5nIiwibG9nZ2VyIiwibG9nZ2luZyIsImNvbnNvbGUiLCJsb2ciLCJKU09OIiwic3RyaW5naWZ5IiwicHJvcGVydGllcyIsImVycm9ycyIsIkFycmF5IiwiZXJyb3JNZXNzYWdlcyIsIm1hcCIsImV4cGxhbmF0aW9uIiwiam9pbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/docxtemplater/js/error-logger.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/docxtemplater/js/errors.js":
/*!*************************************************!*\
  !*** ./node_modules/docxtemplater/js/errors.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nfunction _typeof(o) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o) {\n        return typeof o;\n    } : function(o) {\n        return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n}\nfunction ownKeys(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n    if (\"object\" != _typeof(t) || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n        var i = e.call(t, r || \"default\");\n        if (\"object\" != _typeof(i)) return i;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n}\nvar _require = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/docxtemplater/js/utils.js\"), last = _require.last, first = _require.first;\nfunction XTError(message) {\n    this.name = \"GenericError\";\n    this.message = message;\n    this.stack = new Error(message).stack;\n}\nXTError.prototype = Error.prototype;\nfunction XTTemplateError(message) {\n    this.name = \"TemplateError\";\n    this.message = message;\n    this.stack = new Error(message).stack;\n}\nXTTemplateError.prototype = new XTError();\nfunction XTRenderingError(message) {\n    this.name = \"RenderingError\";\n    this.message = message;\n    this.stack = new Error(message).stack;\n}\nXTRenderingError.prototype = new XTError();\nfunction XTScopeParserError(message) {\n    this.name = \"ScopeParserError\";\n    this.message = message;\n    this.stack = new Error(message).stack;\n}\nXTScopeParserError.prototype = new XTError();\nfunction XTInternalError(message) {\n    this.name = \"InternalError\";\n    this.properties = {\n        explanation: \"InternalError\"\n    };\n    this.message = message;\n    this.stack = new Error(message).stack;\n}\nXTInternalError.prototype = new XTError();\nfunction XTAPIVersionError(message) {\n    this.name = \"APIVersionError\";\n    this.properties = {\n        explanation: \"APIVersionError\"\n    };\n    this.message = message;\n    this.stack = new Error(message).stack;\n}\nXTAPIVersionError.prototype = new XTError();\nfunction throwApiVersionError(msg, properties) {\n    var err = new XTAPIVersionError(msg);\n    err.properties = _objectSpread({\n        id: \"api_version_error\"\n    }, properties);\n    throw err;\n}\nfunction throwMultiError(errors) {\n    var err = new XTTemplateError(\"Multi error\");\n    err.properties = {\n        errors: errors,\n        id: \"multi_error\",\n        explanation: \"The template has multiple errors\"\n    };\n    throw err;\n}\nfunction getUnopenedTagException(options) {\n    var err = new XTTemplateError(\"Unopened tag\");\n    err.properties = {\n        xtag: last(options.xtag.split(\" \")),\n        id: \"unopened_tag\",\n        context: options.xtag,\n        offset: options.offset,\n        lIndex: options.lIndex,\n        explanation: 'The tag beginning with \"'.concat(options.xtag.substr(0, 10), '\" is unopened')\n    };\n    return err;\n}\nfunction getDuplicateOpenTagException(options) {\n    var err = new XTTemplateError(\"Duplicate open tag, expected one open tag\");\n    err.properties = {\n        xtag: first(options.xtag.split(\" \")),\n        id: \"duplicate_open_tag\",\n        context: options.xtag,\n        offset: options.offset,\n        lIndex: options.lIndex,\n        explanation: 'The tag beginning with \"'.concat(options.xtag.substr(0, 10), '\" has duplicate open tags')\n    };\n    return err;\n}\nfunction getDuplicateCloseTagException(options) {\n    var err = new XTTemplateError(\"Duplicate close tag, expected one close tag\");\n    err.properties = {\n        xtag: first(options.xtag.split(\" \")),\n        id: \"duplicate_close_tag\",\n        context: options.xtag,\n        offset: options.offset,\n        lIndex: options.lIndex,\n        explanation: 'The tag ending with \"'.concat(options.xtag.substr(0, 10), '\" has duplicate close tags')\n    };\n    return err;\n}\nfunction getUnclosedTagException(options) {\n    var err = new XTTemplateError(\"Unclosed tag\");\n    err.properties = {\n        xtag: first(options.xtag.split(\" \")).substr(1),\n        id: \"unclosed_tag\",\n        context: options.xtag,\n        offset: options.offset,\n        lIndex: options.lIndex,\n        explanation: 'The tag beginning with \"'.concat(options.xtag.substr(0, 10), '\" is unclosed')\n    };\n    return err;\n}\nfunction throwXmlTagNotFound(options) {\n    var err = new XTTemplateError('No tag \"'.concat(options.element, '\" was found at the ').concat(options.position));\n    var part = options.parsed[options.index];\n    err.properties = {\n        id: \"no_xml_tag_found_at_\".concat(options.position),\n        explanation: 'No tag \"'.concat(options.element, '\" was found at the ').concat(options.position),\n        offset: part.offset,\n        part: part,\n        parsed: options.parsed,\n        index: options.index,\n        element: options.element\n    };\n    throw err;\n}\nfunction getCorruptCharactersException(_ref) {\n    var tag = _ref.tag, value = _ref.value, offset = _ref.offset;\n    var err = new XTRenderingError(\"There are some XML corrupt characters\");\n    err.properties = {\n        id: \"invalid_xml_characters\",\n        xtag: tag,\n        value: value,\n        offset: offset,\n        explanation: \"There are some corrupt characters for the field \".concat(tag)\n    };\n    return err;\n}\nfunction getInvalidRawXMLValueException(_ref2) {\n    var tag = _ref2.tag, value = _ref2.value, offset = _ref2.offset;\n    var err = new XTRenderingError(\"Non string values are not allowed for rawXML tags\");\n    err.properties = {\n        id: \"invalid_raw_xml_value\",\n        xtag: tag,\n        value: value,\n        offset: offset,\n        explanation: \"The value of the raw tag : '\".concat(tag, \"' is not a string\")\n    };\n    return err;\n}\nfunction throwExpandNotFound(options) {\n    var _options$part = options.part, value = _options$part.value, offset = _options$part.offset, _options$id = options.id, id = _options$id === void 0 ? \"raw_tag_outerxml_invalid\" : _options$id, _options$message = options.message, message = _options$message === void 0 ? \"Raw tag not in paragraph\" : _options$message;\n    var part = options.part;\n    var _options$explanation = options.explanation, explanation = _options$explanation === void 0 ? 'The tag \"'.concat(value, '\" is not inside a paragraph') : _options$explanation;\n    if (typeof explanation === \"function\") {\n        explanation = explanation(part);\n    }\n    var err = new XTTemplateError(message);\n    err.properties = {\n        id: id,\n        explanation: explanation,\n        rootError: options.rootError,\n        xtag: value,\n        offset: offset,\n        postparsed: options.postparsed,\n        expandTo: options.expandTo,\n        index: options.index\n    };\n    throw err;\n}\nfunction throwRawTagShouldBeOnlyTextInParagraph(options) {\n    var err = new XTTemplateError(\"Raw tag should be the only text in paragraph\");\n    var tag = options.part.value;\n    err.properties = {\n        id: \"raw_xml_tag_should_be_only_text_in_paragraph\",\n        explanation: 'The raw tag \"'.concat(tag, '\" should be the only text in this paragraph. This means that this tag should not be surrounded by any text or spaces.'),\n        xtag: tag,\n        offset: options.part.offset,\n        paragraphParts: options.paragraphParts\n    };\n    throw err;\n}\nfunction getUnmatchedLoopException(part) {\n    var location = part.location, offset = part.offset, square = part.square;\n    var t = location === \"start\" ? \"unclosed\" : \"unopened\";\n    var T = location === \"start\" ? \"Unclosed\" : \"Unopened\";\n    var err = new XTTemplateError(\"\".concat(T, \" loop\"));\n    var tag = part.value;\n    err.properties = {\n        id: \"\".concat(t, \"_loop\"),\n        explanation: 'The loop with tag \"'.concat(tag, '\" is ').concat(t),\n        xtag: tag,\n        offset: offset\n    };\n    if (square) {\n        err.properties.square = square;\n    }\n    return err;\n}\nfunction getUnbalancedLoopException(pair, lastPair) {\n    var err = new XTTemplateError(\"Unbalanced loop tag\");\n    var lastL = lastPair[0].part.value;\n    var lastR = lastPair[1].part.value;\n    var l = pair[0].part.value;\n    var r = pair[1].part.value;\n    err.properties = {\n        id: \"unbalanced_loop_tags\",\n        explanation: \"Unbalanced loop tags {#\".concat(lastL, \"}{/\").concat(lastR, \"}{#\").concat(l, \"}{/\").concat(r, \"}\"),\n        offset: [\n            lastPair[0].part.offset,\n            pair[1].part.offset\n        ],\n        lastPair: {\n            left: lastPair[0].part.value,\n            right: lastPair[1].part.value\n        },\n        pair: {\n            left: pair[0].part.value,\n            right: pair[1].part.value\n        }\n    };\n    return err;\n}\nfunction getClosingTagNotMatchOpeningTag(_ref3) {\n    var tags = _ref3.tags;\n    var err = new XTTemplateError(\"Closing tag does not match opening tag\");\n    err.properties = {\n        id: \"closing_tag_does_not_match_opening_tag\",\n        explanation: 'The tag \"'.concat(tags[0].value, '\" is closed by the tag \"').concat(tags[1].value, '\"'),\n        openingtag: first(tags).value,\n        offset: [\n            first(tags).offset,\n            last(tags).offset\n        ],\n        closingtag: last(tags).value\n    };\n    return err;\n}\nfunction getScopeCompilationError(_ref4) {\n    var tag = _ref4.tag, rootError = _ref4.rootError, offset = _ref4.offset;\n    var err = new XTScopeParserError(\"Scope parser compilation failed\");\n    err.properties = {\n        id: \"scopeparser_compilation_failed\",\n        offset: offset,\n        xtag: tag,\n        explanation: 'The scope parser for the tag \"'.concat(tag, '\" failed to compile'),\n        rootError: rootError\n    };\n    return err;\n}\nfunction getScopeParserExecutionError(_ref5) {\n    var tag = _ref5.tag, scope = _ref5.scope, error = _ref5.error, offset = _ref5.offset;\n    var err = new XTScopeParserError(\"Scope parser execution failed\");\n    err.properties = {\n        id: \"scopeparser_execution_failed\",\n        explanation: \"The scope parser for the tag \".concat(tag, \" failed to execute\"),\n        scope: scope,\n        offset: offset,\n        xtag: tag,\n        rootError: error\n    };\n    return err;\n}\nfunction getLoopPositionProducesInvalidXMLError(_ref6) {\n    var tag = _ref6.tag, offset = _ref6.offset;\n    var err = new XTTemplateError('The position of the loop tags \"'.concat(tag, '\" would produce invalid XML'));\n    err.properties = {\n        xtag: tag,\n        id: \"loop_position_invalid\",\n        explanation: 'The tags \"'.concat(tag, '\" are misplaced in the document, for example one of them is in a table and the other one outside the table'),\n        offset: offset\n    };\n    return err;\n}\nfunction throwUnimplementedTagType(part, index) {\n    var errorMsg = 'Unimplemented tag type \"'.concat(part.type, '\"');\n    if (part.module) {\n        errorMsg += ' \"'.concat(part.module, '\"');\n    }\n    var err = new XTTemplateError(errorMsg);\n    err.properties = {\n        part: part,\n        index: index,\n        id: \"unimplemented_tag_type\"\n    };\n    throw err;\n}\nfunction throwMalformedXml() {\n    var err = new XTInternalError(\"Malformed xml\");\n    err.properties = {\n        explanation: \"The template contains malformed xml\",\n        id: \"malformed_xml\"\n    };\n    throw err;\n}\nfunction throwResolveBeforeCompile() {\n    var err = new XTInternalError(\"You must run `.compile()` before running `.resolveData()`\");\n    err.properties = {\n        id: \"resolve_before_compile\",\n        explanation: \"You must run `.compile()` before running `.resolveData()`\"\n    };\n    throw err;\n}\nfunction throwRenderInvalidTemplate() {\n    var err = new XTInternalError(\"You should not call .render on a document that had compilation errors\");\n    err.properties = {\n        id: \"render_on_invalid_template\",\n        explanation: \"You should not call .render on a document that had compilation errors\"\n    };\n    throw err;\n}\nfunction throwRenderTwice() {\n    var err = new XTInternalError(\"You should not call .render twice on the same docxtemplater instance\");\n    err.properties = {\n        id: \"render_twice\",\n        explanation: \"You should not call .render twice on the same docxtemplater instance\"\n    };\n    throw err;\n}\nfunction throwFileTypeNotIdentified(zip) {\n    var files = Object.keys(zip.files).slice(0, 10);\n    var msg = \"\";\n    if (files.length === 0) {\n        msg = \"Empty zip file\";\n    } else {\n        msg = \"Zip file contains : \".concat(files.join(\",\"));\n    }\n    var err = new XTInternalError(\"The filetype for this file could not be identified, is this file corrupted ? \".concat(msg));\n    err.properties = {\n        id: \"filetype_not_identified\",\n        explanation: \"The filetype for this file could not be identified, is this file corrupted ? \".concat(msg)\n    };\n    throw err;\n}\nfunction throwXmlInvalid(content, offset) {\n    var err = new XTTemplateError(\"An XML file has invalid xml\");\n    err.properties = {\n        id: \"file_has_invalid_xml\",\n        content: content,\n        offset: offset,\n        explanation: \"The docx contains invalid XML, it is most likely corrupt\"\n    };\n    throw err;\n}\nfunction throwFileTypeNotHandled(fileType) {\n    var err = new XTInternalError('The filetype \"'.concat(fileType, '\" is not handled by docxtemplater'));\n    err.properties = {\n        id: \"filetype_not_handled\",\n        explanation: 'The file you are trying to generate is of type \"'.concat(fileType, '\", but only docx and pptx formats are handled'),\n        fileType: fileType\n    };\n    throw err;\n}\nmodule.exports = {\n    XTError: XTError,\n    XTTemplateError: XTTemplateError,\n    XTInternalError: XTInternalError,\n    XTScopeParserError: XTScopeParserError,\n    XTAPIVersionError: XTAPIVersionError,\n    // Remove this alias in v4\n    RenderingError: XTRenderingError,\n    XTRenderingError: XTRenderingError,\n    getClosingTagNotMatchOpeningTag: getClosingTagNotMatchOpeningTag,\n    getLoopPositionProducesInvalidXMLError: getLoopPositionProducesInvalidXMLError,\n    getScopeCompilationError: getScopeCompilationError,\n    getScopeParserExecutionError: getScopeParserExecutionError,\n    getUnclosedTagException: getUnclosedTagException,\n    getUnopenedTagException: getUnopenedTagException,\n    getUnmatchedLoopException: getUnmatchedLoopException,\n    getDuplicateCloseTagException: getDuplicateCloseTagException,\n    getDuplicateOpenTagException: getDuplicateOpenTagException,\n    getCorruptCharactersException: getCorruptCharactersException,\n    getInvalidRawXMLValueException: getInvalidRawXMLValueException,\n    getUnbalancedLoopException: getUnbalancedLoopException,\n    throwApiVersionError: throwApiVersionError,\n    throwFileTypeNotHandled: throwFileTypeNotHandled,\n    throwFileTypeNotIdentified: throwFileTypeNotIdentified,\n    throwMalformedXml: throwMalformedXml,\n    throwMultiError: throwMultiError,\n    throwExpandNotFound: throwExpandNotFound,\n    throwRawTagShouldBeOnlyTextInParagraph: throwRawTagShouldBeOnlyTextInParagraph,\n    throwUnimplementedTagType: throwUnimplementedTagType,\n    throwXmlTagNotFound: throwXmlTagNotFound,\n    throwXmlInvalid: throwXmlInvalid,\n    throwResolveBeforeCompile: throwResolveBeforeCompile,\n    throwRenderInvalidTemplate: throwRenderInvalidTemplate,\n    throwRenderTwice: throwRenderTwice\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/docxtemplater/js/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/docxtemplater/js/file-type-config.js":
/*!***********************************************************!*\
  !*** ./node_modules/docxtemplater/js/file-type-config.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar loopModule = __webpack_require__(/*! ./modules/loop.js */ \"(ssr)/./node_modules/docxtemplater/js/modules/loop.js\");\nvar spacePreserveModule = __webpack_require__(/*! ./modules/space-preserve.js */ \"(ssr)/./node_modules/docxtemplater/js/modules/space-preserve.js\");\nvar rawXmlModule = __webpack_require__(/*! ./modules/rawxml.js */ \"(ssr)/./node_modules/docxtemplater/js/modules/rawxml.js\");\nvar expandPairTrait = __webpack_require__(/*! ./modules/expand-pair-trait.js */ \"(ssr)/./node_modules/docxtemplater/js/modules/expand-pair-trait.js\");\nvar render = __webpack_require__(/*! ./modules/render.js */ \"(ssr)/./node_modules/docxtemplater/js/modules/render.js\");\nfunction DocXFileTypeConfig() {\n    return {\n        getTemplatedFiles: function getTemplatedFiles() {\n            return [];\n        },\n        textPath: function textPath(doc) {\n            return doc.textTarget;\n        },\n        tagsXmlTextArray: [\n            \"Company\",\n            \"HyperlinkBase\",\n            \"Manager\",\n            \"cp:category\",\n            \"cp:keywords\",\n            \"dc:creator\",\n            \"dc:description\",\n            \"dc:subject\",\n            \"dc:title\",\n            \"cp:contentStatus\",\n            \"w:t\",\n            \"m:t\",\n            \"vt:lpstr\",\n            \"vt:lpwstr\"\n        ],\n        tagsXmlLexedArray: [\n            \"w:proofState\",\n            \"w:tc\",\n            \"w:tr\",\n            \"w:tbl\",\n            \"w:body\",\n            \"w:document\",\n            \"w:p\",\n            \"w:r\",\n            \"w:br\",\n            \"w:rPr\",\n            \"w:pPr\",\n            \"w:spacing\",\n            \"w:sdtContent\",\n            \"w:sdt\",\n            \"w:drawing\",\n            \"w:sectPr\",\n            \"w:type\",\n            \"w:headerReference\",\n            \"w:footerReference\",\n            \"w:bookmarkStart\",\n            \"w:bookmarkEnd\",\n            \"w:commentRangeStart\",\n            \"w:commentRangeEnd\",\n            \"w:commentReference\"\n        ],\n        droppedTagsInsidePlaceholder: [\n            \"w:p\",\n            \"w:br\",\n            \"w:bookmarkStart\",\n            \"w:bookmarkEnd\"\n        ],\n        expandTags: [\n            {\n                contains: \"w:tc\",\n                expand: \"w:tr\"\n            }\n        ],\n        onParagraphLoop: [\n            {\n                contains: \"w:p\",\n                expand: \"w:p\",\n                onlyTextInTag: true\n            }\n        ],\n        tagRawXml: \"w:p\",\n        baseModules: [\n            loopModule,\n            spacePreserveModule,\n            expandPairTrait,\n            rawXmlModule,\n            render\n        ],\n        tagShouldContain: [\n            {\n                tag: \"w:tbl\",\n                shouldContain: [\n                    \"w:tr\"\n                ],\n                drop: true\n            },\n            {\n                tag: \"w:tc\",\n                shouldContain: [\n                    \"w:p\"\n                ],\n                value: \"<w:p></w:p>\"\n            },\n            {\n                tag: \"w:sdtContent\",\n                shouldContain: [\n                    \"w:p\",\n                    \"w:r\",\n                    \"w:commentRangeStart\",\n                    \"w:sdt\"\n                ],\n                value: \"<w:p></w:p>\"\n            }\n        ]\n    };\n}\nfunction PptXFileTypeConfig() {\n    return {\n        getTemplatedFiles: function getTemplatedFiles() {\n            return [];\n        },\n        textPath: function textPath(doc) {\n            return doc.textTarget;\n        },\n        tagsXmlTextArray: [\n            \"Company\",\n            \"HyperlinkBase\",\n            \"Manager\",\n            \"cp:category\",\n            \"cp:keywords\",\n            \"dc:creator\",\n            \"dc:description\",\n            \"dc:subject\",\n            \"dc:title\",\n            \"a:t\",\n            \"m:t\",\n            \"vt:lpstr\",\n            \"vt:lpwstr\"\n        ],\n        tagsXmlLexedArray: [\n            \"p:sp\",\n            \"a:tc\",\n            \"a:tr\",\n            \"a:tbl\",\n            \"a:graphicData\",\n            \"a:p\",\n            \"a:r\",\n            \"a:rPr\",\n            \"p:txBody\",\n            \"a:txBody\",\n            \"a:off\",\n            \"a:ext\",\n            \"p:graphicFrame\",\n            \"p:xfrm\",\n            \"a16:rowId\",\n            \"a:endParaRPr\"\n        ],\n        droppedTagsInsidePlaceholder: [\n            \"a:p\",\n            \"a:endParaRPr\"\n        ],\n        expandTags: [\n            {\n                contains: \"a:tc\",\n                expand: \"a:tr\"\n            }\n        ],\n        onParagraphLoop: [\n            {\n                contains: \"a:p\",\n                expand: \"a:p\",\n                onlyTextInTag: true\n            }\n        ],\n        tagRawXml: \"p:sp\",\n        baseModules: [\n            loopModule,\n            expandPairTrait,\n            rawXmlModule,\n            render\n        ],\n        tagShouldContain: [\n            {\n                tag: \"a:tbl\",\n                shouldContain: [\n                    \"a:tr\"\n                ],\n                dropParent: \"p:graphicFrame\"\n            },\n            {\n                tag: \"p:txBody\",\n                shouldContain: [\n                    \"a:p\"\n                ],\n                value: \"<a:p></a:p>\"\n            },\n            {\n                tag: \"a:txBody\",\n                shouldContain: [\n                    \"a:p\"\n                ],\n                value: \"<a:p></a:p>\"\n            }\n        ]\n    };\n}\nmodule.exports = {\n    docx: DocXFileTypeConfig,\n    pptx: PptXFileTypeConfig\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZG9jeHRlbXBsYXRlci9qcy9maWxlLXR5cGUtY29uZmlnLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWIsSUFBSUEsYUFBYUMsbUJBQU9BLENBQUMsZ0ZBQW1CO0FBQzVDLElBQUlDLHNCQUFzQkQsbUJBQU9BLENBQUMsb0dBQTZCO0FBQy9ELElBQUlFLGVBQWVGLG1CQUFPQSxDQUFDLG9GQUFxQjtBQUNoRCxJQUFJRyxrQkFBa0JILG1CQUFPQSxDQUFDLDBHQUFnQztBQUM5RCxJQUFJSSxTQUFTSixtQkFBT0EsQ0FBQyxvRkFBcUI7QUFDMUMsU0FBU0s7SUFDUCxPQUFPO1FBQ0xDLG1CQUFtQixTQUFTQTtZQUMxQixPQUFPLEVBQUU7UUFDWDtRQUNBQyxVQUFVLFNBQVNBLFNBQVNDLEdBQUc7WUFDN0IsT0FBT0EsSUFBSUMsVUFBVTtRQUN2QjtRQUNBQyxrQkFBa0I7WUFBQztZQUFXO1lBQWlCO1lBQVc7WUFBZTtZQUFlO1lBQWM7WUFBa0I7WUFBYztZQUFZO1lBQW9CO1lBQU87WUFBTztZQUFZO1NBQVk7UUFDNU1DLG1CQUFtQjtZQUFDO1lBQWdCO1lBQVE7WUFBUTtZQUFTO1lBQVU7WUFBYztZQUFPO1lBQU87WUFBUTtZQUFTO1lBQVM7WUFBYTtZQUFnQjtZQUFTO1lBQWE7WUFBWTtZQUFVO1lBQXFCO1lBQXFCO1lBQW1CO1lBQWlCO1lBQXVCO1lBQXFCO1NBQXFCO1FBQ3JWQyw4QkFBOEI7WUFBQztZQUFPO1lBQVE7WUFBbUI7U0FBZ0I7UUFDakZDLFlBQVk7WUFBQztnQkFDWEMsVUFBVTtnQkFDVkMsUUFBUTtZQUNWO1NBQUU7UUFDRkMsaUJBQWlCO1lBQUM7Z0JBQ2hCRixVQUFVO2dCQUNWQyxRQUFRO2dCQUNSRSxlQUFlO1lBQ2pCO1NBQUU7UUFDRkMsV0FBVztRQUNYQyxhQUFhO1lBQUNwQjtZQUFZRTtZQUFxQkU7WUFBaUJEO1lBQWNFO1NBQU87UUFDckZnQixrQkFBa0I7WUFBQztnQkFDakJDLEtBQUs7Z0JBQ0xDLGVBQWU7b0JBQUM7aUJBQU87Z0JBQ3ZCQyxNQUFNO1lBQ1I7WUFBRztnQkFDREYsS0FBSztnQkFDTEMsZUFBZTtvQkFBQztpQkFBTTtnQkFDdEJFLE9BQU87WUFDVDtZQUFHO2dCQUNESCxLQUFLO2dCQUNMQyxlQUFlO29CQUFDO29CQUFPO29CQUFPO29CQUF1QjtpQkFBUTtnQkFDN0RFLE9BQU87WUFDVDtTQUFFO0lBQ0o7QUFDRjtBQUNBLFNBQVNDO0lBQ1AsT0FBTztRQUNMbkIsbUJBQW1CLFNBQVNBO1lBQzFCLE9BQU8sRUFBRTtRQUNYO1FBQ0FDLFVBQVUsU0FBU0EsU0FBU0MsR0FBRztZQUM3QixPQUFPQSxJQUFJQyxVQUFVO1FBQ3ZCO1FBQ0FDLGtCQUFrQjtZQUFDO1lBQVc7WUFBaUI7WUFBVztZQUFlO1lBQWU7WUFBYztZQUFrQjtZQUFjO1lBQVk7WUFBTztZQUFPO1lBQVk7U0FBWTtRQUN4TEMsbUJBQW1CO1lBQUM7WUFBUTtZQUFRO1lBQVE7WUFBUztZQUFpQjtZQUFPO1lBQU87WUFBUztZQUFZO1lBQVk7WUFBUztZQUFTO1lBQWtCO1lBQVU7WUFBYTtTQUFlO1FBQy9MQyw4QkFBOEI7WUFBQztZQUFPO1NBQWU7UUFDckRDLFlBQVk7WUFBQztnQkFDWEMsVUFBVTtnQkFDVkMsUUFBUTtZQUNWO1NBQUU7UUFDRkMsaUJBQWlCO1lBQUM7Z0JBQ2hCRixVQUFVO2dCQUNWQyxRQUFRO2dCQUNSRSxlQUFlO1lBQ2pCO1NBQUU7UUFDRkMsV0FBVztRQUNYQyxhQUFhO1lBQUNwQjtZQUFZSTtZQUFpQkQ7WUFBY0U7U0FBTztRQUNoRWdCLGtCQUFrQjtZQUFDO2dCQUNqQkMsS0FBSztnQkFDTEMsZUFBZTtvQkFBQztpQkFBTztnQkFDdkJJLFlBQVk7WUFDZDtZQUFHO2dCQUNETCxLQUFLO2dCQUNMQyxlQUFlO29CQUFDO2lCQUFNO2dCQUN0QkUsT0FBTztZQUNUO1lBQUc7Z0JBQ0RILEtBQUs7Z0JBQ0xDLGVBQWU7b0JBQUM7aUJBQU07Z0JBQ3RCRSxPQUFPO1lBQ1Q7U0FBRTtJQUNKO0FBQ0Y7QUFDQUcsT0FBT0MsT0FBTyxHQUFHO0lBQ2ZDLE1BQU14QjtJQUNOeUIsTUFBTUw7QUFDUiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZC1wbGFubmVyLWZyb250LWVuZC8uL25vZGVfbW9kdWxlcy9kb2N4dGVtcGxhdGVyL2pzL2ZpbGUtdHlwZS1jb25maWcuanM/NDFmNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIGxvb3BNb2R1bGUgPSByZXF1aXJlKFwiLi9tb2R1bGVzL2xvb3AuanNcIik7XG52YXIgc3BhY2VQcmVzZXJ2ZU1vZHVsZSA9IHJlcXVpcmUoXCIuL21vZHVsZXMvc3BhY2UtcHJlc2VydmUuanNcIik7XG52YXIgcmF3WG1sTW9kdWxlID0gcmVxdWlyZShcIi4vbW9kdWxlcy9yYXd4bWwuanNcIik7XG52YXIgZXhwYW5kUGFpclRyYWl0ID0gcmVxdWlyZShcIi4vbW9kdWxlcy9leHBhbmQtcGFpci10cmFpdC5qc1wiKTtcbnZhciByZW5kZXIgPSByZXF1aXJlKFwiLi9tb2R1bGVzL3JlbmRlci5qc1wiKTtcbmZ1bmN0aW9uIERvY1hGaWxlVHlwZUNvbmZpZygpIHtcbiAgcmV0dXJuIHtcbiAgICBnZXRUZW1wbGF0ZWRGaWxlczogZnVuY3Rpb24gZ2V0VGVtcGxhdGVkRmlsZXMoKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfSxcbiAgICB0ZXh0UGF0aDogZnVuY3Rpb24gdGV4dFBhdGgoZG9jKSB7XG4gICAgICByZXR1cm4gZG9jLnRleHRUYXJnZXQ7XG4gICAgfSxcbiAgICB0YWdzWG1sVGV4dEFycmF5OiBbXCJDb21wYW55XCIsIFwiSHlwZXJsaW5rQmFzZVwiLCBcIk1hbmFnZXJcIiwgXCJjcDpjYXRlZ29yeVwiLCBcImNwOmtleXdvcmRzXCIsIFwiZGM6Y3JlYXRvclwiLCBcImRjOmRlc2NyaXB0aW9uXCIsIFwiZGM6c3ViamVjdFwiLCBcImRjOnRpdGxlXCIsIFwiY3A6Y29udGVudFN0YXR1c1wiLCBcInc6dFwiLCBcIm06dFwiLCBcInZ0Omxwc3RyXCIsIFwidnQ6bHB3c3RyXCJdLFxuICAgIHRhZ3NYbWxMZXhlZEFycmF5OiBbXCJ3OnByb29mU3RhdGVcIiwgXCJ3OnRjXCIsIFwidzp0clwiLCBcInc6dGJsXCIsIFwidzpib2R5XCIsIFwidzpkb2N1bWVudFwiLCBcInc6cFwiLCBcInc6clwiLCBcInc6YnJcIiwgXCJ3OnJQclwiLCBcInc6cFByXCIsIFwidzpzcGFjaW5nXCIsIFwidzpzZHRDb250ZW50XCIsIFwidzpzZHRcIiwgXCJ3OmRyYXdpbmdcIiwgXCJ3OnNlY3RQclwiLCBcInc6dHlwZVwiLCBcInc6aGVhZGVyUmVmZXJlbmNlXCIsIFwidzpmb290ZXJSZWZlcmVuY2VcIiwgXCJ3OmJvb2ttYXJrU3RhcnRcIiwgXCJ3OmJvb2ttYXJrRW5kXCIsIFwidzpjb21tZW50UmFuZ2VTdGFydFwiLCBcInc6Y29tbWVudFJhbmdlRW5kXCIsIFwidzpjb21tZW50UmVmZXJlbmNlXCJdLFxuICAgIGRyb3BwZWRUYWdzSW5zaWRlUGxhY2Vob2xkZXI6IFtcInc6cFwiLCBcInc6YnJcIiwgXCJ3OmJvb2ttYXJrU3RhcnRcIiwgXCJ3OmJvb2ttYXJrRW5kXCJdLFxuICAgIGV4cGFuZFRhZ3M6IFt7XG4gICAgICBjb250YWluczogXCJ3OnRjXCIsXG4gICAgICBleHBhbmQ6IFwidzp0clwiXG4gICAgfV0sXG4gICAgb25QYXJhZ3JhcGhMb29wOiBbe1xuICAgICAgY29udGFpbnM6IFwidzpwXCIsXG4gICAgICBleHBhbmQ6IFwidzpwXCIsXG4gICAgICBvbmx5VGV4dEluVGFnOiB0cnVlXG4gICAgfV0sXG4gICAgdGFnUmF3WG1sOiBcInc6cFwiLFxuICAgIGJhc2VNb2R1bGVzOiBbbG9vcE1vZHVsZSwgc3BhY2VQcmVzZXJ2ZU1vZHVsZSwgZXhwYW5kUGFpclRyYWl0LCByYXdYbWxNb2R1bGUsIHJlbmRlcl0sXG4gICAgdGFnU2hvdWxkQ29udGFpbjogW3tcbiAgICAgIHRhZzogXCJ3OnRibFwiLFxuICAgICAgc2hvdWxkQ29udGFpbjogW1widzp0clwiXSxcbiAgICAgIGRyb3A6IHRydWVcbiAgICB9LCB7XG4gICAgICB0YWc6IFwidzp0Y1wiLFxuICAgICAgc2hvdWxkQ29udGFpbjogW1widzpwXCJdLFxuICAgICAgdmFsdWU6IFwiPHc6cD48L3c6cD5cIlxuICAgIH0sIHtcbiAgICAgIHRhZzogXCJ3OnNkdENvbnRlbnRcIixcbiAgICAgIHNob3VsZENvbnRhaW46IFtcInc6cFwiLCBcInc6clwiLCBcInc6Y29tbWVudFJhbmdlU3RhcnRcIiwgXCJ3OnNkdFwiXSxcbiAgICAgIHZhbHVlOiBcIjx3OnA+PC93OnA+XCJcbiAgICB9XVxuICB9O1xufVxuZnVuY3Rpb24gUHB0WEZpbGVUeXBlQ29uZmlnKCkge1xuICByZXR1cm4ge1xuICAgIGdldFRlbXBsYXRlZEZpbGVzOiBmdW5jdGlvbiBnZXRUZW1wbGF0ZWRGaWxlcygpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9LFxuICAgIHRleHRQYXRoOiBmdW5jdGlvbiB0ZXh0UGF0aChkb2MpIHtcbiAgICAgIHJldHVybiBkb2MudGV4dFRhcmdldDtcbiAgICB9LFxuICAgIHRhZ3NYbWxUZXh0QXJyYXk6IFtcIkNvbXBhbnlcIiwgXCJIeXBlcmxpbmtCYXNlXCIsIFwiTWFuYWdlclwiLCBcImNwOmNhdGVnb3J5XCIsIFwiY3A6a2V5d29yZHNcIiwgXCJkYzpjcmVhdG9yXCIsIFwiZGM6ZGVzY3JpcHRpb25cIiwgXCJkYzpzdWJqZWN0XCIsIFwiZGM6dGl0bGVcIiwgXCJhOnRcIiwgXCJtOnRcIiwgXCJ2dDpscHN0clwiLCBcInZ0Omxwd3N0clwiXSxcbiAgICB0YWdzWG1sTGV4ZWRBcnJheTogW1wicDpzcFwiLCBcImE6dGNcIiwgXCJhOnRyXCIsIFwiYTp0YmxcIiwgXCJhOmdyYXBoaWNEYXRhXCIsIFwiYTpwXCIsIFwiYTpyXCIsIFwiYTpyUHJcIiwgXCJwOnR4Qm9keVwiLCBcImE6dHhCb2R5XCIsIFwiYTpvZmZcIiwgXCJhOmV4dFwiLCBcInA6Z3JhcGhpY0ZyYW1lXCIsIFwicDp4ZnJtXCIsIFwiYTE2OnJvd0lkXCIsIFwiYTplbmRQYXJhUlByXCJdLFxuICAgIGRyb3BwZWRUYWdzSW5zaWRlUGxhY2Vob2xkZXI6IFtcImE6cFwiLCBcImE6ZW5kUGFyYVJQclwiXSxcbiAgICBleHBhbmRUYWdzOiBbe1xuICAgICAgY29udGFpbnM6IFwiYTp0Y1wiLFxuICAgICAgZXhwYW5kOiBcImE6dHJcIlxuICAgIH1dLFxuICAgIG9uUGFyYWdyYXBoTG9vcDogW3tcbiAgICAgIGNvbnRhaW5zOiBcImE6cFwiLFxuICAgICAgZXhwYW5kOiBcImE6cFwiLFxuICAgICAgb25seVRleHRJblRhZzogdHJ1ZVxuICAgIH1dLFxuICAgIHRhZ1Jhd1htbDogXCJwOnNwXCIsXG4gICAgYmFzZU1vZHVsZXM6IFtsb29wTW9kdWxlLCBleHBhbmRQYWlyVHJhaXQsIHJhd1htbE1vZHVsZSwgcmVuZGVyXSxcbiAgICB0YWdTaG91bGRDb250YWluOiBbe1xuICAgICAgdGFnOiBcImE6dGJsXCIsXG4gICAgICBzaG91bGRDb250YWluOiBbXCJhOnRyXCJdLFxuICAgICAgZHJvcFBhcmVudDogXCJwOmdyYXBoaWNGcmFtZVwiXG4gICAgfSwge1xuICAgICAgdGFnOiBcInA6dHhCb2R5XCIsXG4gICAgICBzaG91bGRDb250YWluOiBbXCJhOnBcIl0sXG4gICAgICB2YWx1ZTogXCI8YTpwPjwvYTpwPlwiXG4gICAgfSwge1xuICAgICAgdGFnOiBcImE6dHhCb2R5XCIsXG4gICAgICBzaG91bGRDb250YWluOiBbXCJhOnBcIl0sXG4gICAgICB2YWx1ZTogXCI8YTpwPjwvYTpwPlwiXG4gICAgfV1cbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0ge1xuICBkb2N4OiBEb2NYRmlsZVR5cGVDb25maWcsXG4gIHBwdHg6IFBwdFhGaWxlVHlwZUNvbmZpZ1xufTsiXSwibmFtZXMiOlsibG9vcE1vZHVsZSIsInJlcXVpcmUiLCJzcGFjZVByZXNlcnZlTW9kdWxlIiwicmF3WG1sTW9kdWxlIiwiZXhwYW5kUGFpclRyYWl0IiwicmVuZGVyIiwiRG9jWEZpbGVUeXBlQ29uZmlnIiwiZ2V0VGVtcGxhdGVkRmlsZXMiLCJ0ZXh0UGF0aCIsImRvYyIsInRleHRUYXJnZXQiLCJ0YWdzWG1sVGV4dEFycmF5IiwidGFnc1htbExleGVkQXJyYXkiLCJkcm9wcGVkVGFnc0luc2lkZVBsYWNlaG9sZGVyIiwiZXhwYW5kVGFncyIsImNvbnRhaW5zIiwiZXhwYW5kIiwib25QYXJhZ3JhcGhMb29wIiwib25seVRleHRJblRhZyIsInRhZ1Jhd1htbCIsImJhc2VNb2R1bGVzIiwidGFnU2hvdWxkQ29udGFpbiIsInRhZyIsInNob3VsZENvbnRhaW4iLCJkcm9wIiwidmFsdWUiLCJQcHRYRmlsZVR5cGVDb25maWciLCJkcm9wUGFyZW50IiwibW9kdWxlIiwiZXhwb3J0cyIsImRvY3giLCJwcHR4Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/docxtemplater/js/file-type-config.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/docxtemplater/js/filetypes.js":
/*!****************************************************!*\
  !*** ./node_modules/docxtemplater/js/filetypes.js ***!
  \****************************************************/
/***/ ((module) => {

eval("\nvar docxContentType = \"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml\";\nvar docxmContentType = \"application/vnd.ms-word.document.macroEnabled.main+xml\";\nvar dotxContentType = \"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml\";\nvar dotmContentType = \"application/vnd.ms-word.template.macroEnabledTemplate.main+xml\";\nvar headerContentType = \"application/vnd.openxmlformats-officedocument.wordprocessingml.header+xml\";\nvar footnotesContentType = \"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml\";\nvar commentsContentType = \"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml\";\nvar footerContentType = \"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml\";\nvar pptxContentType = \"application/vnd.openxmlformats-officedocument.presentationml.slide+xml\";\nvar pptxSlideMaster = \"application/vnd.openxmlformats-officedocument.presentationml.slideMaster+xml\";\nvar pptxSlideLayout = \"application/vnd.openxmlformats-officedocument.presentationml.slideLayout+xml\";\nvar pptxPresentationContentType = \"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml\";\nvar main = [\n    docxContentType,\n    docxmContentType,\n    dotxContentType,\n    dotmContentType\n];\nvar filetypes = {\n    main: main,\n    docx: [\n        headerContentType\n    ].concat(main, [\n        footerContentType,\n        footnotesContentType,\n        commentsContentType\n    ]),\n    pptx: [\n        pptxContentType,\n        pptxSlideMaster,\n        pptxSlideLayout,\n        pptxPresentationContentType\n    ]\n};\nmodule.exports = filetypes;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZG9jeHRlbXBsYXRlci9qcy9maWxldHlwZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYixJQUFJQSxrQkFBa0I7QUFDdEIsSUFBSUMsbUJBQW1CO0FBQ3ZCLElBQUlDLGtCQUFrQjtBQUN0QixJQUFJQyxrQkFBa0I7QUFDdEIsSUFBSUMsb0JBQW9CO0FBQ3hCLElBQUlDLHVCQUF1QjtBQUMzQixJQUFJQyxzQkFBc0I7QUFDMUIsSUFBSUMsb0JBQW9CO0FBQ3hCLElBQUlDLGtCQUFrQjtBQUN0QixJQUFJQyxrQkFBa0I7QUFDdEIsSUFBSUMsa0JBQWtCO0FBQ3RCLElBQUlDLDhCQUE4QjtBQUNsQyxJQUFJQyxPQUFPO0lBQUNaO0lBQWlCQztJQUFrQkM7SUFBaUJDO0NBQWdCO0FBQ2hGLElBQUlVLFlBQVk7SUFDZEQsTUFBTUE7SUFDTkUsTUFBTTtRQUFDVjtLQUFrQixDQUFDVyxNQUFNLENBQUNILE1BQU07UUFBQ0w7UUFBbUJGO1FBQXNCQztLQUFvQjtJQUNyR1UsTUFBTTtRQUFDUjtRQUFpQkM7UUFBaUJDO1FBQWlCQztLQUE0QjtBQUN4RjtBQUNBTSxPQUFPQyxPQUFPLEdBQUdMIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVkLXBsYW5uZXItZnJvbnQtZW5kLy4vbm9kZV9tb2R1bGVzL2RvY3h0ZW1wbGF0ZXIvanMvZmlsZXR5cGVzLmpzPzc1YzYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBkb2N4Q29udGVudFR5cGUgPSBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC53b3JkcHJvY2Vzc2luZ21sLmRvY3VtZW50Lm1haW4reG1sXCI7XG52YXIgZG9jeG1Db250ZW50VHlwZSA9IFwiYXBwbGljYXRpb24vdm5kLm1zLXdvcmQuZG9jdW1lbnQubWFjcm9FbmFibGVkLm1haW4reG1sXCI7XG52YXIgZG90eENvbnRlbnRUeXBlID0gXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC50ZW1wbGF0ZS5tYWluK3htbFwiO1xudmFyIGRvdG1Db250ZW50VHlwZSA9IFwiYXBwbGljYXRpb24vdm5kLm1zLXdvcmQudGVtcGxhdGUubWFjcm9FbmFibGVkVGVtcGxhdGUubWFpbit4bWxcIjtcbnZhciBoZWFkZXJDb250ZW50VHlwZSA9IFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwuaGVhZGVyK3htbFwiO1xudmFyIGZvb3Rub3Rlc0NvbnRlbnRUeXBlID0gXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC5mb290bm90ZXMreG1sXCI7XG52YXIgY29tbWVudHNDb250ZW50VHlwZSA9IFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwuY29tbWVudHMreG1sXCI7XG52YXIgZm9vdGVyQ29udGVudFR5cGUgPSBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC53b3JkcHJvY2Vzc2luZ21sLmZvb3Rlcit4bWxcIjtcbnZhciBwcHR4Q29udGVudFR5cGUgPSBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5wcmVzZW50YXRpb25tbC5zbGlkZSt4bWxcIjtcbnZhciBwcHR4U2xpZGVNYXN0ZXIgPSBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5wcmVzZW50YXRpb25tbC5zbGlkZU1hc3Rlcit4bWxcIjtcbnZhciBwcHR4U2xpZGVMYXlvdXQgPSBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5wcmVzZW50YXRpb25tbC5zbGlkZUxheW91dCt4bWxcIjtcbnZhciBwcHR4UHJlc2VudGF0aW9uQ29udGVudFR5cGUgPSBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5wcmVzZW50YXRpb25tbC5wcmVzZW50YXRpb24ubWFpbit4bWxcIjtcbnZhciBtYWluID0gW2RvY3hDb250ZW50VHlwZSwgZG9jeG1Db250ZW50VHlwZSwgZG90eENvbnRlbnRUeXBlLCBkb3RtQ29udGVudFR5cGVdO1xudmFyIGZpbGV0eXBlcyA9IHtcbiAgbWFpbjogbWFpbixcbiAgZG9jeDogW2hlYWRlckNvbnRlbnRUeXBlXS5jb25jYXQobWFpbiwgW2Zvb3RlckNvbnRlbnRUeXBlLCBmb290bm90ZXNDb250ZW50VHlwZSwgY29tbWVudHNDb250ZW50VHlwZV0pLFxuICBwcHR4OiBbcHB0eENvbnRlbnRUeXBlLCBwcHR4U2xpZGVNYXN0ZXIsIHBwdHhTbGlkZUxheW91dCwgcHB0eFByZXNlbnRhdGlvbkNvbnRlbnRUeXBlXVxufTtcbm1vZHVsZS5leHBvcnRzID0gZmlsZXR5cGVzOyJdLCJuYW1lcyI6WyJkb2N4Q29udGVudFR5cGUiLCJkb2N4bUNvbnRlbnRUeXBlIiwiZG90eENvbnRlbnRUeXBlIiwiZG90bUNvbnRlbnRUeXBlIiwiaGVhZGVyQ29udGVudFR5cGUiLCJmb290bm90ZXNDb250ZW50VHlwZSIsImNvbW1lbnRzQ29udGVudFR5cGUiLCJmb290ZXJDb250ZW50VHlwZSIsInBwdHhDb250ZW50VHlwZSIsInBwdHhTbGlkZU1hc3RlciIsInBwdHhTbGlkZUxheW91dCIsInBwdHhQcmVzZW50YXRpb25Db250ZW50VHlwZSIsIm1haW4iLCJmaWxldHlwZXMiLCJkb2N4IiwiY29uY2F0IiwicHB0eCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/docxtemplater/js/filetypes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/docxtemplater/js/get-resolved-id.js":
/*!**********************************************************!*\
  !*** ./node_modules/docxtemplater/js/get-resolved-id.js ***!
  \**********************************************************/
/***/ ((module) => {

eval("\nfunction getResolvedId(part, options) {\n    if (part.lIndex == null) {\n        return null;\n    }\n    var path = options.scopeManager.scopePathItem;\n    if (part.parentPart) {\n        path = path.slice(0, path.length - 1);\n    }\n    var res = options.filePath + \"@\" + part.lIndex.toString() + \"-\" + path.join(\"-\");\n    return res;\n}\nmodule.exports = getResolvedId;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZG9jeHRlbXBsYXRlci9qcy9nZXQtcmVzb2x2ZWQtaWQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYixTQUFTQSxjQUFjQyxJQUFJLEVBQUVDLE9BQU87SUFDbEMsSUFBSUQsS0FBS0UsTUFBTSxJQUFJLE1BQU07UUFDdkIsT0FBTztJQUNUO0lBQ0EsSUFBSUMsT0FBT0YsUUFBUUcsWUFBWSxDQUFDQyxhQUFhO0lBQzdDLElBQUlMLEtBQUtNLFVBQVUsRUFBRTtRQUNuQkgsT0FBT0EsS0FBS0ksS0FBSyxDQUFDLEdBQUdKLEtBQUtLLE1BQU0sR0FBRztJQUNyQztJQUNBLElBQUlDLE1BQU1SLFFBQVFTLFFBQVEsR0FBRyxNQUFNVixLQUFLRSxNQUFNLENBQUNTLFFBQVEsS0FBSyxNQUFNUixLQUFLUyxJQUFJLENBQUM7SUFDNUUsT0FBT0g7QUFDVDtBQUNBSSxPQUFPQyxPQUFPLEdBQUdmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVkLXBsYW5uZXItZnJvbnQtZW5kLy4vbm9kZV9tb2R1bGVzL2RvY3h0ZW1wbGF0ZXIvanMvZ2V0LXJlc29sdmVkLWlkLmpzPzdmYjAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIGdldFJlc29sdmVkSWQocGFydCwgb3B0aW9ucykge1xuICBpZiAocGFydC5sSW5kZXggPT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHZhciBwYXRoID0gb3B0aW9ucy5zY29wZU1hbmFnZXIuc2NvcGVQYXRoSXRlbTtcbiAgaWYgKHBhcnQucGFyZW50UGFydCkge1xuICAgIHBhdGggPSBwYXRoLnNsaWNlKDAsIHBhdGgubGVuZ3RoIC0gMSk7XG4gIH1cbiAgdmFyIHJlcyA9IG9wdGlvbnMuZmlsZVBhdGggKyBcIkBcIiArIHBhcnQubEluZGV4LnRvU3RyaW5nKCkgKyBcIi1cIiArIHBhdGguam9pbihcIi1cIik7XG4gIHJldHVybiByZXM7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGdldFJlc29sdmVkSWQ7Il0sIm5hbWVzIjpbImdldFJlc29sdmVkSWQiLCJwYXJ0Iiwib3B0aW9ucyIsImxJbmRleCIsInBhdGgiLCJzY29wZU1hbmFnZXIiLCJzY29wZVBhdGhJdGVtIiwicGFyZW50UGFydCIsInNsaWNlIiwibGVuZ3RoIiwicmVzIiwiZmlsZVBhdGgiLCJ0b1N0cmluZyIsImpvaW4iLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/docxtemplater/js/get-resolved-id.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/docxtemplater/js/join-uncorrupt.js":
/*!*********************************************************!*\
  !*** ./node_modules/docxtemplater/js/join-uncorrupt.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar _require = __webpack_require__(/*! ./doc-utils.js */ \"(ssr)/./node_modules/docxtemplater/js/doc-utils.js\"), startsWith = _require.startsWith, endsWith = _require.endsWith, isStarting = _require.isStarting, isEnding = _require.isEnding, isWhiteSpace = _require.isWhiteSpace;\nvar filetypes = __webpack_require__(/*! ./filetypes.js */ \"(ssr)/./node_modules/docxtemplater/js/filetypes.js\");\nfunction addEmptyParagraphAfterTable(parts) {\n    var lastNonEmpty = \"\";\n    for(var i = 0, len = parts.length; i < len; i++){\n        var p = parts[i];\n        if (isWhiteSpace(p)) {\n            continue;\n        }\n        if (endsWith(lastNonEmpty, \"</w:tbl>\")) {\n            if (!startsWith(p, \"<w:p\") && !startsWith(p, \"<w:tbl\") && !startsWith(p, \"<w:sectPr\")) {\n                p = \"<w:p/>\".concat(p);\n            }\n        }\n        lastNonEmpty = p;\n        parts[i] = p;\n    }\n    return parts;\n}\n// eslint-disable-next-line complexity\nfunction joinUncorrupt(parts, options) {\n    var contains = options.fileTypeConfig.tagShouldContain || [];\n    /* Before doing this \"uncorruption\" method here, this was done with the\n   * `part.emptyValue` trick, however, there were some corruptions that were\n   * not handled, for example with a template like this :\n   *\n   * ------------------------------------------------\n   * | {-w:p falsy}My para{/falsy}   |              |\n   * | {-w:p falsy}My para{/falsy}   |              |\n   */ var collecting = \"\";\n    var currentlyCollecting = -1;\n    if (filetypes.docx.indexOf(options.contentType) !== -1) {\n        parts = addEmptyParagraphAfterTable(parts);\n    }\n    var startIndex = -1;\n    for(var i = 0, len = parts.length; i < len; i++){\n        var part = parts[i];\n        for(var j = 0, len2 = contains.length; j < len2; j++){\n            var _contains$j = contains[j], tag = _contains$j.tag, shouldContain = _contains$j.shouldContain, value = _contains$j.value, drop = _contains$j.drop, dropParent = _contains$j.dropParent;\n            if (currentlyCollecting === j) {\n                if (isEnding(part, tag)) {\n                    currentlyCollecting = -1;\n                    if (dropParent) {\n                        var start = void 0, end = void 0;\n                        for(var k = startIndex; k > 0; k--){\n                            if (isStarting(parts[k], dropParent)) {\n                                start = k;\n                                break;\n                            }\n                        }\n                        for(var _k = i; _k < parts.length; _k++){\n                            if (isEnding(parts[_k], dropParent)) {\n                                end = _k;\n                                break;\n                            }\n                        }\n                        for(var _k2 = start; _k2 <= end; _k2++){\n                            parts[_k2] = \"\";\n                        }\n                    } else if (drop) {\n                        for(var _k3 = startIndex; _k3 <= i; _k3++){\n                            parts[_k3] = \"\";\n                        }\n                    } else {\n                        for(var _k4 = startIndex; _k4 < i; _k4++){\n                            parts[_k4] = \"\";\n                        }\n                        parts[i] = collecting + value + part;\n                    }\n                    break;\n                }\n                collecting += part;\n                for(var _k5 = 0, len3 = shouldContain.length; _k5 < len3; _k5++){\n                    var sc = shouldContain[_k5];\n                    if (isStarting(part, sc)) {\n                        currentlyCollecting = -1;\n                        break;\n                    }\n                }\n                if (currentlyCollecting > -1) {\n                // parts[i] = \"\";\n                }\n                break;\n            }\n            if (currentlyCollecting === -1 && isStarting(part, tag) && // to verify that the part doesn't have multiple tags, such as <w:tc><w:p>\n            part.substr(1).indexOf(\"<\") === -1) {\n                // self-closing tag such as <w:t/>\n                if (part[part.length - 2] === \"/\") {\n                    parts[i] = \"\";\n                    break;\n                } else {\n                    startIndex = i;\n                    currentlyCollecting = j;\n                    collecting = part;\n                    break;\n                }\n            }\n        }\n    }\n    return parts;\n}\nmodule.exports = joinUncorrupt;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/docxtemplater/js/join-uncorrupt.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/docxtemplater/js/lexer.js":
/*!************************************************!*\
  !*** ./node_modules/docxtemplater/js/lexer.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nfunction _typeof(o) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o) {\n        return typeof o;\n    } : function(o) {\n        return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n}\nfunction _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _iterableToArrayLimit(r, l) {\n    var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n    if (null != t) {\n        var e, n, i, u, a = [], f = !0, o = !1;\n        try {\n            if (i = (t = t.call(r)).next, 0 === l) {\n                if (Object(t) !== t) return;\n                f = !1;\n            } else for(; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n        } catch (r) {\n            o = !0, n = r;\n        } finally{\n            try {\n                if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n            } finally{\n                if (o) throw n;\n            }\n        }\n        return a;\n    }\n}\nfunction _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction ownKeys(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n    if (\"object\" != _typeof(t) || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n        var i = e.call(t, r || \"default\");\n        if (\"object\" != _typeof(i)) return i;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n}\nvar _require = __webpack_require__(/*! ./errors.js */ \"(ssr)/./node_modules/docxtemplater/js/errors.js\"), getUnclosedTagException = _require.getUnclosedTagException, getUnopenedTagException = _require.getUnopenedTagException, getDuplicateOpenTagException = _require.getDuplicateOpenTagException, getDuplicateCloseTagException = _require.getDuplicateCloseTagException, throwMalformedXml = _require.throwMalformedXml, throwXmlInvalid = _require.throwXmlInvalid, XTTemplateError = _require.XTTemplateError;\nvar _require2 = __webpack_require__(/*! ./doc-utils.js */ \"(ssr)/./node_modules/docxtemplater/js/doc-utils.js\"), isTextStart = _require2.isTextStart, isTextEnd = _require2.isTextEnd, wordToUtf8 = _require2.wordToUtf8;\nvar DELIMITER_NONE = 0, DELIMITER_EQUAL = 1, DELIMITER_START = 2, DELIMITER_END = 3;\nfunction inRange(range, match) {\n    return range[0] <= match.offset && match.offset < range[1];\n}\nfunction updateInTextTag(part, inTextTag) {\n    if (isTextStart(part)) {\n        if (inTextTag) {\n            throwMalformedXml();\n        }\n        return true;\n    }\n    if (isTextEnd(part)) {\n        if (!inTextTag) {\n            throwMalformedXml();\n        }\n        return false;\n    }\n    return inTextTag;\n}\nfunction getTag(tag) {\n    var position = \"\";\n    var start = 1;\n    var end = tag.indexOf(\" \");\n    if (tag[tag.length - 2] === \"/\") {\n        position = \"selfclosing\";\n        if (end === -1) {\n            end = tag.length - 2;\n        }\n    } else if (tag[1] === \"/\") {\n        start = 2;\n        position = \"end\";\n        if (end === -1) {\n            end = tag.length - 1;\n        }\n    } else {\n        position = \"start\";\n        if (end === -1) {\n            end = tag.length - 1;\n        }\n    }\n    return {\n        tag: tag.slice(start, end),\n        position: position\n    };\n}\nfunction tagMatcher(content, textMatchArray, othersMatchArray) {\n    var cursor = 0;\n    var contentLength = content.length;\n    var allMatches = {};\n    for(var i = 0, len = textMatchArray.length; i < len; i++){\n        allMatches[textMatchArray[i]] = true;\n    }\n    for(var _i = 0, _len = othersMatchArray.length; _i < _len; _i++){\n        allMatches[othersMatchArray[_i]] = false;\n    }\n    var totalMatches = [];\n    while(cursor < contentLength){\n        cursor = content.indexOf(\"<\", cursor);\n        if (cursor === -1) {\n            break;\n        }\n        var offset = cursor;\n        var nextOpening = content.indexOf(\"<\", cursor + 1);\n        cursor = content.indexOf(\">\", cursor);\n        if (cursor === -1 || nextOpening !== -1 && cursor > nextOpening) {\n            throwXmlInvalid(content, offset);\n        }\n        var tagText = content.slice(offset, cursor + 1);\n        var _getTag = getTag(tagText), tag = _getTag.tag, position = _getTag.position;\n        var text = allMatches[tag];\n        if (text == null) {\n            continue;\n        }\n        totalMatches.push({\n            type: \"tag\",\n            position: position,\n            text: text,\n            offset: offset,\n            value: tagText,\n            tag: tag\n        });\n    }\n    return totalMatches;\n}\nfunction getDelimiterErrors(delimiterMatches, fullText, syntaxOptions) {\n    var errors = [];\n    var inDelimiter = false;\n    var lastDelimiterMatch = {\n        offset: 0\n    };\n    var xtag;\n    var delimiterWithErrors = delimiterMatches.reduce(function(delimiterAcc, currDelimiterMatch) {\n        var position = currDelimiterMatch.position;\n        var delimiterOffset = currDelimiterMatch.offset;\n        var lastDelimiterOffset = lastDelimiterMatch.offset;\n        var lastDelimiterLength = lastDelimiterMatch.length;\n        xtag = fullText.substr(lastDelimiterOffset, delimiterOffset - lastDelimiterOffset);\n        if (inDelimiter && position === \"start\") {\n            if (lastDelimiterOffset + lastDelimiterLength === delimiterOffset) {\n                xtag = fullText.substr(lastDelimiterOffset, delimiterOffset - lastDelimiterOffset + lastDelimiterLength + 4);\n                errors.push(getDuplicateOpenTagException({\n                    xtag: xtag,\n                    offset: lastDelimiterOffset\n                }));\n                lastDelimiterMatch = currDelimiterMatch;\n                delimiterAcc.push(_objectSpread(_objectSpread({}, currDelimiterMatch), {}, {\n                    error: true\n                }));\n                return delimiterAcc;\n            }\n            errors.push(getUnclosedTagException({\n                xtag: wordToUtf8(xtag),\n                offset: lastDelimiterOffset\n            }));\n            lastDelimiterMatch = currDelimiterMatch;\n            delimiterAcc.push(_objectSpread(_objectSpread({}, currDelimiterMatch), {}, {\n                error: true\n            }));\n            return delimiterAcc;\n        }\n        if (!inDelimiter && position === \"end\") {\n            if (syntaxOptions.allowUnopenedTag) {\n                return delimiterAcc;\n            }\n            if (lastDelimiterOffset + lastDelimiterLength === delimiterOffset) {\n                xtag = fullText.substr(lastDelimiterOffset - 4, delimiterOffset - lastDelimiterOffset + lastDelimiterLength + 4);\n                errors.push(getDuplicateCloseTagException({\n                    xtag: xtag,\n                    offset: lastDelimiterOffset\n                }));\n                lastDelimiterMatch = currDelimiterMatch;\n                delimiterAcc.push(_objectSpread(_objectSpread({}, currDelimiterMatch), {}, {\n                    error: true\n                }));\n                return delimiterAcc;\n            }\n            errors.push(getUnopenedTagException({\n                xtag: xtag,\n                offset: delimiterOffset\n            }));\n            lastDelimiterMatch = currDelimiterMatch;\n            delimiterAcc.push(_objectSpread(_objectSpread({}, currDelimiterMatch), {}, {\n                error: true\n            }));\n            return delimiterAcc;\n        }\n        inDelimiter = !inDelimiter;\n        lastDelimiterMatch = currDelimiterMatch;\n        delimiterAcc.push(currDelimiterMatch);\n        return delimiterAcc;\n    }, []);\n    if (inDelimiter) {\n        var lastDelimiterOffset = lastDelimiterMatch.offset;\n        xtag = fullText.substr(lastDelimiterOffset, fullText.length - lastDelimiterOffset);\n        errors.push(getUnclosedTagException({\n            xtag: wordToUtf8(xtag),\n            offset: lastDelimiterOffset\n        }));\n    }\n    return {\n        delimiterWithErrors: delimiterWithErrors,\n        errors: errors\n    };\n}\nfunction compareOffsets(startOffset, endOffset) {\n    if (startOffset === -1 && endOffset === -1) {\n        return DELIMITER_NONE;\n    }\n    if (startOffset === endOffset) {\n        return DELIMITER_EQUAL;\n    }\n    if (startOffset === -1 || endOffset === -1) {\n        return endOffset < startOffset ? DELIMITER_START : DELIMITER_END;\n    }\n    return startOffset < endOffset ? DELIMITER_START : DELIMITER_END;\n}\nfunction splitDelimiters(inside) {\n    var newDelimiters = inside.split(\" \");\n    if (newDelimiters.length !== 2) {\n        var err = new XTTemplateError(\"New Delimiters cannot be parsed\");\n        err.properties = {\n            id: \"change_delimiters_invalid\",\n            explanation: \"Cannot parser delimiters\"\n        };\n        throw err;\n    }\n    var _newDelimiters = _slicedToArray(newDelimiters, 2), start = _newDelimiters[0], end = _newDelimiters[1];\n    if (start.length === 0 || end.length === 0) {\n        var _err = new XTTemplateError(\"New Delimiters cannot be parsed\");\n        _err.properties = {\n            id: \"change_delimiters_invalid\",\n            explanation: \"Cannot parser delimiters\"\n        };\n        throw _err;\n    }\n    return [\n        start,\n        end\n    ];\n}\nfunction getAllDelimiterIndexes(fullText, delimiters) {\n    var indexes = [];\n    var start = delimiters.start, end = delimiters.end;\n    var offset = -1;\n    var insideTag = false;\n    while(true){\n        var startOffset = fullText.indexOf(start, offset + 1);\n        var endOffset = fullText.indexOf(end, offset + 1);\n        var position = null;\n        var len = void 0;\n        var compareResult = compareOffsets(startOffset, endOffset);\n        if (compareResult === DELIMITER_EQUAL) {\n            compareResult = insideTag ? DELIMITER_END : DELIMITER_START;\n        }\n        switch(compareResult){\n            case DELIMITER_NONE:\n                return indexes;\n            case DELIMITER_END:\n                insideTag = false;\n                offset = endOffset;\n                position = \"end\";\n                len = end.length;\n                break;\n            case DELIMITER_START:\n                insideTag = true;\n                offset = startOffset;\n                position = \"start\";\n                len = start.length;\n                break;\n        }\n        // if tag starts with =, such as {=[ ]=}\n        if (compareResult === DELIMITER_START && fullText[offset + start.length] === \"=\") {\n            indexes.push({\n                offset: startOffset,\n                position: \"start\",\n                length: start.length,\n                changedelimiter: true\n            });\n            var nextEqual = fullText.indexOf(\"=\", offset + start.length + 1);\n            var nextEndOffset = fullText.indexOf(end, nextEqual + 1);\n            indexes.push({\n                offset: nextEndOffset,\n                position: \"end\",\n                length: end.length,\n                changedelimiter: true\n            });\n            var _insideTag = fullText.substr(offset + start.length + 1, nextEqual - offset - start.length - 1);\n            var _splitDelimiters = splitDelimiters(_insideTag);\n            var _splitDelimiters2 = _slicedToArray(_splitDelimiters, 2);\n            start = _splitDelimiters2[0];\n            end = _splitDelimiters2[1];\n            offset = nextEndOffset;\n            continue;\n        }\n        indexes.push({\n            offset: offset,\n            position: position,\n            length: len\n        });\n    }\n}\nfunction parseDelimiters(innerContentParts, delimiters, syntaxOptions) {\n    var full = innerContentParts.map(function(p) {\n        return p.value;\n    }).join(\"\");\n    var delimiterMatches = getAllDelimiterIndexes(full, delimiters);\n    var offset = 0;\n    var ranges = innerContentParts.map(function(part) {\n        offset += part.value.length;\n        return {\n            offset: offset - part.value.length,\n            lIndex: part.lIndex\n        };\n    });\n    var _getDelimiterErrors = getDelimiterErrors(delimiterMatches, full, syntaxOptions), delimiterWithErrors = _getDelimiterErrors.delimiterWithErrors, errors = _getDelimiterErrors.errors;\n    var cutNext = 0;\n    var delimiterIndex = 0;\n    var parsed = ranges.map(function(p, i) {\n        var offset = p.offset;\n        var range = [\n            offset,\n            offset + innerContentParts[i].value.length\n        ];\n        var partContent = innerContentParts[i].value;\n        var delimitersInOffset = [];\n        while(delimiterIndex < delimiterWithErrors.length && inRange(range, delimiterWithErrors[delimiterIndex])){\n            delimitersInOffset.push(delimiterWithErrors[delimiterIndex]);\n            delimiterIndex++;\n        }\n        var parts = [];\n        var cursor = 0;\n        if (cutNext > 0) {\n            cursor = cutNext;\n            cutNext = 0;\n        }\n        delimitersInOffset.forEach(function(delimiterInOffset) {\n            var value = partContent.substr(cursor, delimiterInOffset.offset - offset - cursor);\n            if (delimiterInOffset.changedelimiter) {\n                if (delimiterInOffset.position === \"start\") {\n                    if (value.length > 0) {\n                        parts.push({\n                            type: \"content\",\n                            value: value\n                        });\n                    }\n                } else {\n                    cursor = delimiterInOffset.offset - offset + delimiterInOffset.length;\n                }\n                return;\n            }\n            if (value.length > 0) {\n                parts.push({\n                    type: \"content\",\n                    value: value\n                });\n                cursor += value.length;\n            }\n            var delimiterPart = {\n                type: \"delimiter\",\n                position: delimiterInOffset.position,\n                offset: cursor + offset\n            };\n            parts.push(delimiterPart);\n            cursor = delimiterInOffset.offset - offset + delimiterInOffset.length;\n        });\n        cutNext = cursor - partContent.length;\n        var value = partContent.substr(cursor);\n        if (value.length > 0) {\n            parts.push({\n                type: \"content\",\n                value: value\n            });\n        }\n        return parts;\n    }, this);\n    return {\n        parsed: parsed,\n        errors: errors\n    };\n}\nfunction isInsideContent(part) {\n    // Stryker disable all : because the part.position === \"insidetag\" would be enough but we want to make the API future proof\n    return part.type === \"content\" && part.position === \"insidetag\";\n// Stryker restore all\n}\nfunction getContentParts(xmlparsed) {\n    return xmlparsed.filter(isInsideContent);\n}\nfunction decodeContentParts(xmlparsed, fileType) {\n    var inTextTag = false;\n    xmlparsed.forEach(function(part) {\n        inTextTag = updateInTextTag(part, inTextTag);\n        if (part.type === \"content\") {\n            part.position = inTextTag ? \"insidetag\" : \"outsidetag\";\n        }\n        if (fileType !== \"text\" && isInsideContent(part)) {\n            part.value = part.value.replace(/>/g, \"&gt;\");\n        }\n    });\n}\nmodule.exports = {\n    parseDelimiters: parseDelimiters,\n    parse: function parse(xmllexed, delimiters, syntax, fileType) {\n        decodeContentParts(xmllexed, fileType);\n        var _parseDelimiters = parseDelimiters(getContentParts(xmllexed), delimiters, syntax), delimiterParsed = _parseDelimiters.parsed, errors = _parseDelimiters.errors;\n        var lexed = [];\n        var index = 0;\n        var lIndex = 0;\n        xmllexed.forEach(function(part) {\n            if (isInsideContent(part)) {\n                Array.prototype.push.apply(lexed, delimiterParsed[index].map(function(p) {\n                    if (p.type === \"content\") {\n                        p.position = \"insidetag\";\n                    }\n                    p.lIndex = lIndex++;\n                    return p;\n                }));\n                index++;\n            } else {\n                part.lIndex = lIndex++;\n                lexed.push(part);\n            }\n        });\n        return {\n            errors: errors,\n            lexed: lexed\n        };\n    },\n    xmlparse: function xmlparse(content, xmltags) {\n        var matches = tagMatcher(content, xmltags.text, xmltags.other);\n        var cursor = 0;\n        var parsed = matches.reduce(function(parsed, match) {\n            var value = content.substr(cursor, match.offset - cursor);\n            if (value.length > 0) {\n                parsed.push({\n                    type: \"content\",\n                    value: value\n                });\n            }\n            cursor = match.offset + match.value.length;\n            delete match.offset;\n            parsed.push(match);\n            return parsed;\n        }, []);\n        var value = content.substr(cursor);\n        if (value.length > 0) {\n            parsed.push({\n                type: \"content\",\n                value: value\n            });\n        }\n        return parsed;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/docxtemplater/js/lexer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/docxtemplater/js/merge-sort.js":
/*!*****************************************************!*\
  !*** ./node_modules/docxtemplater/js/merge-sort.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("\nfunction getMinFromArrays(arrays, state) {\n    var minIndex = -1;\n    for(var i = 0, l = arrays.length; i < l; i++){\n        if (state[i] >= arrays[i].length) {\n            continue;\n        }\n        if (minIndex === -1 || arrays[i][state[i]].offset < arrays[minIndex][state[minIndex]].offset) {\n            minIndex = i;\n        }\n    }\n    return minIndex;\n}\nmodule.exports = function(arrays) {\n    var totalLength = arrays.reduce(function(sum, array) {\n        return sum + array.length;\n    }, 0);\n    arrays = arrays.filter(function(array) {\n        return array.length > 0;\n    });\n    var resultArray = new Array(totalLength);\n    var state = arrays.map(function() {\n        return 0;\n    });\n    for(var i = 0; i < totalLength; i++){\n        var arrayIndex = getMinFromArrays(arrays, state);\n        resultArray[i] = arrays[arrayIndex][state[arrayIndex]];\n        state[arrayIndex]++;\n    }\n    return resultArray;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZG9jeHRlbXBsYXRlci9qcy9tZXJnZS1zb3J0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWIsU0FBU0EsaUJBQWlCQyxNQUFNLEVBQUVDLEtBQUs7SUFDckMsSUFBSUMsV0FBVyxDQUFDO0lBQ2hCLElBQUssSUFBSUMsSUFBSSxHQUFHQyxJQUFJSixPQUFPSyxNQUFNLEVBQUVGLElBQUlDLEdBQUdELElBQUs7UUFDN0MsSUFBSUYsS0FBSyxDQUFDRSxFQUFFLElBQUlILE1BQU0sQ0FBQ0csRUFBRSxDQUFDRSxNQUFNLEVBQUU7WUFDaEM7UUFDRjtRQUNBLElBQUlILGFBQWEsQ0FBQyxLQUFLRixNQUFNLENBQUNHLEVBQUUsQ0FBQ0YsS0FBSyxDQUFDRSxFQUFFLENBQUMsQ0FBQ0csTUFBTSxHQUFHTixNQUFNLENBQUNFLFNBQVMsQ0FBQ0QsS0FBSyxDQUFDQyxTQUFTLENBQUMsQ0FBQ0ksTUFBTSxFQUFFO1lBQzVGSixXQUFXQztRQUNiO0lBQ0Y7SUFDQSxPQUFPRDtBQUNUO0FBQ0FLLE9BQU9DLE9BQU8sR0FBRyxTQUFVUixNQUFNO0lBQy9CLElBQUlTLGNBQWNULE9BQU9VLE1BQU0sQ0FBQyxTQUFVQyxHQUFHLEVBQUVDLEtBQUs7UUFDbEQsT0FBT0QsTUFBTUMsTUFBTVAsTUFBTTtJQUMzQixHQUFHO0lBQ0hMLFNBQVNBLE9BQU9hLE1BQU0sQ0FBQyxTQUFVRCxLQUFLO1FBQ3BDLE9BQU9BLE1BQU1QLE1BQU0sR0FBRztJQUN4QjtJQUNBLElBQUlTLGNBQWMsSUFBSUMsTUFBTU47SUFDNUIsSUFBSVIsUUFBUUQsT0FBT2dCLEdBQUcsQ0FBQztRQUNyQixPQUFPO0lBQ1Q7SUFDQSxJQUFLLElBQUliLElBQUksR0FBR0EsSUFBSU0sYUFBYU4sSUFBSztRQUNwQyxJQUFJYyxhQUFhbEIsaUJBQWlCQyxRQUFRQztRQUMxQ2EsV0FBVyxDQUFDWCxFQUFFLEdBQUdILE1BQU0sQ0FBQ2lCLFdBQVcsQ0FBQ2hCLEtBQUssQ0FBQ2dCLFdBQVcsQ0FBQztRQUN0RGhCLEtBQUssQ0FBQ2dCLFdBQVc7SUFDbkI7SUFDQSxPQUFPSDtBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVkLXBsYW5uZXItZnJvbnQtZW5kLy4vbm9kZV9tb2R1bGVzL2RvY3h0ZW1wbGF0ZXIvanMvbWVyZ2Utc29ydC5qcz83MTY3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBnZXRNaW5Gcm9tQXJyYXlzKGFycmF5cywgc3RhdGUpIHtcbiAgdmFyIG1pbkluZGV4ID0gLTE7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXJyYXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGlmIChzdGF0ZVtpXSA+PSBhcnJheXNbaV0ubGVuZ3RoKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKG1pbkluZGV4ID09PSAtMSB8fCBhcnJheXNbaV1bc3RhdGVbaV1dLm9mZnNldCA8IGFycmF5c1ttaW5JbmRleF1bc3RhdGVbbWluSW5kZXhdXS5vZmZzZXQpIHtcbiAgICAgIG1pbkluZGV4ID0gaTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1pbkluZGV4O1xufVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJyYXlzKSB7XG4gIHZhciB0b3RhbExlbmd0aCA9IGFycmF5cy5yZWR1Y2UoZnVuY3Rpb24gKHN1bSwgYXJyYXkpIHtcbiAgICByZXR1cm4gc3VtICsgYXJyYXkubGVuZ3RoO1xuICB9LCAwKTtcbiAgYXJyYXlzID0gYXJyYXlzLmZpbHRlcihmdW5jdGlvbiAoYXJyYXkpIHtcbiAgICByZXR1cm4gYXJyYXkubGVuZ3RoID4gMDtcbiAgfSk7XG4gIHZhciByZXN1bHRBcnJheSA9IG5ldyBBcnJheSh0b3RhbExlbmd0aCk7XG4gIHZhciBzdGF0ZSA9IGFycmF5cy5tYXAoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAwO1xuICB9KTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b3RhbExlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGFycmF5SW5kZXggPSBnZXRNaW5Gcm9tQXJyYXlzKGFycmF5cywgc3RhdGUpO1xuICAgIHJlc3VsdEFycmF5W2ldID0gYXJyYXlzW2FycmF5SW5kZXhdW3N0YXRlW2FycmF5SW5kZXhdXTtcbiAgICBzdGF0ZVthcnJheUluZGV4XSsrO1xuICB9XG4gIHJldHVybiByZXN1bHRBcnJheTtcbn07Il0sIm5hbWVzIjpbImdldE1pbkZyb21BcnJheXMiLCJhcnJheXMiLCJzdGF0ZSIsIm1pbkluZGV4IiwiaSIsImwiLCJsZW5ndGgiLCJvZmZzZXQiLCJtb2R1bGUiLCJleHBvcnRzIiwidG90YWxMZW5ndGgiLCJyZWR1Y2UiLCJzdW0iLCJhcnJheSIsImZpbHRlciIsInJlc3VsdEFycmF5IiwiQXJyYXkiLCJtYXAiLCJhcnJheUluZGV4Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/docxtemplater/js/merge-sort.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/docxtemplater/js/module-wrapper.js":
/*!*********************************************************!*\
  !*** ./node_modules/docxtemplater/js/module-wrapper.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar _require = __webpack_require__(/*! ./errors.js */ \"(ssr)/./node_modules/docxtemplater/js/errors.js\"), XTInternalError = _require.XTInternalError;\nfunction emptyFun() {}\nfunction identity(i) {\n    return i;\n}\nmodule.exports = function(module1) {\n    var defaults = {\n        set: emptyFun,\n        matchers: function matchers() {\n            return [];\n        },\n        parse: emptyFun,\n        render: emptyFun,\n        getTraits: emptyFun,\n        getFileType: emptyFun,\n        nullGetter: emptyFun,\n        optionsTransformer: identity,\n        postrender: identity,\n        errorsTransformer: identity,\n        getRenderedMap: identity,\n        preparse: identity,\n        postparse: identity,\n        on: emptyFun,\n        resolve: emptyFun,\n        preResolve: emptyFun\n    };\n    if (Object.keys(defaults).every(function(key) {\n        return !module1[key];\n    })) {\n        var err = new XTInternalError(\"This module cannot be wrapped, because it doesn't define any of the necessary functions\");\n        err.properties = {\n            id: \"module_cannot_be_wrapped\",\n            explanation: \"This module cannot be wrapped, because it doesn't define any of the necessary functions\"\n        };\n        throw err;\n    }\n    Object.keys(defaults).forEach(function(key) {\n        module1[key] = module1[key] || defaults[key];\n    });\n    return module1;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZG9jeHRlbXBsYXRlci9qcy9tb2R1bGUtd3JhcHBlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViLElBQUlBLFdBQVdDLG1CQUFPQSxDQUFDLG9FQUFhLEdBQ2xDQyxrQkFBa0JGLFNBQVNFLGVBQWU7QUFDNUMsU0FBU0MsWUFBWTtBQUNyQixTQUFTQyxTQUFTQyxDQUFDO0lBQ2pCLE9BQU9BO0FBQ1Q7QUFDQUMsT0FBT0MsT0FBTyxHQUFHLFNBQVVELE9BQU07SUFDL0IsSUFBSUUsV0FBVztRQUNiQyxLQUFLTjtRQUNMTyxVQUFVLFNBQVNBO1lBQ2pCLE9BQU8sRUFBRTtRQUNYO1FBQ0FDLE9BQU9SO1FBQ1BTLFFBQVFUO1FBQ1JVLFdBQVdWO1FBQ1hXLGFBQWFYO1FBQ2JZLFlBQVlaO1FBQ1phLG9CQUFvQlo7UUFDcEJhLFlBQVliO1FBQ1pjLG1CQUFtQmQ7UUFDbkJlLGdCQUFnQmY7UUFDaEJnQixVQUFVaEI7UUFDVmlCLFdBQVdqQjtRQUNYa0IsSUFBSW5CO1FBQ0pvQixTQUFTcEI7UUFDVHFCLFlBQVlyQjtJQUNkO0lBQ0EsSUFBSXNCLE9BQU9DLElBQUksQ0FBQ2xCLFVBQVVtQixLQUFLLENBQUMsU0FBVUMsR0FBRztRQUMzQyxPQUFPLENBQUN0QixPQUFNLENBQUNzQixJQUFJO0lBQ3JCLElBQUk7UUFDRixJQUFJQyxNQUFNLElBQUkzQixnQkFBZ0I7UUFDOUIyQixJQUFJQyxVQUFVLEdBQUc7WUFDZkMsSUFBSTtZQUNKQyxhQUFhO1FBQ2Y7UUFDQSxNQUFNSDtJQUNSO0lBQ0FKLE9BQU9DLElBQUksQ0FBQ2xCLFVBQVV5QixPQUFPLENBQUMsU0FBVUwsR0FBRztRQUN6Q3RCLE9BQU0sQ0FBQ3NCLElBQUksR0FBR3RCLE9BQU0sQ0FBQ3NCLElBQUksSUFBSXBCLFFBQVEsQ0FBQ29CLElBQUk7SUFDNUM7SUFDQSxPQUFPdEI7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZC1wbGFubmVyLWZyb250LWVuZC8uL25vZGVfbW9kdWxlcy9kb2N4dGVtcGxhdGVyL2pzL21vZHVsZS13cmFwcGVyLmpzPzAzOTMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoXCIuL2Vycm9ycy5qc1wiKSxcbiAgWFRJbnRlcm5hbEVycm9yID0gX3JlcXVpcmUuWFRJbnRlcm5hbEVycm9yO1xuZnVuY3Rpb24gZW1wdHlGdW4oKSB7fVxuZnVuY3Rpb24gaWRlbnRpdHkoaSkge1xuICByZXR1cm4gaTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG1vZHVsZSkge1xuICB2YXIgZGVmYXVsdHMgPSB7XG4gICAgc2V0OiBlbXB0eUZ1bixcbiAgICBtYXRjaGVyczogZnVuY3Rpb24gbWF0Y2hlcnMoKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfSxcbiAgICBwYXJzZTogZW1wdHlGdW4sXG4gICAgcmVuZGVyOiBlbXB0eUZ1bixcbiAgICBnZXRUcmFpdHM6IGVtcHR5RnVuLFxuICAgIGdldEZpbGVUeXBlOiBlbXB0eUZ1bixcbiAgICBudWxsR2V0dGVyOiBlbXB0eUZ1bixcbiAgICBvcHRpb25zVHJhbnNmb3JtZXI6IGlkZW50aXR5LFxuICAgIHBvc3RyZW5kZXI6IGlkZW50aXR5LFxuICAgIGVycm9yc1RyYW5zZm9ybWVyOiBpZGVudGl0eSxcbiAgICBnZXRSZW5kZXJlZE1hcDogaWRlbnRpdHksXG4gICAgcHJlcGFyc2U6IGlkZW50aXR5LFxuICAgIHBvc3RwYXJzZTogaWRlbnRpdHksXG4gICAgb246IGVtcHR5RnVuLFxuICAgIHJlc29sdmU6IGVtcHR5RnVuLFxuICAgIHByZVJlc29sdmU6IGVtcHR5RnVuXG4gIH07XG4gIGlmIChPYmplY3Qua2V5cyhkZWZhdWx0cykuZXZlcnkoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiAhbW9kdWxlW2tleV07XG4gIH0pKSB7XG4gICAgdmFyIGVyciA9IG5ldyBYVEludGVybmFsRXJyb3IoXCJUaGlzIG1vZHVsZSBjYW5ub3QgYmUgd3JhcHBlZCwgYmVjYXVzZSBpdCBkb2Vzbid0IGRlZmluZSBhbnkgb2YgdGhlIG5lY2Vzc2FyeSBmdW5jdGlvbnNcIik7XG4gICAgZXJyLnByb3BlcnRpZXMgPSB7XG4gICAgICBpZDogXCJtb2R1bGVfY2Fubm90X2JlX3dyYXBwZWRcIixcbiAgICAgIGV4cGxhbmF0aW9uOiBcIlRoaXMgbW9kdWxlIGNhbm5vdCBiZSB3cmFwcGVkLCBiZWNhdXNlIGl0IGRvZXNuJ3QgZGVmaW5lIGFueSBvZiB0aGUgbmVjZXNzYXJ5IGZ1bmN0aW9uc1wiXG4gICAgfTtcbiAgICB0aHJvdyBlcnI7XG4gIH1cbiAgT2JqZWN0LmtleXMoZGVmYXVsdHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIG1vZHVsZVtrZXldID0gbW9kdWxlW2tleV0gfHwgZGVmYXVsdHNba2V5XTtcbiAgfSk7XG4gIHJldHVybiBtb2R1bGU7XG59OyJdLCJuYW1lcyI6WyJfcmVxdWlyZSIsInJlcXVpcmUiLCJYVEludGVybmFsRXJyb3IiLCJlbXB0eUZ1biIsImlkZW50aXR5IiwiaSIsIm1vZHVsZSIsImV4cG9ydHMiLCJkZWZhdWx0cyIsInNldCIsIm1hdGNoZXJzIiwicGFyc2UiLCJyZW5kZXIiLCJnZXRUcmFpdHMiLCJnZXRGaWxlVHlwZSIsIm51bGxHZXR0ZXIiLCJvcHRpb25zVHJhbnNmb3JtZXIiLCJwb3N0cmVuZGVyIiwiZXJyb3JzVHJhbnNmb3JtZXIiLCJnZXRSZW5kZXJlZE1hcCIsInByZXBhcnNlIiwicG9zdHBhcnNlIiwib24iLCJyZXNvbHZlIiwicHJlUmVzb2x2ZSIsIk9iamVjdCIsImtleXMiLCJldmVyeSIsImtleSIsImVyciIsInByb3BlcnRpZXMiLCJpZCIsImV4cGxhbmF0aW9uIiwiZm9yRWFjaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/docxtemplater/js/module-wrapper.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/docxtemplater/js/modules/common.js":
/*!*********************************************************!*\
  !*** ./node_modules/docxtemplater/js/modules/common.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nfunction _typeof(o) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o) {\n        return typeof o;\n    } : function(o) {\n        return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    Object.defineProperty(Constructor, \"prototype\", {\n        writable: false\n    });\n    return Constructor;\n}\nfunction _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n    if (\"object\" != _typeof(t) || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n        var i = e.call(t, r || \"default\");\n        if (\"object\" != _typeof(i)) return i;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n}\nvar wrapper = __webpack_require__(/*! ../module-wrapper.js */ \"(ssr)/./node_modules/docxtemplater/js/module-wrapper.js\");\nvar filetypes = __webpack_require__(/*! ../filetypes.js */ \"(ssr)/./node_modules/docxtemplater/js/filetypes.js\");\nvar _require = __webpack_require__(/*! ../content-types.js */ \"(ssr)/./node_modules/docxtemplater/js/content-types.js\"), settingsContentType = _require.settingsContentType, coreContentType = _require.coreContentType, appContentType = _require.appContentType, customContentType = _require.customContentType;\nvar commonContentTypes = [\n    settingsContentType,\n    coreContentType,\n    appContentType,\n    customContentType\n];\nvar Common = /*#__PURE__*/ function() {\n    function Common() {\n        _classCallCheck(this, Common);\n        this.name = \"Common\";\n    }\n    return _createClass(Common, [\n        {\n            key: \"getFileType\",\n            value: function getFileType(_ref) {\n                var doc = _ref.doc;\n                var invertedContentTypes = doc.invertedContentTypes;\n                if (!invertedContentTypes) {\n                    return;\n                }\n                for(var j = 0, len2 = commonContentTypes.length; j < len2; j++){\n                    var ct = commonContentTypes[j];\n                    if (invertedContentTypes[ct]) {\n                        Array.prototype.push.apply(doc.targets, invertedContentTypes[ct]);\n                    }\n                }\n                var keys = [\n                    \"docx\",\n                    \"pptx\"\n                ];\n                var ftCandidate;\n                for(var i = 0, len = keys.length; i < len; i++){\n                    var contentTypes = filetypes[keys[i]];\n                    for(var _j = 0, _len = contentTypes.length; _j < _len; _j++){\n                        var _ct = contentTypes[_j];\n                        if (invertedContentTypes[_ct]) {\n                            for(var k = 0, _len2 = invertedContentTypes[_ct].length; k < _len2; k++){\n                                var target = invertedContentTypes[_ct][k];\n                                if (doc.relsTypes[target] && [\n                                    \"http://purl.oclc.org/ooxml/officeDocument/relationships/officeDocument\",\n                                    \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\"\n                                ].indexOf(doc.relsTypes[target]) === -1) {\n                                    continue;\n                                }\n                                ftCandidate = keys[i];\n                                if (filetypes.main.indexOf(_ct) !== -1 || _ct === filetypes.pptx[0]) {\n                                    doc.textTarget || (doc.textTarget = target);\n                                }\n                                doc.targets.push(target);\n                            }\n                        }\n                    }\n                    if (ftCandidate) {\n                        return ftCandidate;\n                    }\n                }\n                return ftCandidate;\n            }\n        }\n    ]);\n}();\nmodule.exports = function() {\n    return wrapper(new Common());\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/docxtemplater/js/modules/common.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/docxtemplater/js/modules/expand-pair-trait.js":
/*!********************************************************************!*\
  !*** ./node_modules/docxtemplater/js/modules/expand-pair-trait.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nfunction _typeof(o) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o) {\n        return typeof o;\n    } : function(o) {\n        return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    Object.defineProperty(Constructor, \"prototype\", {\n        writable: false\n    });\n    return Constructor;\n}\nfunction _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n    if (\"object\" != _typeof(t) || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n        var i = e.call(t, r || \"default\");\n        if (\"object\" != _typeof(i)) return i;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n}\nvar traitName = \"expandPair\";\nvar mergeSort = __webpack_require__(/*! ../merge-sort.js */ \"(ssr)/./node_modules/docxtemplater/js/merge-sort.js\");\nvar _require = __webpack_require__(/*! ../doc-utils.js */ \"(ssr)/./node_modules/docxtemplater/js/doc-utils.js\"), getLeft = _require.getLeft, getRight = _require.getRight;\nvar wrapper = __webpack_require__(/*! ../module-wrapper.js */ \"(ssr)/./node_modules/docxtemplater/js/module-wrapper.js\");\nvar _require2 = __webpack_require__(/*! ../traits.js */ \"(ssr)/./node_modules/docxtemplater/js/traits.js\"), getExpandToDefault = _require2.getExpandToDefault;\nvar _require3 = __webpack_require__(/*! ../errors.js */ \"(ssr)/./node_modules/docxtemplater/js/errors.js\"), getUnmatchedLoopException = _require3.getUnmatchedLoopException, getClosingTagNotMatchOpeningTag = _require3.getClosingTagNotMatchOpeningTag, getUnbalancedLoopException = _require3.getUnbalancedLoopException;\nfunction getOpenCountChange(part) {\n    switch(part.location){\n        case \"start\":\n            return 1;\n        case \"end\":\n            return -1;\n    }\n}\nfunction match(start, end) {\n    return start != null && end != null && (start.part.location === \"start\" && end.part.location === \"end\" && start.part.value === end.part.value || end.part.value === \"\");\n}\nfunction transformer(traits) {\n    var i = 0;\n    var errors = [];\n    while(i < traits.length){\n        var part = traits[i].part;\n        if (part.location === \"end\") {\n            if (i === 0) {\n                traits.splice(0, 1);\n                errors.push(getUnmatchedLoopException(part));\n                return {\n                    traits: traits,\n                    errors: errors\n                };\n            }\n            var endIndex = i;\n            var startIndex = i - 1;\n            var offseter = 1;\n            if (match(traits[startIndex], traits[endIndex])) {\n                traits.splice(endIndex, 1);\n                traits.splice(startIndex, 1);\n                return {\n                    errors: errors,\n                    traits: traits\n                };\n            }\n            while(offseter < 50){\n                var startCandidate = traits[startIndex - offseter];\n                var endCandidate = traits[endIndex + offseter];\n                if (match(startCandidate, traits[endIndex])) {\n                    traits.splice(endIndex, 1);\n                    traits.splice(startIndex - offseter, 1);\n                    return {\n                        errors: errors,\n                        traits: traits\n                    };\n                }\n                if (match(traits[startIndex], endCandidate)) {\n                    traits.splice(endIndex + offseter, 1);\n                    traits.splice(startIndex, 1);\n                    return {\n                        errors: errors,\n                        traits: traits\n                    };\n                }\n                offseter++;\n            }\n            errors.push(getClosingTagNotMatchOpeningTag({\n                tags: [\n                    traits[startIndex].part,\n                    traits[endIndex].part\n                ]\n            }));\n            traits.splice(endIndex, 1);\n            traits.splice(startIndex, 1);\n            return {\n                traits: traits,\n                errors: errors\n            };\n        }\n        i++;\n    }\n    traits.forEach(function(_ref) {\n        var part = _ref.part;\n        errors.push(getUnmatchedLoopException(part));\n    });\n    return {\n        traits: [],\n        errors: errors\n    };\n}\nfunction getPairs(traits) {\n    var levelTraits = {};\n    var errors = [];\n    var pairs = [];\n    var transformedTraits = [];\n    for(var i = 0; i < traits.length; i++){\n        transformedTraits.push(traits[i]);\n    }\n    while(transformedTraits.length > 0){\n        var result = transformer(transformedTraits);\n        errors = errors.concat(result.errors);\n        transformedTraits = result.traits;\n    }\n    // Stryker disable all : because this check makes the function return quicker\n    if (errors.length > 0) {\n        return {\n            pairs: pairs,\n            errors: errors\n        };\n    }\n    // Stryker restore all\n    var countOpen = 0;\n    for(var _i = 0; _i < traits.length; _i++){\n        var currentTrait = traits[_i];\n        var part = currentTrait.part;\n        var change = getOpenCountChange(part);\n        countOpen += change;\n        if (change === 1) {\n            levelTraits[countOpen] = currentTrait;\n        } else {\n            var startTrait = levelTraits[countOpen + 1];\n            if (countOpen === 0) {\n                pairs = pairs.concat([\n                    [\n                        startTrait,\n                        currentTrait\n                    ]\n                ]);\n            }\n        }\n        countOpen = countOpen >= 0 ? countOpen : 0;\n    }\n    return {\n        pairs: pairs,\n        errors: errors\n    };\n}\nvar ExpandPairTrait = /*#__PURE__*/ function() {\n    function ExpandPairTrait() {\n        _classCallCheck(this, ExpandPairTrait);\n        this.name = \"ExpandPairTrait\";\n    }\n    return _createClass(ExpandPairTrait, [\n        {\n            key: \"optionsTransformer\",\n            value: function optionsTransformer(options, docxtemplater) {\n                this.expandTags = docxtemplater.fileTypeConfig.expandTags.concat(docxtemplater.options.paragraphLoop ? docxtemplater.fileTypeConfig.onParagraphLoop : []);\n                return options;\n            }\n        },\n        {\n            key: \"postparse\",\n            value: function postparse(postparsed, _ref2) {\n                var _this = this;\n                var getTraits = _ref2.getTraits, _postparse = _ref2.postparse, fileType = _ref2.fileType;\n                var traits = getTraits(traitName, postparsed);\n                traits = traits.map(function(trait) {\n                    return trait || [];\n                });\n                traits = mergeSort(traits);\n                var _getPairs = getPairs(traits), pairs = _getPairs.pairs, errors = _getPairs.errors;\n                var lastRight = 0;\n                var lastPair = null;\n                var expandedPairs = pairs.map(function(pair) {\n                    var expandTo = pair[0].part.expandTo;\n                    if (expandTo === \"auto\" && fileType !== \"text\") {\n                        var result = getExpandToDefault(postparsed, pair, _this.expandTags);\n                        if (result.error) {\n                            errors.push(result.error);\n                        }\n                        expandTo = result.value;\n                    }\n                    if (!expandTo || fileType === \"text\") {\n                        var _left = pair[0].offset;\n                        var _right = pair[1].offset;\n                        if (_left < lastRight) {\n                            errors.push(getUnbalancedLoopException(pair, lastPair));\n                        }\n                        lastPair = pair;\n                        lastRight = _right;\n                        return [\n                            _left,\n                            _right\n                        ];\n                    }\n                    var left, right;\n                    try {\n                        left = getLeft(postparsed, expandTo, pair[0].offset);\n                    } catch (e) {\n                        errors.push(e);\n                    }\n                    try {\n                        right = getRight(postparsed, expandTo, pair[1].offset);\n                    } catch (e) {\n                        errors.push(e);\n                    }\n                    if (left < lastRight) {\n                        errors.push(getUnbalancedLoopException(pair, lastPair));\n                    }\n                    lastRight = right;\n                    lastPair = pair;\n                    return [\n                        left,\n                        right\n                    ];\n                });\n                // Stryker disable all : because this check makes the function return quicker\n                if (errors.length > 0) {\n                    return {\n                        postparsed: postparsed,\n                        errors: errors\n                    };\n                }\n                // Stryker restore all\n                var currentPairIndex = 0;\n                var innerParts;\n                var newParsed = postparsed.reduce(function(newParsed, part, i) {\n                    var inPair = currentPairIndex < pairs.length && expandedPairs[currentPairIndex][0] <= i && i <= expandedPairs[currentPairIndex][1];\n                    var pair = pairs[currentPairIndex];\n                    var expandedPair = expandedPairs[currentPairIndex];\n                    if (!inPair) {\n                        newParsed.push(part);\n                        return newParsed;\n                    }\n                    if (expandedPair[0] === i) {\n                        innerParts = [];\n                    }\n                    if (pair[0].offset !== i && pair[1].offset !== i) {\n                        innerParts.push(part);\n                    }\n                    if (expandedPair[1] === i) {\n                        var basePart = postparsed[pair[0].offset];\n                        basePart.subparsed = _postparse(innerParts, {\n                            basePart: basePart\n                        });\n                        basePart.endLindex = pair[1].part.lIndex;\n                        delete basePart.location;\n                        delete basePart.expandTo;\n                        newParsed.push(basePart);\n                        currentPairIndex++;\n                    }\n                    return newParsed;\n                }, []);\n                return {\n                    postparsed: newParsed,\n                    errors: errors\n                };\n            }\n        }\n    ]);\n}();\nmodule.exports = function() {\n    return wrapper(new ExpandPairTrait());\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZG9jeHRlbXBsYXRlci9qcy9tb2R1bGVzL2V4cGFuZC1wYWlyLXRyYWl0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWIsU0FBU0EsUUFBUUMsQ0FBQztJQUFJO0lBQTJCLE9BQU9ELFVBQVUsY0FBYyxPQUFPRSxVQUFVLFlBQVksT0FBT0EsT0FBT0MsUUFBUSxHQUFHLFNBQVVGLENBQUM7UUFBSSxPQUFPLE9BQU9BO0lBQUcsSUFBSSxTQUFVQSxDQUFDO1FBQUksT0FBT0EsS0FBSyxjQUFjLE9BQU9DLFVBQVVELEVBQUVHLFdBQVcsS0FBS0YsVUFBVUQsTUFBTUMsT0FBT0csU0FBUyxHQUFHLFdBQVcsT0FBT0o7SUFBRyxHQUFHRCxRQUFRQztBQUFJO0FBQzdULFNBQVNLLGdCQUFnQkMsUUFBUSxFQUFFQyxXQUFXO0lBQUksSUFBSSxDQUFFRCxDQUFBQSxvQkFBb0JDLFdBQVUsR0FBSTtRQUFFLE1BQU0sSUFBSUMsVUFBVTtJQUFzQztBQUFFO0FBQ3hKLFNBQVNDLGtCQUFrQkMsTUFBTSxFQUFFQyxLQUFLO0lBQUksSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlELE1BQU1FLE1BQU0sRUFBRUQsSUFBSztRQUFFLElBQUlFLGFBQWFILEtBQUssQ0FBQ0MsRUFBRTtRQUFFRSxXQUFXQyxVQUFVLEdBQUdELFdBQVdDLFVBQVUsSUFBSTtRQUFPRCxXQUFXRSxZQUFZLEdBQUc7UUFBTSxJQUFJLFdBQVdGLFlBQVlBLFdBQVdHLFFBQVEsR0FBRztRQUFNQyxPQUFPQyxjQUFjLENBQUNULFFBQVFVLGVBQWVOLFdBQVdPLEdBQUcsR0FBR1A7SUFBYTtBQUFFO0FBQzVVLFNBQVNRLGFBQWFmLFdBQVcsRUFBRWdCLFVBQVUsRUFBRUMsV0FBVztJQUFJLElBQUlELFlBQVlkLGtCQUFrQkYsWUFBWUgsU0FBUyxFQUFFbUI7SUFBYSxJQUFJQyxhQUFhZixrQkFBa0JGLGFBQWFpQjtJQUFjTixPQUFPQyxjQUFjLENBQUNaLGFBQWEsYUFBYTtR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L3JlZC1wbGFubmVyLWZyb250LWVuZC8uL25vZGVfbW9kdWxlcy9kb2N4dGVtcGxhdGVyL2pzL21vZHVsZXMvZXhwYW5kLXBhaXItdHJhaXQuanM/MmY4NSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3R5cGVvZihvKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykgeyByZXR1cm4gdHlwZW9mIG87IH0gOiBmdW5jdGlvbiAobykgeyByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbzsgfSwgX3R5cGVvZihvKTsgfVxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgX3RvUHJvcGVydHlLZXkoZGVzY3JpcHRvci5rZXkpLCBkZXNjcmlwdG9yKTsgfSB9XG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogZmFsc2UgfSk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkodCkgeyB2YXIgaSA9IF90b1ByaW1pdGl2ZSh0LCBcInN0cmluZ1wiKTsgcmV0dXJuIFwic3ltYm9sXCIgPT0gX3R5cGVvZihpKSA/IGkgOiBpICsgXCJcIjsgfVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKHQsIHIpIHsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZih0KSB8fCAhdCkgcmV0dXJuIHQ7IHZhciBlID0gdFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAodm9pZCAwICE9PSBlKSB7IHZhciBpID0gZS5jYWxsKHQsIHIgfHwgXCJkZWZhdWx0XCIpOyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKGkpKSByZXR1cm4gaTsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpOyB9IHJldHVybiAoXCJzdHJpbmdcIiA9PT0gciA/IFN0cmluZyA6IE51bWJlcikodCk7IH1cbnZhciB0cmFpdE5hbWUgPSBcImV4cGFuZFBhaXJcIjtcbnZhciBtZXJnZVNvcnQgPSByZXF1aXJlKFwiLi4vbWVyZ2Utc29ydC5qc1wiKTtcbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoXCIuLi9kb2MtdXRpbHMuanNcIiksXG4gIGdldExlZnQgPSBfcmVxdWlyZS5nZXRMZWZ0LFxuICBnZXRSaWdodCA9IF9yZXF1aXJlLmdldFJpZ2h0O1xudmFyIHdyYXBwZXIgPSByZXF1aXJlKFwiLi4vbW9kdWxlLXdyYXBwZXIuanNcIik7XG52YXIgX3JlcXVpcmUyID0gcmVxdWlyZShcIi4uL3RyYWl0cy5qc1wiKSxcbiAgZ2V0RXhwYW5kVG9EZWZhdWx0ID0gX3JlcXVpcmUyLmdldEV4cGFuZFRvRGVmYXVsdDtcbnZhciBfcmVxdWlyZTMgPSByZXF1aXJlKFwiLi4vZXJyb3JzLmpzXCIpLFxuICBnZXRVbm1hdGNoZWRMb29wRXhjZXB0aW9uID0gX3JlcXVpcmUzLmdldFVubWF0Y2hlZExvb3BFeGNlcHRpb24sXG4gIGdldENsb3NpbmdUYWdOb3RNYXRjaE9wZW5pbmdUYWcgPSBfcmVxdWlyZTMuZ2V0Q2xvc2luZ1RhZ05vdE1hdGNoT3BlbmluZ1RhZyxcbiAgZ2V0VW5iYWxhbmNlZExvb3BFeGNlcHRpb24gPSBfcmVxdWlyZTMuZ2V0VW5iYWxhbmNlZExvb3BFeGNlcHRpb247XG5mdW5jdGlvbiBnZXRPcGVuQ291bnRDaGFuZ2UocGFydCkge1xuICBzd2l0Y2ggKHBhcnQubG9jYXRpb24pIHtcbiAgICBjYXNlIFwic3RhcnRcIjpcbiAgICAgIHJldHVybiAxO1xuICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgIHJldHVybiAtMTtcbiAgfVxufVxuZnVuY3Rpb24gbWF0Y2goc3RhcnQsIGVuZCkge1xuICByZXR1cm4gc3RhcnQgIT0gbnVsbCAmJiBlbmQgIT0gbnVsbCAmJiAoc3RhcnQucGFydC5sb2NhdGlvbiA9PT0gXCJzdGFydFwiICYmIGVuZC5wYXJ0LmxvY2F0aW9uID09PSBcImVuZFwiICYmIHN0YXJ0LnBhcnQudmFsdWUgPT09IGVuZC5wYXJ0LnZhbHVlIHx8IGVuZC5wYXJ0LnZhbHVlID09PSBcIlwiKTtcbn1cbmZ1bmN0aW9uIHRyYW5zZm9ybWVyKHRyYWl0cykge1xuICB2YXIgaSA9IDA7XG4gIHZhciBlcnJvcnMgPSBbXTtcbiAgd2hpbGUgKGkgPCB0cmFpdHMubGVuZ3RoKSB7XG4gICAgdmFyIHBhcnQgPSB0cmFpdHNbaV0ucGFydDtcbiAgICBpZiAocGFydC5sb2NhdGlvbiA9PT0gXCJlbmRcIikge1xuICAgICAgaWYgKGkgPT09IDApIHtcbiAgICAgICAgdHJhaXRzLnNwbGljZSgwLCAxKTtcbiAgICAgICAgZXJyb3JzLnB1c2goZ2V0VW5tYXRjaGVkTG9vcEV4Y2VwdGlvbihwYXJ0KSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdHJhaXRzOiB0cmFpdHMsXG4gICAgICAgICAgZXJyb3JzOiBlcnJvcnNcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHZhciBlbmRJbmRleCA9IGk7XG4gICAgICB2YXIgc3RhcnRJbmRleCA9IGkgLSAxO1xuICAgICAgdmFyIG9mZnNldGVyID0gMTtcbiAgICAgIGlmIChtYXRjaCh0cmFpdHNbc3RhcnRJbmRleF0sIHRyYWl0c1tlbmRJbmRleF0pKSB7XG4gICAgICAgIHRyYWl0cy5zcGxpY2UoZW5kSW5kZXgsIDEpO1xuICAgICAgICB0cmFpdHMuc3BsaWNlKHN0YXJ0SW5kZXgsIDEpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGVycm9yczogZXJyb3JzLFxuICAgICAgICAgIHRyYWl0czogdHJhaXRzXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICB3aGlsZSAob2Zmc2V0ZXIgPCA1MCkge1xuICAgICAgICB2YXIgc3RhcnRDYW5kaWRhdGUgPSB0cmFpdHNbc3RhcnRJbmRleCAtIG9mZnNldGVyXTtcbiAgICAgICAgdmFyIGVuZENhbmRpZGF0ZSA9IHRyYWl0c1tlbmRJbmRleCArIG9mZnNldGVyXTtcbiAgICAgICAgaWYgKG1hdGNoKHN0YXJ0Q2FuZGlkYXRlLCB0cmFpdHNbZW5kSW5kZXhdKSkge1xuICAgICAgICAgIHRyYWl0cy5zcGxpY2UoZW5kSW5kZXgsIDEpO1xuICAgICAgICAgIHRyYWl0cy5zcGxpY2Uoc3RhcnRJbmRleCAtIG9mZnNldGVyLCAxKTtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZXJyb3JzOiBlcnJvcnMsXG4gICAgICAgICAgICB0cmFpdHM6IHRyYWl0c1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1hdGNoKHRyYWl0c1tzdGFydEluZGV4XSwgZW5kQ2FuZGlkYXRlKSkge1xuICAgICAgICAgIHRyYWl0cy5zcGxpY2UoZW5kSW5kZXggKyBvZmZzZXRlciwgMSk7XG4gICAgICAgICAgdHJhaXRzLnNwbGljZShzdGFydEluZGV4LCAxKTtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZXJyb3JzOiBlcnJvcnMsXG4gICAgICAgICAgICB0cmFpdHM6IHRyYWl0c1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgb2Zmc2V0ZXIrKztcbiAgICAgIH1cbiAgICAgIGVycm9ycy5wdXNoKGdldENsb3NpbmdUYWdOb3RNYXRjaE9wZW5pbmdUYWcoe1xuICAgICAgICB0YWdzOiBbdHJhaXRzW3N0YXJ0SW5kZXhdLnBhcnQsIHRyYWl0c1tlbmRJbmRleF0ucGFydF1cbiAgICAgIH0pKTtcbiAgICAgIHRyYWl0cy5zcGxpY2UoZW5kSW5kZXgsIDEpO1xuICAgICAgdHJhaXRzLnNwbGljZShzdGFydEluZGV4LCAxKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRyYWl0czogdHJhaXRzLFxuICAgICAgICBlcnJvcnM6IGVycm9yc1xuICAgICAgfTtcbiAgICB9XG4gICAgaSsrO1xuICB9XG4gIHRyYWl0cy5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIHBhcnQgPSBfcmVmLnBhcnQ7XG4gICAgZXJyb3JzLnB1c2goZ2V0VW5tYXRjaGVkTG9vcEV4Y2VwdGlvbihwYXJ0KSk7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHRyYWl0czogW10sXG4gICAgZXJyb3JzOiBlcnJvcnNcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldFBhaXJzKHRyYWl0cykge1xuICB2YXIgbGV2ZWxUcmFpdHMgPSB7fTtcbiAgdmFyIGVycm9ycyA9IFtdO1xuICB2YXIgcGFpcnMgPSBbXTtcbiAgdmFyIHRyYW5zZm9ybWVkVHJhaXRzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdHJhaXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdHJhbnNmb3JtZWRUcmFpdHMucHVzaCh0cmFpdHNbaV0pO1xuICB9XG4gIHdoaWxlICh0cmFuc2Zvcm1lZFRyYWl0cy5sZW5ndGggPiAwKSB7XG4gICAgdmFyIHJlc3VsdCA9IHRyYW5zZm9ybWVyKHRyYW5zZm9ybWVkVHJhaXRzKTtcbiAgICBlcnJvcnMgPSBlcnJvcnMuY29uY2F0KHJlc3VsdC5lcnJvcnMpO1xuICAgIHRyYW5zZm9ybWVkVHJhaXRzID0gcmVzdWx0LnRyYWl0cztcbiAgfVxuXG4gIC8vIFN0cnlrZXIgZGlzYWJsZSBhbGwgOiBiZWNhdXNlIHRoaXMgY2hlY2sgbWFrZXMgdGhlIGZ1bmN0aW9uIHJldHVybiBxdWlja2VyXG4gIGlmIChlcnJvcnMubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiB7XG4gICAgICBwYWlyczogcGFpcnMsXG4gICAgICBlcnJvcnM6IGVycm9yc1xuICAgIH07XG4gIH1cbiAgLy8gU3RyeWtlciByZXN0b3JlIGFsbFxuICB2YXIgY291bnRPcGVuID0gMDtcbiAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IHRyYWl0cy5sZW5ndGg7IF9pKyspIHtcbiAgICB2YXIgY3VycmVudFRyYWl0ID0gdHJhaXRzW19pXTtcbiAgICB2YXIgcGFydCA9IGN1cnJlbnRUcmFpdC5wYXJ0O1xuICAgIHZhciBjaGFuZ2UgPSBnZXRPcGVuQ291bnRDaGFuZ2UocGFydCk7XG4gICAgY291bnRPcGVuICs9IGNoYW5nZTtcbiAgICBpZiAoY2hhbmdlID09PSAxKSB7XG4gICAgICBsZXZlbFRyYWl0c1tjb3VudE9wZW5dID0gY3VycmVudFRyYWl0O1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgc3RhcnRUcmFpdCA9IGxldmVsVHJhaXRzW2NvdW50T3BlbiArIDFdO1xuICAgICAgaWYgKGNvdW50T3BlbiA9PT0gMCkge1xuICAgICAgICBwYWlycyA9IHBhaXJzLmNvbmNhdChbW3N0YXJ0VHJhaXQsIGN1cnJlbnRUcmFpdF1dKTtcbiAgICAgIH1cbiAgICB9XG4gICAgY291bnRPcGVuID0gY291bnRPcGVuID49IDAgPyBjb3VudE9wZW4gOiAwO1xuICB9XG4gIHJldHVybiB7XG4gICAgcGFpcnM6IHBhaXJzLFxuICAgIGVycm9yczogZXJyb3JzXG4gIH07XG59XG52YXIgRXhwYW5kUGFpclRyYWl0ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRXhwYW5kUGFpclRyYWl0KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBFeHBhbmRQYWlyVHJhaXQpO1xuICAgIHRoaXMubmFtZSA9IFwiRXhwYW5kUGFpclRyYWl0XCI7XG4gIH1cbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhFeHBhbmRQYWlyVHJhaXQsIFt7XG4gICAga2V5OiBcIm9wdGlvbnNUcmFuc2Zvcm1lclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvcHRpb25zVHJhbnNmb3JtZXIob3B0aW9ucywgZG9jeHRlbXBsYXRlcikge1xuICAgICAgdGhpcy5leHBhbmRUYWdzID0gZG9jeHRlbXBsYXRlci5maWxlVHlwZUNvbmZpZy5leHBhbmRUYWdzLmNvbmNhdChkb2N4dGVtcGxhdGVyLm9wdGlvbnMucGFyYWdyYXBoTG9vcCA/IGRvY3h0ZW1wbGF0ZXIuZmlsZVR5cGVDb25maWcub25QYXJhZ3JhcGhMb29wIDogW10pO1xuICAgICAgcmV0dXJuIG9wdGlvbnM7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInBvc3RwYXJzZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwb3N0cGFyc2UocG9zdHBhcnNlZCwgX3JlZjIpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICB2YXIgZ2V0VHJhaXRzID0gX3JlZjIuZ2V0VHJhaXRzLFxuICAgICAgICBfcG9zdHBhcnNlID0gX3JlZjIucG9zdHBhcnNlLFxuICAgICAgICBmaWxlVHlwZSA9IF9yZWYyLmZpbGVUeXBlO1xuICAgICAgdmFyIHRyYWl0cyA9IGdldFRyYWl0cyh0cmFpdE5hbWUsIHBvc3RwYXJzZWQpO1xuICAgICAgdHJhaXRzID0gdHJhaXRzLm1hcChmdW5jdGlvbiAodHJhaXQpIHtcbiAgICAgICAgcmV0dXJuIHRyYWl0IHx8IFtdO1xuICAgICAgfSk7XG4gICAgICB0cmFpdHMgPSBtZXJnZVNvcnQodHJhaXRzKTtcbiAgICAgIHZhciBfZ2V0UGFpcnMgPSBnZXRQYWlycyh0cmFpdHMpLFxuICAgICAgICBwYWlycyA9IF9nZXRQYWlycy5wYWlycyxcbiAgICAgICAgZXJyb3JzID0gX2dldFBhaXJzLmVycm9ycztcbiAgICAgIHZhciBsYXN0UmlnaHQgPSAwO1xuICAgICAgdmFyIGxhc3RQYWlyID0gbnVsbDtcbiAgICAgIHZhciBleHBhbmRlZFBhaXJzID0gcGFpcnMubWFwKGZ1bmN0aW9uIChwYWlyKSB7XG4gICAgICAgIHZhciBleHBhbmRUbyA9IHBhaXJbMF0ucGFydC5leHBhbmRUbztcbiAgICAgICAgaWYgKGV4cGFuZFRvID09PSBcImF1dG9cIiAmJiBmaWxlVHlwZSAhPT0gXCJ0ZXh0XCIpIHtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gZ2V0RXhwYW5kVG9EZWZhdWx0KHBvc3RwYXJzZWQsIHBhaXIsIF90aGlzLmV4cGFuZFRhZ3MpO1xuICAgICAgICAgIGlmIChyZXN1bHQuZXJyb3IpIHtcbiAgICAgICAgICAgIGVycm9ycy5wdXNoKHJlc3VsdC5lcnJvcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGV4cGFuZFRvID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZXhwYW5kVG8gfHwgZmlsZVR5cGUgPT09IFwidGV4dFwiKSB7XG4gICAgICAgICAgdmFyIF9sZWZ0ID0gcGFpclswXS5vZmZzZXQ7XG4gICAgICAgICAgdmFyIF9yaWdodCA9IHBhaXJbMV0ub2Zmc2V0O1xuICAgICAgICAgIGlmIChfbGVmdCA8IGxhc3RSaWdodCkge1xuICAgICAgICAgICAgZXJyb3JzLnB1c2goZ2V0VW5iYWxhbmNlZExvb3BFeGNlcHRpb24ocGFpciwgbGFzdFBhaXIpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGFzdFBhaXIgPSBwYWlyO1xuICAgICAgICAgIGxhc3RSaWdodCA9IF9yaWdodDtcbiAgICAgICAgICByZXR1cm4gW19sZWZ0LCBfcmlnaHRdO1xuICAgICAgICB9XG4gICAgICAgIHZhciBsZWZ0LCByaWdodDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBsZWZ0ID0gZ2V0TGVmdChwb3N0cGFyc2VkLCBleHBhbmRUbywgcGFpclswXS5vZmZzZXQpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgZXJyb3JzLnB1c2goZSk7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByaWdodCA9IGdldFJpZ2h0KHBvc3RwYXJzZWQsIGV4cGFuZFRvLCBwYWlyWzFdLm9mZnNldCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBlcnJvcnMucHVzaChlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGVmdCA8IGxhc3RSaWdodCkge1xuICAgICAgICAgIGVycm9ycy5wdXNoKGdldFVuYmFsYW5jZWRMb29wRXhjZXB0aW9uKHBhaXIsIGxhc3RQYWlyKSk7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdFJpZ2h0ID0gcmlnaHQ7XG4gICAgICAgIGxhc3RQYWlyID0gcGFpcjtcbiAgICAgICAgcmV0dXJuIFtsZWZ0LCByaWdodF07XG4gICAgICB9KTtcblxuICAgICAgLy8gU3RyeWtlciBkaXNhYmxlIGFsbCA6IGJlY2F1c2UgdGhpcyBjaGVjayBtYWtlcyB0aGUgZnVuY3Rpb24gcmV0dXJuIHF1aWNrZXJcbiAgICAgIGlmIChlcnJvcnMubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHBvc3RwYXJzZWQ6IHBvc3RwYXJzZWQsXG4gICAgICAgICAgZXJyb3JzOiBlcnJvcnNcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIC8vIFN0cnlrZXIgcmVzdG9yZSBhbGxcblxuICAgICAgdmFyIGN1cnJlbnRQYWlySW5kZXggPSAwO1xuICAgICAgdmFyIGlubmVyUGFydHM7XG4gICAgICB2YXIgbmV3UGFyc2VkID0gcG9zdHBhcnNlZC5yZWR1Y2UoZnVuY3Rpb24gKG5ld1BhcnNlZCwgcGFydCwgaSkge1xuICAgICAgICB2YXIgaW5QYWlyID0gY3VycmVudFBhaXJJbmRleCA8IHBhaXJzLmxlbmd0aCAmJiBleHBhbmRlZFBhaXJzW2N1cnJlbnRQYWlySW5kZXhdWzBdIDw9IGkgJiYgaSA8PSBleHBhbmRlZFBhaXJzW2N1cnJlbnRQYWlySW5kZXhdWzFdO1xuICAgICAgICB2YXIgcGFpciA9IHBhaXJzW2N1cnJlbnRQYWlySW5kZXhdO1xuICAgICAgICB2YXIgZXhwYW5kZWRQYWlyID0gZXhwYW5kZWRQYWlyc1tjdXJyZW50UGFpckluZGV4XTtcbiAgICAgICAgaWYgKCFpblBhaXIpIHtcbiAgICAgICAgICBuZXdQYXJzZWQucHVzaChwYXJ0KTtcbiAgICAgICAgICByZXR1cm4gbmV3UGFyc2VkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChleHBhbmRlZFBhaXJbMF0gPT09IGkpIHtcbiAgICAgICAgICBpbm5lclBhcnRzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhaXJbMF0ub2Zmc2V0ICE9PSBpICYmIHBhaXJbMV0ub2Zmc2V0ICE9PSBpKSB7XG4gICAgICAgICAgaW5uZXJQYXJ0cy5wdXNoKHBhcnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChleHBhbmRlZFBhaXJbMV0gPT09IGkpIHtcbiAgICAgICAgICB2YXIgYmFzZVBhcnQgPSBwb3N0cGFyc2VkW3BhaXJbMF0ub2Zmc2V0XTtcbiAgICAgICAgICBiYXNlUGFydC5zdWJwYXJzZWQgPSBfcG9zdHBhcnNlKGlubmVyUGFydHMsIHtcbiAgICAgICAgICAgIGJhc2VQYXJ0OiBiYXNlUGFydFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJhc2VQYXJ0LmVuZExpbmRleCA9IHBhaXJbMV0ucGFydC5sSW5kZXg7XG4gICAgICAgICAgZGVsZXRlIGJhc2VQYXJ0LmxvY2F0aW9uO1xuICAgICAgICAgIGRlbGV0ZSBiYXNlUGFydC5leHBhbmRUbztcbiAgICAgICAgICBuZXdQYXJzZWQucHVzaChiYXNlUGFydCk7XG4gICAgICAgICAgY3VycmVudFBhaXJJbmRleCsrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXdQYXJzZWQ7XG4gICAgICB9LCBbXSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwb3N0cGFyc2VkOiBuZXdQYXJzZWQsXG4gICAgICAgIGVycm9yczogZXJyb3JzXG4gICAgICB9O1xuICAgIH1cbiAgfV0pO1xufSgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB3cmFwcGVyKG5ldyBFeHBhbmRQYWlyVHJhaXQoKSk7XG59OyJdLCJuYW1lcyI6WyJfdHlwZW9mIiwibyIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX2RlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImkiLCJsZW5ndGgiLCJkZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJfdG9Qcm9wZXJ0eUtleSIsImtleSIsIl9jcmVhdGVDbGFzcyIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsInQiLCJfdG9QcmltaXRpdmUiLCJyIiwiZSIsInRvUHJpbWl0aXZlIiwiY2FsbCIsIlN0cmluZyIsIk51bWJlciIsInRyYWl0TmFtZSIsIm1lcmdlU29ydCIsInJlcXVpcmUiLCJfcmVxdWlyZSIsImdldExlZnQiLCJnZXRSaWdodCIsIndyYXBwZXIiLCJfcmVxdWlyZTIiLCJnZXRFeHBhbmRUb0RlZmF1bHQiLCJfcmVxdWlyZTMiLCJnZXRVbm1hdGNoZWRMb29wRXhjZXB0aW9uIiwiZ2V0Q2xvc2luZ1RhZ05vdE1hdGNoT3BlbmluZ1RhZyIsImdldFVuYmFsYW5jZWRMb29wRXhjZXB0aW9uIiwiZ2V0T3BlbkNvdW50Q2hhbmdlIiwicGFydCIsImxvY2F0aW9uIiwibWF0Y2giLCJzdGFydCIsImVuZCIsInZhbHVlIiwidHJhbnNmb3JtZXIiLCJ0cmFpdHMiLCJlcnJvcnMiLCJzcGxpY2UiLCJwdXNoIiwiZW5kSW5kZXgiLCJzdGFydEluZGV4Iiwib2Zmc2V0ZXIiLCJzdGFydENhbmRpZGF0ZSIsImVuZENhbmRpZGF0ZSIsInRhZ3MiLCJmb3JFYWNoIiwiX3JlZiIsImdldFBhaXJzIiwibGV2ZWxUcmFpdHMiLCJwYWlycyIsInRyYW5zZm9ybWVkVHJhaXRzIiwicmVzdWx0IiwiY29uY2F0IiwiY291bnRPcGVuIiwiX2kiLCJjdXJyZW50VHJhaXQiLCJjaGFuZ2UiLCJzdGFydFRyYWl0IiwiRXhwYW5kUGFpclRyYWl0IiwibmFtZSIsIm9wdGlvbnNUcmFuc2Zvcm1lciIsIm9wdGlvbnMiLCJkb2N4dGVtcGxhdGVyIiwiZXhwYW5kVGFncyIsImZpbGVUeXBlQ29uZmlnIiwicGFyYWdyYXBoTG9vcCIsIm9uUGFyYWdyYXBoTG9vcCIsInBvc3RwYXJzZSIsInBvc3RwYXJzZWQiLCJfcmVmMiIsIl90aGlzIiwiZ2V0VHJhaXRzIiwiX3Bvc3RwYXJzZSIsImZpbGVUeXBlIiwibWFwIiwidHJhaXQiLCJfZ2V0UGFpcnMiLCJsYXN0UmlnaHQiLCJsYXN0UGFpciIsImV4cGFuZGVkUGFpcnMiLCJwYWlyIiwiZXhwYW5kVG8iLCJlcnJvciIsIl9sZWZ0Iiwib2Zmc2V0IiwiX3JpZ2h0IiwibGVmdCIsInJpZ2h0IiwiY3VycmVudFBhaXJJbmRleCIsImlubmVyUGFydHMiLCJuZXdQYXJzZWQiLCJyZWR1Y2UiLCJpblBhaXIiLCJleHBhbmRlZFBhaXIiLCJiYXNlUGFydCIsInN1YnBhcnNlZCIsImVuZExpbmRleCIsImxJbmRleCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/docxtemplater/js/modules/expand-pair-trait.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/docxtemplater/js/modules/loop.js":
/*!*******************************************************!*\
  !*** ./node_modules/docxtemplater/js/modules/loop.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nfunction _typeof(o) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o) {\n        return typeof o;\n    } : function(o) {\n        return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n}\nfunction _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _iterableToArray(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction ownKeys(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _iterableToArrayLimit(r, l) {\n    var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n    if (null != t) {\n        var e, n, i, u, a = [], f = !0, o = !1;\n        try {\n            if (i = (t = t.call(r)).next, 0 === l) {\n                if (Object(t) !== t) return;\n                f = !1;\n            } else for(; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n        } catch (r) {\n            o = !0, n = r;\n        } finally{\n            try {\n                if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n            } finally{\n                if (o) throw n;\n            }\n        }\n        return a;\n    }\n}\nfunction _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    Object.defineProperty(Constructor, \"prototype\", {\n        writable: false\n    });\n    return Constructor;\n}\nfunction _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n    if (\"object\" != _typeof(t) || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n        var i = e.call(t, r || \"default\");\n        if (\"object\" != _typeof(i)) return i;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n}\nvar _require = __webpack_require__(/*! ../doc-utils.js */ \"(ssr)/./node_modules/docxtemplater/js/doc-utils.js\"), chunkBy = _require.chunkBy, last = _require.last, isParagraphStart = _require.isParagraphStart, isModule = _require.isModule, isParagraphEnd = _require.isParagraphEnd, isContent = _require.isContent, startsWith = _require.startsWith, isTagEnd = _require.isTagEnd, isTagStart = _require.isTagStart, getSingleAttribute = _require.getSingleAttribute, setSingleAttribute = _require.setSingleAttribute;\nvar filetypes = __webpack_require__(/*! ../filetypes.js */ \"(ssr)/./node_modules/docxtemplater/js/filetypes.js\");\nvar wrapper = __webpack_require__(/*! ../module-wrapper.js */ \"(ssr)/./node_modules/docxtemplater/js/module-wrapper.js\");\nvar moduleName = \"loop\";\nfunction hasContent(parts) {\n    return parts.some(function(part) {\n        return isContent(part);\n    });\n}\nfunction getFirstMeaningFulPart(parsed) {\n    for(var i = 0, len = parsed.length; i < len; i++){\n        if (parsed[i].type !== \"content\") {\n            return parsed[i];\n        }\n    }\n    return null;\n}\nfunction isInsideParagraphLoop(part) {\n    var firstMeaningfulPart = getFirstMeaningFulPart(part.subparsed);\n    return firstMeaningfulPart != null && firstMeaningfulPart.tag !== \"w:t\";\n}\nfunction getPageBreakIfApplies(part) {\n    return part.hasPageBreak && isInsideParagraphLoop(part) ? '<w:p><w:r><w:br w:type=\"page\"/></w:r></w:p>' : \"\";\n}\nfunction isEnclosedByParagraphs(parsed) {\n    return parsed.length && isParagraphStart(parsed[0]) && isParagraphEnd(last(parsed));\n}\nfunction getOffset(chunk) {\n    return hasContent(chunk) ? 0 : chunk.length;\n}\nfunction addPageBreakAtEnd(subRendered) {\n    var j = subRendered.parts.length - 1;\n    if (subRendered.parts[j] === \"</w:p>\") {\n        subRendered.parts.splice(j, 0, '<w:r><w:br w:type=\"page\"/></w:r>');\n    } else {\n        subRendered.parts.push('<w:p><w:r><w:br w:type=\"page\"/></w:r></w:p>');\n    }\n}\nfunction addPageBreakAtBeginning(subRendered) {\n    subRendered.parts.unshift('<w:p><w:r><w:br w:type=\"page\"/></w:r></w:p>');\n}\nfunction isContinuous(parts) {\n    return parts.some(function(part) {\n        return isTagStart(\"w:type\", part) && part.value.indexOf(\"continuous\") !== -1;\n    });\n}\nfunction isNextPage(parts) {\n    return parts.some(function(part) {\n        return isTagStart(\"w:type\", part) && part.value.indexOf('w:val=\"nextPage\"') !== -1;\n    });\n}\nfunction addSectionBefore(parts, sect) {\n    return [\n        \"<w:p><w:pPr>\".concat(sect.map(function(_ref) {\n            var value = _ref.value;\n            return value;\n        }).join(\"\"), \"</w:pPr></w:p>\")\n    ].concat(parts);\n}\nfunction addContinuousType(parts) {\n    var stop = false;\n    var inSectPr = false;\n    return parts.reduce(function(result, part) {\n        if (stop === false && startsWith(part, \"<w:sectPr\")) {\n            inSectPr = true;\n        }\n        if (inSectPr) {\n            if (startsWith(part, \"<w:type\")) {\n                stop = true;\n            }\n            if (stop === false && startsWith(part, \"</w:sectPr\")) {\n                result.push('<w:type w:val=\"continuous\"/>');\n            }\n        }\n        result.push(part);\n        return result;\n    }, []);\n}\nfunction dropHeaderFooterRefs(parts) {\n    return parts.filter(function(text) {\n        return !startsWith(text, \"<w:headerReference\") && !startsWith(text, \"<w:footerReference\");\n    });\n}\nfunction hasPageBreak(chunk) {\n    return chunk.some(function(part) {\n        return part.tag === \"w:br\" && part.value.indexOf('w:type=\"page\"') !== -1;\n    });\n}\nfunction hasImage(chunk) {\n    return chunk.some(function(_ref2) {\n        var tag = _ref2.tag;\n        return tag === \"w:drawing\";\n    });\n}\nfunction getSectPr(chunks) {\n    var collectSectPr = false;\n    var sectPrs = [];\n    chunks.forEach(function(part) {\n        if (isTagStart(\"w:sectPr\", part)) {\n            sectPrs.push([]);\n            collectSectPr = true;\n        }\n        if (collectSectPr) {\n            sectPrs[sectPrs.length - 1].push(part);\n        }\n        if (isTagEnd(\"w:sectPr\", part)) {\n            collectSectPr = false;\n        }\n    });\n    return sectPrs;\n}\nfunction getSectPrHeaderFooterChangeCount(chunks) {\n    var collectSectPr = false;\n    var sectPrCount = 0;\n    chunks.forEach(function(part) {\n        if (isTagStart(\"w:sectPr\", part)) {\n            collectSectPr = true;\n        }\n        if (collectSectPr) {\n            if (part.tag === \"w:headerReference\" || part.tag === \"w:footerReference\") {\n                sectPrCount++;\n                collectSectPr = false;\n            }\n        }\n        if (isTagEnd(\"w:sectPr\", part)) {\n            collectSectPr = false;\n        }\n    });\n    return sectPrCount;\n}\nfunction getLastSectPr(parsed) {\n    var sectPr = [];\n    var inSectPr = false;\n    for(var i = parsed.length - 1; i >= 0; i--){\n        var part = parsed[i];\n        if (isTagEnd(\"w:sectPr\", part)) {\n            inSectPr = true;\n        }\n        if (isTagStart(\"w:sectPr\", part)) {\n            sectPr.unshift(part.value);\n            inSectPr = false;\n        }\n        if (inSectPr) {\n            sectPr.unshift(part.value);\n        }\n        if (isParagraphStart(part)) {\n            if (sectPr.length > 0) {\n                return sectPr.join(\"\");\n            }\n            break;\n        }\n    }\n    return \"\";\n}\nvar LoopModule = /*#__PURE__*/ function() {\n    function LoopModule() {\n        _classCallCheck(this, LoopModule);\n        this.name = \"LoopModule\";\n        this.inXfrm = false;\n        this.totalSectPr = 0;\n        this.prefix = {\n            start: \"#\",\n            end: \"/\",\n            dash: /^-([^\\s]+)\\s(.+)/,\n            inverted: \"^\"\n        };\n    }\n    return _createClass(LoopModule, [\n        {\n            key: \"optionsTransformer\",\n            value: function optionsTransformer(opts, docxtemplater) {\n                this.docxtemplater = docxtemplater;\n                return opts;\n            }\n        },\n        {\n            key: \"preparse\",\n            value: function preparse(parsed, _ref3) {\n                var contentType = _ref3.contentType;\n                if (filetypes.main.indexOf(contentType) !== -1) {\n                    this.sects = getSectPr(parsed);\n                }\n            }\n        },\n        {\n            key: \"matchers\",\n            value: function matchers() {\n                var module1 = moduleName;\n                return [\n                    [\n                        this.prefix.start,\n                        module1,\n                        {\n                            expandTo: \"auto\",\n                            location: \"start\",\n                            inverted: false\n                        }\n                    ],\n                    [\n                        this.prefix.inverted,\n                        module1,\n                        {\n                            expandTo: \"auto\",\n                            location: \"start\",\n                            inverted: true\n                        }\n                    ],\n                    [\n                        this.prefix.end,\n                        module1,\n                        {\n                            location: \"end\"\n                        }\n                    ],\n                    [\n                        this.prefix.dash,\n                        module1,\n                        function(_ref4) {\n                            var _ref5 = _slicedToArray(_ref4, 3), expandTo = _ref5[1], value = _ref5[2];\n                            return {\n                                location: \"start\",\n                                inverted: false,\n                                expandTo: expandTo,\n                                value: value\n                            };\n                        }\n                    ]\n                ];\n            }\n        },\n        {\n            key: \"getTraits\",\n            value: function getTraits(traitName, parsed) {\n                // Stryker disable all : because getTraits should disappear in v4\n                if (traitName !== \"expandPair\") {\n                    return;\n                }\n                // Stryker restore all\n                return parsed.reduce(function(tags, part, offset) {\n                    if (isModule(part, moduleName) && part.subparsed == null) {\n                        tags.push({\n                            part: part,\n                            offset: offset\n                        });\n                    }\n                    return tags;\n                }, []);\n            }\n        },\n        {\n            key: \"postparse\",\n            value: function postparse(parsed, _ref6) {\n                var basePart = _ref6.basePart;\n                if (basePart && this.docxtemplater.fileType === \"docx\" && parsed.length > 0) {\n                    basePart.sectPrCount = getSectPrHeaderFooterChangeCount(parsed);\n                    this.totalSectPr += basePart.sectPrCount;\n                    var sects = this.sects;\n                    sects.some(function(sect, index) {\n                        if (basePart.lIndex < sect[0].lIndex) {\n                            if (index + 1 < sects.length && isContinuous(sects[index + 1])) {\n                                basePart.addContinuousType = true;\n                            }\n                            return true;\n                        }\n                        if (parsed[0].lIndex < sect[0].lIndex && sect[0].lIndex < basePart.lIndex) {\n                            if (isNextPage(sects[index])) {\n                                basePart.addNextPage = {\n                                    index: index\n                                };\n                            }\n                            return true;\n                        }\n                    });\n                    basePart.lastParagrapSectPr = getLastSectPr(parsed);\n                }\n                if (!basePart || basePart.expandTo !== \"auto\" || basePart.module !== moduleName || !isEnclosedByParagraphs(parsed)) {\n                    return parsed;\n                }\n                basePart.paragraphLoop = true;\n                var level = 0;\n                var chunks = chunkBy(parsed, function(p) {\n                    if (isParagraphStart(p)) {\n                        level++;\n                        if (level === 1) {\n                            return \"start\";\n                        }\n                    }\n                    if (isParagraphEnd(p)) {\n                        level--;\n                        if (level === 0) {\n                            return \"end\";\n                        }\n                    }\n                    return null;\n                });\n                var firstChunk = chunks[0];\n                var lastChunk = last(chunks);\n                var firstOffset = getOffset(firstChunk);\n                var lastOffset = getOffset(lastChunk);\n                basePart.hasPageBreakBeginning = hasPageBreak(firstChunk);\n                basePart.hasPageBreak = hasPageBreak(lastChunk);\n                if (hasImage(firstChunk)) {\n                    firstOffset = 0;\n                }\n                if (hasImage(lastChunk)) {\n                    lastOffset = 0;\n                }\n                return parsed.slice(firstOffset, parsed.length - lastOffset);\n            }\n        },\n        {\n            key: \"resolve\",\n            value: function resolve(part, options) {\n                if (!isModule(part, moduleName)) {\n                    return null;\n                }\n                var sm = options.scopeManager;\n                var promisedValue = sm.getValueAsync(part.value, {\n                    part: part\n                });\n                var promises = [];\n                function loopOver(scope, i, length) {\n                    var scopeManager = sm.createSubScopeManager(scope, part.value, i, part, length);\n                    promises.push(options.resolve(_objectSpread(_objectSpread({}, options), {}, {\n                        compiled: part.subparsed,\n                        tags: {},\n                        scopeManager: scopeManager\n                    })));\n                }\n                var errorList = [];\n                return promisedValue.then(function(values) {\n                    return new Promise(function(resolve) {\n                        if (values instanceof Array) {\n                            Promise.all(values).then(resolve);\n                        } else {\n                            resolve(values);\n                        }\n                    }).then(function(values) {\n                        sm.loopOverValue(values, loopOver, part.inverted);\n                        return Promise.all(promises).then(function(r) {\n                            return r.map(function(_ref7) {\n                                var resolved = _ref7.resolved, errors = _ref7.errors;\n                                errorList.push.apply(errorList, _toConsumableArray(errors));\n                                return resolved;\n                            });\n                        }).then(function(value) {\n                            if (errorList.length > 0) {\n                                throw errorList;\n                            }\n                            return value;\n                        });\n                    });\n                });\n            }\n        },\n        {\n            key: \"render\",\n            value: function render(part, options) {\n                if (part.tag === \"p:xfrm\") {\n                    this.inXfrm = part.position === \"start\";\n                }\n                if (part.tag === \"a:ext\" && this.inXfrm) {\n                    this.lastExt = part;\n                    return part;\n                }\n                if (!isModule(part, moduleName)) {\n                    return null;\n                }\n                var totalValue = [];\n                var errors = [];\n                var heightOffset = 0;\n                var self = this;\n                var firstTag = part.subparsed[0];\n                var tagHeight = 0;\n                if ((firstTag === null || firstTag === void 0 ? void 0 : firstTag.tag) === \"a:tr\") {\n                    tagHeight = +getSingleAttribute(firstTag.value, \"h\");\n                }\n                heightOffset -= tagHeight;\n                var a16RowIdOffset = 0;\n                var insideParagraphLoop = isInsideParagraphLoop(part);\n                // eslint-disable-next-line complexity\n                function loopOver(scope, i, length) {\n                    heightOffset += tagHeight;\n                    var scopeManager = options.scopeManager.createSubScopeManager(scope, part.value, i, part, length);\n                    part.subparsed.forEach(function(pp) {\n                        if (isTagStart(\"a16:rowId\", pp)) {\n                            var val = +getSingleAttribute(pp.value, \"val\") + a16RowIdOffset;\n                            a16RowIdOffset = 1;\n                            pp.value = setSingleAttribute(pp.value, \"val\", val);\n                        }\n                    });\n                    var subRendered = options.render(_objectSpread(_objectSpread({}, options), {}, {\n                        compiled: part.subparsed,\n                        tags: {},\n                        scopeManager: scopeManager\n                    }));\n                    if (part.hasPageBreak && i === length - 1 && insideParagraphLoop) {\n                        addPageBreakAtEnd(subRendered);\n                    }\n                    var isNotFirst = scopeManager.scopePathItem.some(function(i) {\n                        return i !== 0;\n                    });\n                    if (isNotFirst) {\n                        if (part.sectPrCount === 1) {\n                            subRendered.parts = dropHeaderFooterRefs(subRendered.parts);\n                        }\n                        if (part.addContinuousType) {\n                            subRendered.parts = addContinuousType(subRendered.parts);\n                        }\n                    } else if (part.addNextPage) {\n                        subRendered.parts = addSectionBefore(subRendered.parts, self.sects[part.addNextPage.index]);\n                    }\n                    if (part.addNextPage) {\n                        addPageBreakAtEnd(subRendered);\n                    }\n                    if (part.hasPageBreakBeginning && insideParagraphLoop) {\n                        addPageBreakAtBeginning(subRendered);\n                    }\n                    for(var _i = 0, len = subRendered.parts.length; _i < len; _i++){\n                        totalValue.push(subRendered.parts[_i]);\n                    }\n                    Array.prototype.push.apply(errors, subRendered.errors);\n                }\n                var result = options.scopeManager.loopOver(part.value, loopOver, part.inverted, {\n                    part: part\n                });\n                // if the loop is showing empty content\n                if (result === false) {\n                    if (part.lastParagrapSectPr) {\n                        if (part.paragraphLoop) {\n                            return {\n                                value: \"<w:p><w:pPr>\".concat(part.lastParagrapSectPr, \"</w:pPr></w:p>\")\n                            };\n                        }\n                        return {\n                            value: \"</w:t></w:r></w:p><w:p><w:pPr>\".concat(part.lastParagrapSectPr, \"</w:pPr><w:r><w:t>\")\n                        };\n                    }\n                    return {\n                        value: getPageBreakIfApplies(part) || \"\",\n                        errors: errors\n                    };\n                }\n                if (heightOffset !== 0) {\n                    var cy = +getSingleAttribute(this.lastExt.value, \"cy\");\n                    this.lastExt.value = setSingleAttribute(this.lastExt.value, \"cy\", cy + heightOffset);\n                }\n                return {\n                    value: options.joinUncorrupt(totalValue, _objectSpread(_objectSpread({}, options), {}, {\n                        basePart: part\n                    })),\n                    errors: errors\n                };\n            }\n        }\n    ]);\n}();\nmodule.exports = function() {\n    return wrapper(new LoopModule());\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZG9jeHRlbXBsYXRlci9qcy9tb2R1bGVzL2xvb3AuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYixTQUFTQSxRQUFRQyxDQUFDO0lBQUk7SUFBMkIsT0FBT0QsVUFBVSxjQUFjLE9BQU9FLFVBQVUsWUFBWSxPQUFPQSxPQUFPQyxRQUFRLEdBQUcsU0FBVUYsQ0FBQztRQUFJLE9BQU8sT0FBT0E7SUFBRyxJQUFJLFNBQVVBLENBQUM7UUFBSSxPQUFPQSxLQUFLLGNBQWMsT0FBT0MsVUFBVUQsRUFBRUcsV0FBVyxLQUFLRixVQUFVRCxNQUFNQyxPQUFPRyxTQUFTLEdBQUcsV0FBVyxPQUFPSjtJQUFHLEdBQUdELFFBQVFDO0FBQUk7QUFDN1QsU0FBU0ssbUJBQW1CQyxHQUFHO0lBQUksT0FBT0MsbUJBQW1CRCxRQUFRRSxpQkFBaUJGLFFBQVFHLDRCQUE0QkgsUUFBUUk7QUFBc0I7QUFDeEosU0FBU0E7SUFBdUIsTUFBTSxJQUFJQyxVQUFVO0FBQXlJO0FBQzdMLFNBQVNILGlCQUFpQkksSUFBSTtJQUFJLElBQUksT0FBT1gsV0FBVyxlQUFlVyxJQUFJLENBQUNYLE9BQU9DLFFBQVEsQ0FBQyxJQUFJLFFBQVFVLElBQUksQ0FBQyxhQUFhLElBQUksTUFBTSxPQUFPQyxNQUFNQyxJQUFJLENBQUNGO0FBQU87QUFDN0osU0FBU0wsbUJBQW1CRCxHQUFHO0lBQUksSUFBSU8sTUFBTUUsT0FBTyxDQUFDVCxNQUFNLE9BQU9VLGtCQUFrQlY7QUFBTTtBQUMxRixTQUFTVyxRQUFRQyxDQUFDLEVBQUVDLENBQUM7SUFBSSxJQUFJQyxJQUFJQyxPQUFPQyxJQUFJLENBQUNKO0lBQUksSUFBSUcsT0FBT0UscUJBQXFCLEVBQUU7UUFBRSxJQUFJdkIsSUFBSXFCLE9BQU9FLHFCQUFxQixDQUFDTDtRQUFJQyxLQUFNbkIsQ0FBQUEsSUFBSUEsRUFBRXdCLE1BQU0sQ0FBQyxTQUFVTCxDQUFDO1lBQUksT0FBT0UsT0FBT0ksd0JBQXdCLENBQUNQ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RCxRQUFRLEVBQUU7b0JBQzlFcEQsTUFBTUE7Z0JBQ1I7Z0JBQ0EsdUNBQXVDO2dCQUN2QyxJQUFJZ0MsV0FBVyxPQUFPO29CQUNwQixJQUFJaEMsS0FBSzhFLGtCQUFrQixFQUFFO3dCQUMzQixJQUFJOUUsS0FBSytFLGFBQWEsRUFBRTs0QkFDdEIsT0FBTztnQ0FDTHhJLE9BQU8sZUFBZWlGLE1BQU0sQ0FBQ3hCLEtBQUs4RSxrQkFBa0IsRUFBRTs0QkFDeEQ7d0JBQ0Y7d0JBQ0EsT0FBTzs0QkFDTHZJLE9BQU8saUNBQWlDaUYsTUFBTSxDQUFDeEIsS0FBSzhFLGtCQUFrQixFQUFFO3dCQUMxRTtvQkFDRjtvQkFDQSxPQUFPO3dCQUNMdkksT0FBT2lFLHNCQUFzQlIsU0FBUzt3QkFDdEMwRyxRQUFRQTtvQkFDVjtnQkFDRjtnQkFDQSxJQUFJSyxpQkFBaUIsR0FBRztvQkFDdEIsSUFBSVcsS0FBSyxDQUFDbEksbUJBQW1CLElBQUksQ0FBQ3FILE9BQU8sQ0FBQ3RLLEtBQUssRUFBRTtvQkFDakQsSUFBSSxDQUFDc0ssT0FBTyxDQUFDdEssS0FBSyxHQUFHa0QsbUJBQW1CLElBQUksQ0FBQ29ILE9BQU8sQ0FBQ3RLLEtBQUssRUFBRSxNQUFNbUwsS0FBS1g7Z0JBQ3pFO2dCQUNBLE9BQU87b0JBQ0x4SyxPQUFPaUosUUFBUW1DLGFBQWEsQ0FBQ2IsWUFBWWpMLGNBQWNBLGNBQWMsQ0FBQyxHQUFHMkosVUFBVSxDQUFDLEdBQUc7d0JBQ3JGZixVQUFVekU7b0JBQ1o7b0JBQ0EwRyxRQUFRQTtnQkFDVjtZQUNGO1FBQ0Y7S0FBRTtBQUNKO0FBQ0E1QyxPQUFPOEQsT0FBTyxHQUFHO0lBQ2YsT0FBT2pJLFFBQVEsSUFBSWtEO0FBQ3JCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVkLXBsYW5uZXItZnJvbnQtZW5kLy4vbm9kZV9tb2R1bGVzL2RvY3h0ZW1wbGF0ZXIvanMvbW9kdWxlcy9sb29wLmpzP2E5ZTAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF90eXBlb2YobykgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHsgcmV0dXJuIHR5cGVvZiBvOyB9IDogZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8gJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgby5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG8gIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG87IH0sIF90eXBlb2Yobyk7IH1cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTsgfVxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7IGlmICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGl0ZXJbU3ltYm9sLml0ZXJhdG9yXSAhPSBudWxsIHx8IGl0ZXJbXCJAQGl0ZXJhdG9yXCJdICE9IG51bGwpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpOyB9XG5mdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShhcnIpOyB9XG5mdW5jdGlvbiBvd25LZXlzKGUsIHIpIHsgdmFyIHQgPSBPYmplY3Qua2V5cyhlKTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIG8gPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGUpOyByICYmIChvID0gby5maWx0ZXIoZnVuY3Rpb24gKHIpIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgcikuZW51bWVyYWJsZTsgfSkpLCB0LnB1c2guYXBwbHkodCwgbyk7IH0gcmV0dXJuIHQ7IH1cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQoZSkgeyBmb3IgKHZhciByID0gMTsgciA8IGFyZ3VtZW50cy5sZW5ndGg7IHIrKykgeyB2YXIgdCA9IG51bGwgIT0gYXJndW1lbnRzW3JdID8gYXJndW1lbnRzW3JdIDoge307IHIgJSAyID8gb3duS2V5cyhPYmplY3QodCksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7IF9kZWZpbmVQcm9wZXJ0eShlLCByLCB0W3JdKTsgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGUsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHQpKSA6IG93bktleXMoT2JqZWN0KHQpKS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCByLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQsIHIpKTsgfSk7IH0gcmV0dXJuIGU7IH1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsga2V5ID0gX3RvUHJvcGVydHlLZXkoa2V5KTsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSBhcnIyW2ldID0gYXJyW2ldOyByZXR1cm4gYXJyMjsgfVxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KHIsIGwpIHsgdmFyIHQgPSBudWxsID09IHIgPyBudWxsIDogXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgU3ltYm9sICYmIHJbU3ltYm9sLml0ZXJhdG9yXSB8fCByW1wiQEBpdGVyYXRvclwiXTsgaWYgKG51bGwgIT0gdCkgeyB2YXIgZSwgbiwgaSwgdSwgYSA9IFtdLCBmID0gITAsIG8gPSAhMTsgdHJ5IHsgaWYgKGkgPSAodCA9IHQuY2FsbChyKSkubmV4dCwgMCA9PT0gbCkgeyBpZiAoT2JqZWN0KHQpICE9PSB0KSByZXR1cm47IGYgPSAhMTsgfSBlbHNlIGZvciAoOyAhKGYgPSAoZSA9IGkuY2FsbCh0KSkuZG9uZSkgJiYgKGEucHVzaChlLnZhbHVlKSwgYS5sZW5ndGggIT09IGwpOyBmID0gITApOyB9IGNhdGNoIChyKSB7IG8gPSAhMCwgbiA9IHI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghZiAmJiBudWxsICE9IHRbXCJyZXR1cm5cIl0gJiYgKHUgPSB0W1wicmV0dXJuXCJdKCksIE9iamVjdCh1KSAhPT0gdSkpIHJldHVybjsgfSBmaW5hbGx5IHsgaWYgKG8pIHRocm93IG47IH0gfSByZXR1cm4gYTsgfSB9XG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7IH1cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIF90b1Byb3BlcnR5S2V5KGRlc2NyaXB0b3Iua2V5KSwgZGVzY3JpcHRvcik7IH0gfVxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6IGZhbHNlIH0pOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KHQpIHsgdmFyIGkgPSBfdG9QcmltaXRpdmUodCwgXCJzdHJpbmdcIik7IHJldHVybiBcInN5bWJvbFwiID09IF90eXBlb2YoaSkgPyBpIDogaSArIFwiXCI7IH1cbmZ1bmN0aW9uIF90b1ByaW1pdGl2ZSh0LCByKSB7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YodCkgfHwgIXQpIHJldHVybiB0OyB2YXIgZSA9IHRbU3ltYm9sLnRvUHJpbWl0aXZlXTsgaWYgKHZvaWQgMCAhPT0gZSkgeyB2YXIgaSA9IGUuY2FsbCh0LCByIHx8IFwiZGVmYXVsdFwiKTsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZihpKSkgcmV0dXJuIGk7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTsgfSByZXR1cm4gKFwic3RyaW5nXCIgPT09IHIgPyBTdHJpbmcgOiBOdW1iZXIpKHQpOyB9XG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKFwiLi4vZG9jLXV0aWxzLmpzXCIpLFxuICBjaHVua0J5ID0gX3JlcXVpcmUuY2h1bmtCeSxcbiAgbGFzdCA9IF9yZXF1aXJlLmxhc3QsXG4gIGlzUGFyYWdyYXBoU3RhcnQgPSBfcmVxdWlyZS5pc1BhcmFncmFwaFN0YXJ0LFxuICBpc01vZHVsZSA9IF9yZXF1aXJlLmlzTW9kdWxlLFxuICBpc1BhcmFncmFwaEVuZCA9IF9yZXF1aXJlLmlzUGFyYWdyYXBoRW5kLFxuICBpc0NvbnRlbnQgPSBfcmVxdWlyZS5pc0NvbnRlbnQsXG4gIHN0YXJ0c1dpdGggPSBfcmVxdWlyZS5zdGFydHNXaXRoLFxuICBpc1RhZ0VuZCA9IF9yZXF1aXJlLmlzVGFnRW5kLFxuICBpc1RhZ1N0YXJ0ID0gX3JlcXVpcmUuaXNUYWdTdGFydCxcbiAgZ2V0U2luZ2xlQXR0cmlidXRlID0gX3JlcXVpcmUuZ2V0U2luZ2xlQXR0cmlidXRlLFxuICBzZXRTaW5nbGVBdHRyaWJ1dGUgPSBfcmVxdWlyZS5zZXRTaW5nbGVBdHRyaWJ1dGU7XG52YXIgZmlsZXR5cGVzID0gcmVxdWlyZShcIi4uL2ZpbGV0eXBlcy5qc1wiKTtcbnZhciB3cmFwcGVyID0gcmVxdWlyZShcIi4uL21vZHVsZS13cmFwcGVyLmpzXCIpO1xudmFyIG1vZHVsZU5hbWUgPSBcImxvb3BcIjtcbmZ1bmN0aW9uIGhhc0NvbnRlbnQocGFydHMpIHtcbiAgcmV0dXJuIHBhcnRzLnNvbWUoZnVuY3Rpb24gKHBhcnQpIHtcbiAgICByZXR1cm4gaXNDb250ZW50KHBhcnQpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIGdldEZpcnN0TWVhbmluZ0Z1bFBhcnQocGFyc2VkKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBwYXJzZWQubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAocGFyc2VkW2ldLnR5cGUgIT09IFwiY29udGVudFwiKSB7XG4gICAgICByZXR1cm4gcGFyc2VkW2ldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGlzSW5zaWRlUGFyYWdyYXBoTG9vcChwYXJ0KSB7XG4gIHZhciBmaXJzdE1lYW5pbmdmdWxQYXJ0ID0gZ2V0Rmlyc3RNZWFuaW5nRnVsUGFydChwYXJ0LnN1YnBhcnNlZCk7XG4gIHJldHVybiBmaXJzdE1lYW5pbmdmdWxQYXJ0ICE9IG51bGwgJiYgZmlyc3RNZWFuaW5nZnVsUGFydC50YWcgIT09IFwidzp0XCI7XG59XG5mdW5jdGlvbiBnZXRQYWdlQnJlYWtJZkFwcGxpZXMocGFydCkge1xuICByZXR1cm4gcGFydC5oYXNQYWdlQnJlYWsgJiYgaXNJbnNpZGVQYXJhZ3JhcGhMb29wKHBhcnQpID8gJzx3OnA+PHc6cj48dzpiciB3OnR5cGU9XCJwYWdlXCIvPjwvdzpyPjwvdzpwPicgOiBcIlwiO1xufVxuZnVuY3Rpb24gaXNFbmNsb3NlZEJ5UGFyYWdyYXBocyhwYXJzZWQpIHtcbiAgcmV0dXJuIHBhcnNlZC5sZW5ndGggJiYgaXNQYXJhZ3JhcGhTdGFydChwYXJzZWRbMF0pICYmIGlzUGFyYWdyYXBoRW5kKGxhc3QocGFyc2VkKSk7XG59XG5mdW5jdGlvbiBnZXRPZmZzZXQoY2h1bmspIHtcbiAgcmV0dXJuIGhhc0NvbnRlbnQoY2h1bmspID8gMCA6IGNodW5rLmxlbmd0aDtcbn1cbmZ1bmN0aW9uIGFkZFBhZ2VCcmVha0F0RW5kKHN1YlJlbmRlcmVkKSB7XG4gIHZhciBqID0gc3ViUmVuZGVyZWQucGFydHMubGVuZ3RoIC0gMTtcbiAgaWYgKHN1YlJlbmRlcmVkLnBhcnRzW2pdID09PSBcIjwvdzpwPlwiKSB7XG4gICAgc3ViUmVuZGVyZWQucGFydHMuc3BsaWNlKGosIDAsICc8dzpyPjx3OmJyIHc6dHlwZT1cInBhZ2VcIi8+PC93OnI+Jyk7XG4gIH0gZWxzZSB7XG4gICAgc3ViUmVuZGVyZWQucGFydHMucHVzaCgnPHc6cD48dzpyPjx3OmJyIHc6dHlwZT1cInBhZ2VcIi8+PC93OnI+PC93OnA+Jyk7XG4gIH1cbn1cbmZ1bmN0aW9uIGFkZFBhZ2VCcmVha0F0QmVnaW5uaW5nKHN1YlJlbmRlcmVkKSB7XG4gIHN1YlJlbmRlcmVkLnBhcnRzLnVuc2hpZnQoJzx3OnA+PHc6cj48dzpiciB3OnR5cGU9XCJwYWdlXCIvPjwvdzpyPjwvdzpwPicpO1xufVxuZnVuY3Rpb24gaXNDb250aW51b3VzKHBhcnRzKSB7XG4gIHJldHVybiBwYXJ0cy5zb21lKGZ1bmN0aW9uIChwYXJ0KSB7XG4gICAgcmV0dXJuIGlzVGFnU3RhcnQoXCJ3OnR5cGVcIiwgcGFydCkgJiYgcGFydC52YWx1ZS5pbmRleE9mKFwiY29udGludW91c1wiKSAhPT0gLTE7XG4gIH0pO1xufVxuZnVuY3Rpb24gaXNOZXh0UGFnZShwYXJ0cykge1xuICByZXR1cm4gcGFydHMuc29tZShmdW5jdGlvbiAocGFydCkge1xuICAgIHJldHVybiBpc1RhZ1N0YXJ0KFwidzp0eXBlXCIsIHBhcnQpICYmIHBhcnQudmFsdWUuaW5kZXhPZigndzp2YWw9XCJuZXh0UGFnZVwiJykgIT09IC0xO1xuICB9KTtcbn1cbmZ1bmN0aW9uIGFkZFNlY3Rpb25CZWZvcmUocGFydHMsIHNlY3QpIHtcbiAgcmV0dXJuIFtcIjx3OnA+PHc6cFByPlwiLmNvbmNhdChzZWN0Lm1hcChmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciB2YWx1ZSA9IF9yZWYudmFsdWU7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9KS5qb2luKFwiXCIpLCBcIjwvdzpwUHI+PC93OnA+XCIpXS5jb25jYXQocGFydHMpO1xufVxuZnVuY3Rpb24gYWRkQ29udGludW91c1R5cGUocGFydHMpIHtcbiAgdmFyIHN0b3AgPSBmYWxzZTtcbiAgdmFyIGluU2VjdFByID0gZmFsc2U7XG4gIHJldHVybiBwYXJ0cy5yZWR1Y2UoZnVuY3Rpb24gKHJlc3VsdCwgcGFydCkge1xuICAgIGlmIChzdG9wID09PSBmYWxzZSAmJiBzdGFydHNXaXRoKHBhcnQsIFwiPHc6c2VjdFByXCIpKSB7XG4gICAgICBpblNlY3RQciA9IHRydWU7XG4gICAgfVxuICAgIGlmIChpblNlY3RQcikge1xuICAgICAgaWYgKHN0YXJ0c1dpdGgocGFydCwgXCI8dzp0eXBlXCIpKSB7XG4gICAgICAgIHN0b3AgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKHN0b3AgPT09IGZhbHNlICYmIHN0YXJ0c1dpdGgocGFydCwgXCI8L3c6c2VjdFByXCIpKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKCc8dzp0eXBlIHc6dmFsPVwiY29udGludW91c1wiLz4nKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0LnB1c2gocGFydCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSwgW10pO1xufVxuZnVuY3Rpb24gZHJvcEhlYWRlckZvb3RlclJlZnMocGFydHMpIHtcbiAgcmV0dXJuIHBhcnRzLmZpbHRlcihmdW5jdGlvbiAodGV4dCkge1xuICAgIHJldHVybiAhc3RhcnRzV2l0aCh0ZXh0LCBcIjx3OmhlYWRlclJlZmVyZW5jZVwiKSAmJiAhc3RhcnRzV2l0aCh0ZXh0LCBcIjx3OmZvb3RlclJlZmVyZW5jZVwiKTtcbiAgfSk7XG59XG5mdW5jdGlvbiBoYXNQYWdlQnJlYWsoY2h1bmspIHtcbiAgcmV0dXJuIGNodW5rLnNvbWUoZnVuY3Rpb24gKHBhcnQpIHtcbiAgICByZXR1cm4gcGFydC50YWcgPT09IFwidzpiclwiICYmIHBhcnQudmFsdWUuaW5kZXhPZigndzp0eXBlPVwicGFnZVwiJykgIT09IC0xO1xuICB9KTtcbn1cbmZ1bmN0aW9uIGhhc0ltYWdlKGNodW5rKSB7XG4gIHJldHVybiBjaHVuay5zb21lKGZ1bmN0aW9uIChfcmVmMikge1xuICAgIHZhciB0YWcgPSBfcmVmMi50YWc7XG4gICAgcmV0dXJuIHRhZyA9PT0gXCJ3OmRyYXdpbmdcIjtcbiAgfSk7XG59XG5mdW5jdGlvbiBnZXRTZWN0UHIoY2h1bmtzKSB7XG4gIHZhciBjb2xsZWN0U2VjdFByID0gZmFsc2U7XG4gIHZhciBzZWN0UHJzID0gW107XG4gIGNodW5rcy5mb3JFYWNoKGZ1bmN0aW9uIChwYXJ0KSB7XG4gICAgaWYgKGlzVGFnU3RhcnQoXCJ3OnNlY3RQclwiLCBwYXJ0KSkge1xuICAgICAgc2VjdFBycy5wdXNoKFtdKTtcbiAgICAgIGNvbGxlY3RTZWN0UHIgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoY29sbGVjdFNlY3RQcikge1xuICAgICAgc2VjdFByc1tzZWN0UHJzLmxlbmd0aCAtIDFdLnB1c2gocGFydCk7XG4gICAgfVxuICAgIGlmIChpc1RhZ0VuZChcInc6c2VjdFByXCIsIHBhcnQpKSB7XG4gICAgICBjb2xsZWN0U2VjdFByID0gZmFsc2U7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHNlY3RQcnM7XG59XG5mdW5jdGlvbiBnZXRTZWN0UHJIZWFkZXJGb290ZXJDaGFuZ2VDb3VudChjaHVua3MpIHtcbiAgdmFyIGNvbGxlY3RTZWN0UHIgPSBmYWxzZTtcbiAgdmFyIHNlY3RQckNvdW50ID0gMDtcbiAgY2h1bmtzLmZvckVhY2goZnVuY3Rpb24gKHBhcnQpIHtcbiAgICBpZiAoaXNUYWdTdGFydChcInc6c2VjdFByXCIsIHBhcnQpKSB7XG4gICAgICBjb2xsZWN0U2VjdFByID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGNvbGxlY3RTZWN0UHIpIHtcbiAgICAgIGlmIChwYXJ0LnRhZyA9PT0gXCJ3OmhlYWRlclJlZmVyZW5jZVwiIHx8IHBhcnQudGFnID09PSBcInc6Zm9vdGVyUmVmZXJlbmNlXCIpIHtcbiAgICAgICAgc2VjdFByQ291bnQrKztcbiAgICAgICAgY29sbGVjdFNlY3RQciA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNUYWdFbmQoXCJ3OnNlY3RQclwiLCBwYXJ0KSkge1xuICAgICAgY29sbGVjdFNlY3RQciA9IGZhbHNlO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBzZWN0UHJDb3VudDtcbn1cbmZ1bmN0aW9uIGdldExhc3RTZWN0UHIocGFyc2VkKSB7XG4gIHZhciBzZWN0UHIgPSBbXTtcbiAgdmFyIGluU2VjdFByID0gZmFsc2U7XG4gIGZvciAodmFyIGkgPSBwYXJzZWQubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgcGFydCA9IHBhcnNlZFtpXTtcbiAgICBpZiAoaXNUYWdFbmQoXCJ3OnNlY3RQclwiLCBwYXJ0KSkge1xuICAgICAgaW5TZWN0UHIgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoaXNUYWdTdGFydChcInc6c2VjdFByXCIsIHBhcnQpKSB7XG4gICAgICBzZWN0UHIudW5zaGlmdChwYXJ0LnZhbHVlKTtcbiAgICAgIGluU2VjdFByID0gZmFsc2U7XG4gICAgfVxuICAgIGlmIChpblNlY3RQcikge1xuICAgICAgc2VjdFByLnVuc2hpZnQocGFydC52YWx1ZSk7XG4gICAgfVxuICAgIGlmIChpc1BhcmFncmFwaFN0YXJ0KHBhcnQpKSB7XG4gICAgICBpZiAoc2VjdFByLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIHNlY3RQci5qb2luKFwiXCIpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBcIlwiO1xufVxudmFyIExvb3BNb2R1bGUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBMb29wTW9kdWxlKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMb29wTW9kdWxlKTtcbiAgICB0aGlzLm5hbWUgPSBcIkxvb3BNb2R1bGVcIjtcbiAgICB0aGlzLmluWGZybSA9IGZhbHNlO1xuICAgIHRoaXMudG90YWxTZWN0UHIgPSAwO1xuICAgIHRoaXMucHJlZml4ID0ge1xuICAgICAgc3RhcnQ6IFwiI1wiLFxuICAgICAgZW5kOiBcIi9cIixcbiAgICAgIGRhc2g6IC9eLShbXlxcc10rKVxccyguKykvLFxuICAgICAgaW52ZXJ0ZWQ6IFwiXlwiXG4gICAgfTtcbiAgfVxuICByZXR1cm4gX2NyZWF0ZUNsYXNzKExvb3BNb2R1bGUsIFt7XG4gICAga2V5OiBcIm9wdGlvbnNUcmFuc2Zvcm1lclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvcHRpb25zVHJhbnNmb3JtZXIob3B0cywgZG9jeHRlbXBsYXRlcikge1xuICAgICAgdGhpcy5kb2N4dGVtcGxhdGVyID0gZG9jeHRlbXBsYXRlcjtcbiAgICAgIHJldHVybiBvcHRzO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJwcmVwYXJzZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwcmVwYXJzZShwYXJzZWQsIF9yZWYzKSB7XG4gICAgICB2YXIgY29udGVudFR5cGUgPSBfcmVmMy5jb250ZW50VHlwZTtcbiAgICAgIGlmIChmaWxldHlwZXMubWFpbi5pbmRleE9mKGNvbnRlbnRUeXBlKSAhPT0gLTEpIHtcbiAgICAgICAgdGhpcy5zZWN0cyA9IGdldFNlY3RQcihwYXJzZWQpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJtYXRjaGVyc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBtYXRjaGVycygpIHtcbiAgICAgIHZhciBtb2R1bGUgPSBtb2R1bGVOYW1lO1xuICAgICAgcmV0dXJuIFtbdGhpcy5wcmVmaXguc3RhcnQsIG1vZHVsZSwge1xuICAgICAgICBleHBhbmRUbzogXCJhdXRvXCIsXG4gICAgICAgIGxvY2F0aW9uOiBcInN0YXJ0XCIsXG4gICAgICAgIGludmVydGVkOiBmYWxzZVxuICAgICAgfV0sIFt0aGlzLnByZWZpeC5pbnZlcnRlZCwgbW9kdWxlLCB7XG4gICAgICAgIGV4cGFuZFRvOiBcImF1dG9cIixcbiAgICAgICAgbG9jYXRpb246IFwic3RhcnRcIixcbiAgICAgICAgaW52ZXJ0ZWQ6IHRydWVcbiAgICAgIH1dLCBbdGhpcy5wcmVmaXguZW5kLCBtb2R1bGUsIHtcbiAgICAgICAgbG9jYXRpb246IFwiZW5kXCJcbiAgICAgIH1dLCBbdGhpcy5wcmVmaXguZGFzaCwgbW9kdWxlLCBmdW5jdGlvbiAoX3JlZjQpIHtcbiAgICAgICAgdmFyIF9yZWY1ID0gX3NsaWNlZFRvQXJyYXkoX3JlZjQsIDMpLFxuICAgICAgICAgIGV4cGFuZFRvID0gX3JlZjVbMV0sXG4gICAgICAgICAgdmFsdWUgPSBfcmVmNVsyXTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBsb2NhdGlvbjogXCJzdGFydFwiLFxuICAgICAgICAgIGludmVydGVkOiBmYWxzZSxcbiAgICAgICAgICBleHBhbmRUbzogZXhwYW5kVG8sXG4gICAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICAgIH07XG4gICAgICB9XV07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldFRyYWl0c1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRUcmFpdHModHJhaXROYW1lLCBwYXJzZWQpIHtcbiAgICAgIC8vIFN0cnlrZXIgZGlzYWJsZSBhbGwgOiBiZWNhdXNlIGdldFRyYWl0cyBzaG91bGQgZGlzYXBwZWFyIGluIHY0XG4gICAgICBpZiAodHJhaXROYW1lICE9PSBcImV4cGFuZFBhaXJcIikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBTdHJ5a2VyIHJlc3RvcmUgYWxsXG5cbiAgICAgIHJldHVybiBwYXJzZWQucmVkdWNlKGZ1bmN0aW9uICh0YWdzLCBwYXJ0LCBvZmZzZXQpIHtcbiAgICAgICAgaWYgKGlzTW9kdWxlKHBhcnQsIG1vZHVsZU5hbWUpICYmIHBhcnQuc3VicGFyc2VkID09IG51bGwpIHtcbiAgICAgICAgICB0YWdzLnB1c2goe1xuICAgICAgICAgICAgcGFydDogcGFydCxcbiAgICAgICAgICAgIG9mZnNldDogb2Zmc2V0XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhZ3M7XG4gICAgICB9LCBbXSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInBvc3RwYXJzZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwb3N0cGFyc2UocGFyc2VkLCBfcmVmNikge1xuICAgICAgdmFyIGJhc2VQYXJ0ID0gX3JlZjYuYmFzZVBhcnQ7XG4gICAgICBpZiAoYmFzZVBhcnQgJiYgdGhpcy5kb2N4dGVtcGxhdGVyLmZpbGVUeXBlID09PSBcImRvY3hcIiAmJiBwYXJzZWQubGVuZ3RoID4gMCkge1xuICAgICAgICBiYXNlUGFydC5zZWN0UHJDb3VudCA9IGdldFNlY3RQckhlYWRlckZvb3RlckNoYW5nZUNvdW50KHBhcnNlZCk7XG4gICAgICAgIHRoaXMudG90YWxTZWN0UHIgKz0gYmFzZVBhcnQuc2VjdFByQ291bnQ7XG4gICAgICAgIHZhciBzZWN0cyA9IHRoaXMuc2VjdHM7XG4gICAgICAgIHNlY3RzLnNvbWUoZnVuY3Rpb24gKHNlY3QsIGluZGV4KSB7XG4gICAgICAgICAgaWYgKGJhc2VQYXJ0LmxJbmRleCA8IHNlY3RbMF0ubEluZGV4KSB7XG4gICAgICAgICAgICBpZiAoaW5kZXggKyAxIDwgc2VjdHMubGVuZ3RoICYmIGlzQ29udGludW91cyhzZWN0c1tpbmRleCArIDFdKSkge1xuICAgICAgICAgICAgICBiYXNlUGFydC5hZGRDb250aW51b3VzVHlwZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHBhcnNlZFswXS5sSW5kZXggPCBzZWN0WzBdLmxJbmRleCAmJiBzZWN0WzBdLmxJbmRleCA8IGJhc2VQYXJ0LmxJbmRleCkge1xuICAgICAgICAgICAgaWYgKGlzTmV4dFBhZ2Uoc2VjdHNbaW5kZXhdKSkge1xuICAgICAgICAgICAgICBiYXNlUGFydC5hZGROZXh0UGFnZSA9IHtcbiAgICAgICAgICAgICAgICBpbmRleDogaW5kZXhcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGJhc2VQYXJ0Lmxhc3RQYXJhZ3JhcFNlY3RQciA9IGdldExhc3RTZWN0UHIocGFyc2VkKTtcbiAgICAgIH1cbiAgICAgIGlmICghYmFzZVBhcnQgfHwgYmFzZVBhcnQuZXhwYW5kVG8gIT09IFwiYXV0b1wiIHx8IGJhc2VQYXJ0Lm1vZHVsZSAhPT0gbW9kdWxlTmFtZSB8fCAhaXNFbmNsb3NlZEJ5UGFyYWdyYXBocyhwYXJzZWQpKSB7XG4gICAgICAgIHJldHVybiBwYXJzZWQ7XG4gICAgICB9XG4gICAgICBiYXNlUGFydC5wYXJhZ3JhcGhMb29wID0gdHJ1ZTtcbiAgICAgIHZhciBsZXZlbCA9IDA7XG4gICAgICB2YXIgY2h1bmtzID0gY2h1bmtCeShwYXJzZWQsIGZ1bmN0aW9uIChwKSB7XG4gICAgICAgIGlmIChpc1BhcmFncmFwaFN0YXJ0KHApKSB7XG4gICAgICAgICAgbGV2ZWwrKztcbiAgICAgICAgICBpZiAobGV2ZWwgPT09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiBcInN0YXJ0XCI7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChpc1BhcmFncmFwaEVuZChwKSkge1xuICAgICAgICAgIGxldmVsLS07XG4gICAgICAgICAgaWYgKGxldmVsID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJlbmRcIjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9KTtcbiAgICAgIHZhciBmaXJzdENodW5rID0gY2h1bmtzWzBdO1xuICAgICAgdmFyIGxhc3RDaHVuayA9IGxhc3QoY2h1bmtzKTtcbiAgICAgIHZhciBmaXJzdE9mZnNldCA9IGdldE9mZnNldChmaXJzdENodW5rKTtcbiAgICAgIHZhciBsYXN0T2Zmc2V0ID0gZ2V0T2Zmc2V0KGxhc3RDaHVuayk7XG4gICAgICBiYXNlUGFydC5oYXNQYWdlQnJlYWtCZWdpbm5pbmcgPSBoYXNQYWdlQnJlYWsoZmlyc3RDaHVuayk7XG4gICAgICBiYXNlUGFydC5oYXNQYWdlQnJlYWsgPSBoYXNQYWdlQnJlYWsobGFzdENodW5rKTtcbiAgICAgIGlmIChoYXNJbWFnZShmaXJzdENodW5rKSkge1xuICAgICAgICBmaXJzdE9mZnNldCA9IDA7XG4gICAgICB9XG4gICAgICBpZiAoaGFzSW1hZ2UobGFzdENodW5rKSkge1xuICAgICAgICBsYXN0T2Zmc2V0ID0gMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwYXJzZWQuc2xpY2UoZmlyc3RPZmZzZXQsIHBhcnNlZC5sZW5ndGggLSBsYXN0T2Zmc2V0KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVzb2x2ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXNvbHZlKHBhcnQsIG9wdGlvbnMpIHtcbiAgICAgIGlmICghaXNNb2R1bGUocGFydCwgbW9kdWxlTmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICB2YXIgc20gPSBvcHRpb25zLnNjb3BlTWFuYWdlcjtcbiAgICAgIHZhciBwcm9taXNlZFZhbHVlID0gc20uZ2V0VmFsdWVBc3luYyhwYXJ0LnZhbHVlLCB7XG4gICAgICAgIHBhcnQ6IHBhcnRcbiAgICAgIH0pO1xuICAgICAgdmFyIHByb21pc2VzID0gW107XG4gICAgICBmdW5jdGlvbiBsb29wT3ZlcihzY29wZSwgaSwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBzY29wZU1hbmFnZXIgPSBzbS5jcmVhdGVTdWJTY29wZU1hbmFnZXIoc2NvcGUsIHBhcnQudmFsdWUsIGksIHBhcnQsIGxlbmd0aCk7XG4gICAgICAgIHByb21pc2VzLnB1c2gob3B0aW9ucy5yZXNvbHZlKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgb3B0aW9ucyksIHt9LCB7XG4gICAgICAgICAgY29tcGlsZWQ6IHBhcnQuc3VicGFyc2VkLFxuICAgICAgICAgIHRhZ3M6IHt9LFxuICAgICAgICAgIHNjb3BlTWFuYWdlcjogc2NvcGVNYW5hZ2VyXG4gICAgICAgIH0pKSk7XG4gICAgICB9XG4gICAgICB2YXIgZXJyb3JMaXN0ID0gW107XG4gICAgICByZXR1cm4gcHJvbWlzZWRWYWx1ZS50aGVuKGZ1bmN0aW9uICh2YWx1ZXMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgaWYgKHZhbHVlcyBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICBQcm9taXNlLmFsbCh2YWx1ZXMpLnRoZW4ocmVzb2x2ZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmUodmFsdWVzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHZhbHVlcykge1xuICAgICAgICAgIHNtLmxvb3BPdmVyVmFsdWUodmFsdWVzLCBsb29wT3ZlciwgcGFydC5pbnZlcnRlZCk7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKS50aGVuKGZ1bmN0aW9uIChyKSB7XG4gICAgICAgICAgICByZXR1cm4gci5tYXAoZnVuY3Rpb24gKF9yZWY3KSB7XG4gICAgICAgICAgICAgIHZhciByZXNvbHZlZCA9IF9yZWY3LnJlc29sdmVkLFxuICAgICAgICAgICAgICAgIGVycm9ycyA9IF9yZWY3LmVycm9ycztcbiAgICAgICAgICAgICAgZXJyb3JMaXN0LnB1c2guYXBwbHkoZXJyb3JMaXN0LCBfdG9Db25zdW1hYmxlQXJyYXkoZXJyb3JzKSk7XG4gICAgICAgICAgICAgIHJldHVybiByZXNvbHZlZDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoZXJyb3JMaXN0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgdGhyb3cgZXJyb3JMaXN0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29tcGxleGl0eVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIocGFydCwgb3B0aW9ucykge1xuICAgICAgaWYgKHBhcnQudGFnID09PSBcInA6eGZybVwiKSB7XG4gICAgICAgIHRoaXMuaW5YZnJtID0gcGFydC5wb3NpdGlvbiA9PT0gXCJzdGFydFwiO1xuICAgICAgfVxuICAgICAgaWYgKHBhcnQudGFnID09PSBcImE6ZXh0XCIgJiYgdGhpcy5pblhmcm0pIHtcbiAgICAgICAgdGhpcy5sYXN0RXh0ID0gcGFydDtcbiAgICAgICAgcmV0dXJuIHBhcnQ7XG4gICAgICB9XG4gICAgICBpZiAoIWlzTW9kdWxlKHBhcnQsIG1vZHVsZU5hbWUpKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgdmFyIHRvdGFsVmFsdWUgPSBbXTtcbiAgICAgIHZhciBlcnJvcnMgPSBbXTtcbiAgICAgIHZhciBoZWlnaHRPZmZzZXQgPSAwO1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgdmFyIGZpcnN0VGFnID0gcGFydC5zdWJwYXJzZWRbMF07XG4gICAgICB2YXIgdGFnSGVpZ2h0ID0gMDtcbiAgICAgIGlmICgoZmlyc3RUYWcgPT09IG51bGwgfHwgZmlyc3RUYWcgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGZpcnN0VGFnLnRhZykgPT09IFwiYTp0clwiKSB7XG4gICAgICAgIHRhZ0hlaWdodCA9ICtnZXRTaW5nbGVBdHRyaWJ1dGUoZmlyc3RUYWcudmFsdWUsIFwiaFwiKTtcbiAgICAgIH1cbiAgICAgIGhlaWdodE9mZnNldCAtPSB0YWdIZWlnaHQ7XG4gICAgICB2YXIgYTE2Um93SWRPZmZzZXQgPSAwO1xuICAgICAgdmFyIGluc2lkZVBhcmFncmFwaExvb3AgPSBpc0luc2lkZVBhcmFncmFwaExvb3AocGFydCk7XG5cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG4gICAgICBmdW5jdGlvbiBsb29wT3ZlcihzY29wZSwgaSwgbGVuZ3RoKSB7XG4gICAgICAgIGhlaWdodE9mZnNldCArPSB0YWdIZWlnaHQ7XG4gICAgICAgIHZhciBzY29wZU1hbmFnZXIgPSBvcHRpb25zLnNjb3BlTWFuYWdlci5jcmVhdGVTdWJTY29wZU1hbmFnZXIoc2NvcGUsIHBhcnQudmFsdWUsIGksIHBhcnQsIGxlbmd0aCk7XG4gICAgICAgIHBhcnQuc3VicGFyc2VkLmZvckVhY2goZnVuY3Rpb24gKHBwKSB7XG4gICAgICAgICAgaWYgKGlzVGFnU3RhcnQoXCJhMTY6cm93SWRcIiwgcHApKSB7XG4gICAgICAgICAgICB2YXIgdmFsID0gK2dldFNpbmdsZUF0dHJpYnV0ZShwcC52YWx1ZSwgXCJ2YWxcIikgKyBhMTZSb3dJZE9mZnNldDtcbiAgICAgICAgICAgIGExNlJvd0lkT2Zmc2V0ID0gMTtcbiAgICAgICAgICAgIHBwLnZhbHVlID0gc2V0U2luZ2xlQXR0cmlidXRlKHBwLnZhbHVlLCBcInZhbFwiLCB2YWwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBzdWJSZW5kZXJlZCA9IG9wdGlvbnMucmVuZGVyKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgb3B0aW9ucyksIHt9LCB7XG4gICAgICAgICAgY29tcGlsZWQ6IHBhcnQuc3VicGFyc2VkLFxuICAgICAgICAgIHRhZ3M6IHt9LFxuICAgICAgICAgIHNjb3BlTWFuYWdlcjogc2NvcGVNYW5hZ2VyXG4gICAgICAgIH0pKTtcbiAgICAgICAgaWYgKHBhcnQuaGFzUGFnZUJyZWFrICYmIGkgPT09IGxlbmd0aCAtIDEgJiYgaW5zaWRlUGFyYWdyYXBoTG9vcCkge1xuICAgICAgICAgIGFkZFBhZ2VCcmVha0F0RW5kKHN1YlJlbmRlcmVkKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaXNOb3RGaXJzdCA9IHNjb3BlTWFuYWdlci5zY29wZVBhdGhJdGVtLnNvbWUoZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICByZXR1cm4gaSAhPT0gMDtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChpc05vdEZpcnN0KSB7XG4gICAgICAgICAgaWYgKHBhcnQuc2VjdFByQ291bnQgPT09IDEpIHtcbiAgICAgICAgICAgIHN1YlJlbmRlcmVkLnBhcnRzID0gZHJvcEhlYWRlckZvb3RlclJlZnMoc3ViUmVuZGVyZWQucGFydHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocGFydC5hZGRDb250aW51b3VzVHlwZSkge1xuICAgICAgICAgICAgc3ViUmVuZGVyZWQucGFydHMgPSBhZGRDb250aW51b3VzVHlwZShzdWJSZW5kZXJlZC5wYXJ0cyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHBhcnQuYWRkTmV4dFBhZ2UpIHtcbiAgICAgICAgICBzdWJSZW5kZXJlZC5wYXJ0cyA9IGFkZFNlY3Rpb25CZWZvcmUoc3ViUmVuZGVyZWQucGFydHMsIHNlbGYuc2VjdHNbcGFydC5hZGROZXh0UGFnZS5pbmRleF0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJ0LmFkZE5leHRQYWdlKSB7XG4gICAgICAgICAgYWRkUGFnZUJyZWFrQXRFbmQoc3ViUmVuZGVyZWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJ0Lmhhc1BhZ2VCcmVha0JlZ2lubmluZyAmJiBpbnNpZGVQYXJhZ3JhcGhMb29wKSB7XG4gICAgICAgICAgYWRkUGFnZUJyZWFrQXRCZWdpbm5pbmcoc3ViUmVuZGVyZWQpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgbGVuID0gc3ViUmVuZGVyZWQucGFydHMubGVuZ3RoOyBfaSA8IGxlbjsgX2krKykge1xuICAgICAgICAgIHRvdGFsVmFsdWUucHVzaChzdWJSZW5kZXJlZC5wYXJ0c1tfaV0pO1xuICAgICAgICB9XG4gICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGVycm9ycywgc3ViUmVuZGVyZWQuZXJyb3JzKTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBvcHRpb25zLnNjb3BlTWFuYWdlci5sb29wT3ZlcihwYXJ0LnZhbHVlLCBsb29wT3ZlciwgcGFydC5pbnZlcnRlZCwge1xuICAgICAgICBwYXJ0OiBwYXJ0XG4gICAgICB9KTtcbiAgICAgIC8vIGlmIHRoZSBsb29wIGlzIHNob3dpbmcgZW1wdHkgY29udGVudFxuICAgICAgaWYgKHJlc3VsdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgaWYgKHBhcnQubGFzdFBhcmFncmFwU2VjdFByKSB7XG4gICAgICAgICAgaWYgKHBhcnQucGFyYWdyYXBoTG9vcCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgdmFsdWU6IFwiPHc6cD48dzpwUHI+XCIuY29uY2F0KHBhcnQubGFzdFBhcmFncmFwU2VjdFByLCBcIjwvdzpwUHI+PC93OnA+XCIpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IFwiPC93OnQ+PC93OnI+PC93OnA+PHc6cD48dzpwUHI+XCIuY29uY2F0KHBhcnQubGFzdFBhcmFncmFwU2VjdFByLCBcIjwvdzpwUHI+PHc6cj48dzp0PlwiKVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB2YWx1ZTogZ2V0UGFnZUJyZWFrSWZBcHBsaWVzKHBhcnQpIHx8IFwiXCIsXG4gICAgICAgICAgZXJyb3JzOiBlcnJvcnNcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGlmIChoZWlnaHRPZmZzZXQgIT09IDApIHtcbiAgICAgICAgdmFyIGN5ID0gK2dldFNpbmdsZUF0dHJpYnV0ZSh0aGlzLmxhc3RFeHQudmFsdWUsIFwiY3lcIik7XG4gICAgICAgIHRoaXMubGFzdEV4dC52YWx1ZSA9IHNldFNpbmdsZUF0dHJpYnV0ZSh0aGlzLmxhc3RFeHQudmFsdWUsIFwiY3lcIiwgY3kgKyBoZWlnaHRPZmZzZXQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWU6IG9wdGlvbnMuam9pblVuY29ycnVwdCh0b3RhbFZhbHVlLCBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIG9wdGlvbnMpLCB7fSwge1xuICAgICAgICAgIGJhc2VQYXJ0OiBwYXJ0XG4gICAgICAgIH0pKSxcbiAgICAgICAgZXJyb3JzOiBlcnJvcnNcbiAgICAgIH07XG4gICAgfVxuICB9XSk7XG59KCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHdyYXBwZXIobmV3IExvb3BNb2R1bGUoKSk7XG59OyJdLCJuYW1lcyI6WyJfdHlwZW9mIiwibyIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJhcnIiLCJfYXJyYXlXaXRob3V0SG9sZXMiLCJfaXRlcmFibGVUb0FycmF5IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiX25vbkl0ZXJhYmxlU3ByZWFkIiwiVHlwZUVycm9yIiwiaXRlciIsIkFycmF5IiwiZnJvbSIsImlzQXJyYXkiLCJfYXJyYXlMaWtlVG9BcnJheSIsIm93bktleXMiLCJlIiwiciIsInQiLCJPYmplY3QiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZmlsdGVyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsInB1c2giLCJhcHBseSIsIl9vYmplY3RTcHJlYWQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJmb3JFYWNoIiwiX2RlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsIm9iaiIsImtleSIsInZhbHVlIiwiX3RvUHJvcGVydHlLZXkiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIl9zbGljZWRUb0FycmF5IiwiaSIsIl9hcnJheVdpdGhIb2xlcyIsIl9pdGVyYWJsZVRvQXJyYXlMaW1pdCIsIl9ub25JdGVyYWJsZVJlc3QiLCJtaW5MZW4iLCJuIiwidG9TdHJpbmciLCJjYWxsIiwic2xpY2UiLCJuYW1lIiwidGVzdCIsImxlbiIsImFycjIiLCJsIiwidSIsImEiLCJmIiwibmV4dCIsImRvbmUiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiX2RlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImRlc2NyaXB0b3IiLCJfY3JlYXRlQ2xhc3MiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfdG9QcmltaXRpdmUiLCJ0b1ByaW1pdGl2ZSIsIlN0cmluZyIsIk51bWJlciIsIl9yZXF1aXJlIiwicmVxdWlyZSIsImNodW5rQnkiLCJsYXN0IiwiaXNQYXJhZ3JhcGhTdGFydCIsImlzTW9kdWxlIiwiaXNQYXJhZ3JhcGhFbmQiLCJpc0NvbnRlbnQiLCJzdGFydHNXaXRoIiwiaXNUYWdFbmQiLCJpc1RhZ1N0YXJ0IiwiZ2V0U2luZ2xlQXR0cmlidXRlIiwic2V0U2luZ2xlQXR0cmlidXRlIiwiZmlsZXR5cGVzIiwid3JhcHBlciIsIm1vZHVsZU5hbWUiLCJoYXNDb250ZW50IiwicGFydHMiLCJzb21lIiwicGFydCIsImdldEZpcnN0TWVhbmluZ0Z1bFBhcnQiLCJwYXJzZWQiLCJ0eXBlIiwiaXNJbnNpZGVQYXJhZ3JhcGhMb29wIiwiZmlyc3RNZWFuaW5nZnVsUGFydCIsInN1YnBhcnNlZCIsInRhZyIsImdldFBhZ2VCcmVha0lmQXBwbGllcyIsImhhc1BhZ2VCcmVhayIsImlzRW5jbG9zZWRCeVBhcmFncmFwaHMiLCJnZXRPZmZzZXQiLCJjaHVuayIsImFkZFBhZ2VCcmVha0F0RW5kIiwic3ViUmVuZGVyZWQiLCJqIiwic3BsaWNlIiwiYWRkUGFnZUJyZWFrQXRCZWdpbm5pbmciLCJ1bnNoaWZ0IiwiaXNDb250aW51b3VzIiwiaW5kZXhPZiIsImlzTmV4dFBhZ2UiLCJhZGRTZWN0aW9uQmVmb3JlIiwic2VjdCIsImNvbmNhdCIsIm1hcCIsIl9yZWYiLCJqb2luIiwiYWRkQ29udGludW91c1R5cGUiLCJzdG9wIiwiaW5TZWN0UHIiLCJyZWR1Y2UiLCJyZXN1bHQiLCJkcm9wSGVhZGVyRm9vdGVyUmVmcyIsInRleHQiLCJoYXNJbWFnZSIsIl9yZWYyIiwiZ2V0U2VjdFByIiwiY2h1bmtzIiwiY29sbGVjdFNlY3RQciIsInNlY3RQcnMiLCJnZXRTZWN0UHJIZWFkZXJGb290ZXJDaGFuZ2VDb3VudCIsInNlY3RQckNvdW50IiwiZ2V0TGFzdFNlY3RQciIsInNlY3RQciIsIkxvb3BNb2R1bGUiLCJpblhmcm0iLCJ0b3RhbFNlY3RQciIsInByZWZpeCIsInN0YXJ0IiwiZW5kIiwiZGFzaCIsImludmVydGVkIiwib3B0aW9uc1RyYW5zZm9ybWVyIiwib3B0cyIsImRvY3h0ZW1wbGF0ZXIiLCJwcmVwYXJzZSIsIl9yZWYzIiwiY29udGVudFR5cGUiLCJtYWluIiwic2VjdHMiLCJtYXRjaGVycyIsIm1vZHVsZSIsImV4cGFuZFRvIiwibG9jYXRpb24iLCJfcmVmNCIsIl9yZWY1IiwiZ2V0VHJhaXRzIiwidHJhaXROYW1lIiwidGFncyIsIm9mZnNldCIsInBvc3RwYXJzZSIsIl9yZWY2IiwiYmFzZVBhcnQiLCJmaWxlVHlwZSIsImluZGV4IiwibEluZGV4IiwiYWRkTmV4dFBhZ2UiLCJsYXN0UGFyYWdyYXBTZWN0UHIiLCJwYXJhZ3JhcGhMb29wIiwibGV2ZWwiLCJwIiwiZmlyc3RDaHVuayIsImxhc3RDaHVuayIsImZpcnN0T2Zmc2V0IiwibGFzdE9mZnNldCIsImhhc1BhZ2VCcmVha0JlZ2lubmluZyIsInJlc29sdmUiLCJvcHRpb25zIiwic20iLCJzY29wZU1hbmFnZXIiLCJwcm9taXNlZFZhbHVlIiwiZ2V0VmFsdWVBc3luYyIsInByb21pc2VzIiwibG9vcE92ZXIiLCJzY29wZSIsImNyZWF0ZVN1YlNjb3BlTWFuYWdlciIsImNvbXBpbGVkIiwiZXJyb3JMaXN0IiwidGhlbiIsInZhbHVlcyIsIlByb21pc2UiLCJhbGwiLCJsb29wT3ZlclZhbHVlIiwiX3JlZjciLCJyZXNvbHZlZCIsImVycm9ycyIsInJlbmRlciIsInBvc2l0aW9uIiwibGFzdEV4dCIsInRvdGFsVmFsdWUiLCJoZWlnaHRPZmZzZXQiLCJzZWxmIiwiZmlyc3RUYWciLCJ0YWdIZWlnaHQiLCJhMTZSb3dJZE9mZnNldCIsImluc2lkZVBhcmFncmFwaExvb3AiLCJwcCIsInZhbCIsImlzTm90Rmlyc3QiLCJzY29wZVBhdGhJdGVtIiwiX2kiLCJjeSIsImpvaW5VbmNvcnJ1cHQiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/docxtemplater/js/modules/loop.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/docxtemplater/js/modules/rawxml.js":
/*!*********************************************************!*\
  !*** ./node_modules/docxtemplater/js/modules/rawxml.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nfunction _typeof(o) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o) {\n        return typeof o;\n    } : function(o) {\n        return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    Object.defineProperty(Constructor, \"prototype\", {\n        writable: false\n    });\n    return Constructor;\n}\nfunction _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n    if (\"object\" != _typeof(t) || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n        var i = e.call(t, r || \"default\");\n        if (\"object\" != _typeof(i)) return i;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n}\nvar traits = __webpack_require__(/*! ../traits.js */ \"(ssr)/./node_modules/docxtemplater/js/traits.js\");\nvar _require = __webpack_require__(/*! ../doc-utils.js */ \"(ssr)/./node_modules/docxtemplater/js/doc-utils.js\"), isContent = _require.isContent;\nvar _require2 = __webpack_require__(/*! ../errors.js */ \"(ssr)/./node_modules/docxtemplater/js/errors.js\"), throwRawTagShouldBeOnlyTextInParagraph = _require2.throwRawTagShouldBeOnlyTextInParagraph, getInvalidRawXMLValueException = _require2.getInvalidRawXMLValueException;\nvar moduleName = \"rawxml\";\nvar wrapper = __webpack_require__(/*! ../module-wrapper.js */ \"(ssr)/./node_modules/docxtemplater/js/module-wrapper.js\");\nfunction getInner(_ref) {\n    var part = _ref.part, left = _ref.left, right = _ref.right, postparsed = _ref.postparsed, index = _ref.index;\n    var paragraphParts = postparsed.slice(left + 1, right);\n    paragraphParts.forEach(function(p, i) {\n        if (i === index - left - 1) {\n            return;\n        }\n        if (isContent(p)) {\n            throwRawTagShouldBeOnlyTextInParagraph({\n                paragraphParts: paragraphParts,\n                part: part\n            });\n        }\n    });\n    return part;\n}\nvar RawXmlModule = /*#__PURE__*/ function() {\n    function RawXmlModule() {\n        _classCallCheck(this, RawXmlModule);\n        this.name = \"RawXmlModule\";\n        this.prefix = \"@\";\n    }\n    return _createClass(RawXmlModule, [\n        {\n            key: \"optionsTransformer\",\n            value: function optionsTransformer(options, docxtemplater) {\n                this.fileTypeConfig = docxtemplater.fileTypeConfig;\n                return options;\n            }\n        },\n        {\n            key: \"matchers\",\n            value: function matchers() {\n                return [\n                    [\n                        this.prefix,\n                        moduleName\n                    ]\n                ];\n            }\n        },\n        {\n            key: \"postparse\",\n            value: function postparse(postparsed) {\n                return traits.expandToOne(postparsed, {\n                    moduleName: moduleName,\n                    getInner: getInner,\n                    expandTo: this.fileTypeConfig.tagRawXml,\n                    error: {\n                        message: \"Raw tag not in paragraph\",\n                        id: \"raw_tag_outerxml_invalid\",\n                        explanation: function explanation(part) {\n                            return 'The tag \"'.concat(part.value, '\" is not inside a paragraph, putting raw tags inside an inline loop is disallowed.');\n                        }\n                    }\n                });\n            }\n        },\n        {\n            key: \"render\",\n            value: function render(part, options) {\n                if (part.module !== moduleName) {\n                    return null;\n                }\n                var value;\n                var errors = [];\n                try {\n                    value = options.scopeManager.getValue(part.value, {\n                        part: part\n                    });\n                    if (value == null) {\n                        value = options.nullGetter(part);\n                    }\n                } catch (e) {\n                    errors.push(e);\n                    return {\n                        errors: errors\n                    };\n                }\n                value = value ? value : \"\";\n                if (typeof value === \"string\") {\n                    return {\n                        value: value\n                    };\n                }\n                return {\n                    errors: [\n                        getInvalidRawXMLValueException({\n                            tag: part.value,\n                            value: value,\n                            offset: part.offset\n                        })\n                    ]\n                };\n            }\n        }\n    ]);\n}();\nmodule.exports = function() {\n    return wrapper(new RawXmlModule());\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/docxtemplater/js/modules/rawxml.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/docxtemplater/js/modules/render.js":
/*!*********************************************************!*\
  !*** ./node_modules/docxtemplater/js/modules/render.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nfunction _typeof(o) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o) {\n        return typeof o;\n    } : function(o) {\n        return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    Object.defineProperty(Constructor, \"prototype\", {\n        writable: false\n    });\n    return Constructor;\n}\nfunction _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n    if (\"object\" != _typeof(t) || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n        var i = e.call(t, r || \"default\");\n        if (\"object\" != _typeof(i)) return i;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n}\nvar wrapper = __webpack_require__(/*! ../module-wrapper.js */ \"(ssr)/./node_modules/docxtemplater/js/module-wrapper.js\");\nvar _require = __webpack_require__(/*! ../errors.js */ \"(ssr)/./node_modules/docxtemplater/js/errors.js\"), getScopeCompilationError = _require.getScopeCompilationError;\nvar _require2 = __webpack_require__(/*! ../doc-utils.js */ \"(ssr)/./node_modules/docxtemplater/js/doc-utils.js\"), utf8ToWord = _require2.utf8ToWord, hasCorruptCharacters = _require2.hasCorruptCharacters;\nvar _require3 = __webpack_require__(/*! ../errors.js */ \"(ssr)/./node_modules/docxtemplater/js/errors.js\"), getCorruptCharactersException = _require3.getCorruptCharactersException;\nvar _require4 = __webpack_require__(/*! ../content-types.js */ \"(ssr)/./node_modules/docxtemplater/js/content-types.js\"), settingsContentType = _require4.settingsContentType, coreContentType = _require4.coreContentType, appContentType = _require4.appContentType, customContentType = _require4.customContentType;\nvar ftprefix = {\n    docx: \"w\",\n    pptx: \"a\"\n};\nvar Render = /*#__PURE__*/ function() {\n    function Render() {\n        _classCallCheck(this, Render);\n        this.name = \"Render\";\n        this.recordRun = false;\n        this.recordedRun = [];\n    }\n    return _createClass(Render, [\n        {\n            key: \"optionsTransformer\",\n            value: function optionsTransformer(options, docxtemplater) {\n                this.parser = docxtemplater.parser;\n                this.fileType = docxtemplater.fileType;\n                return options;\n            }\n        },\n        {\n            key: \"set\",\n            value: function set(obj) {\n                if (obj.compiled) {\n                    this.compiled = obj.compiled;\n                }\n                if (obj.data != null) {\n                    this.data = obj.data;\n                }\n            }\n        },\n        {\n            key: \"getRenderedMap\",\n            value: function getRenderedMap(mapper) {\n                var _this = this;\n                return Object.keys(this.compiled).reduce(function(mapper, from) {\n                    mapper[from] = {\n                        from: from,\n                        data: _this.data\n                    };\n                    return mapper;\n                }, mapper);\n            }\n        },\n        {\n            key: \"postparse\",\n            value: function postparse(postparsed, options) {\n                var _this2 = this;\n                var errors = [];\n                postparsed.forEach(function(p) {\n                    if (p.type === \"placeholder\") {\n                        var tag = p.value;\n                        try {\n                            options.cachedParsers[p.lIndex] = _this2.parser(tag, {\n                                tag: p\n                            });\n                        } catch (rootError) {\n                            errors.push(getScopeCompilationError({\n                                tag: tag,\n                                rootError: rootError,\n                                offset: p.offset\n                            }));\n                        }\n                    }\n                });\n                return {\n                    postparsed: postparsed,\n                    errors: errors\n                };\n            }\n        },\n        {\n            key: \"render\",\n            value: function render(part, _ref) {\n                var contentType = _ref.contentType, scopeManager = _ref.scopeManager, linebreaks = _ref.linebreaks, nullGetter = _ref.nullGetter, fileType = _ref.fileType;\n                if (linebreaks && [\n                    settingsContentType,\n                    coreContentType,\n                    appContentType,\n                    customContentType\n                ].indexOf(contentType) !== -1) {\n                    // Fixes issue tested in #docprops-linebreak\n                    linebreaks = false;\n                }\n                if (linebreaks) {\n                    this.recordRuns(part);\n                }\n                if (part.type !== \"placeholder\" || part.module) {\n                    return;\n                }\n                var value;\n                try {\n                    value = scopeManager.getValue(part.value, {\n                        part: part\n                    });\n                } catch (e) {\n                    return {\n                        errors: [\n                            e\n                        ]\n                    };\n                }\n                if (value == null) {\n                    value = nullGetter(part);\n                }\n                if (hasCorruptCharacters(value)) {\n                    return {\n                        errors: [\n                            getCorruptCharactersException({\n                                tag: part.value,\n                                value: value,\n                                offset: part.offset\n                            })\n                        ]\n                    };\n                }\n                if (fileType === \"text\") {\n                    return {\n                        value: value\n                    };\n                }\n                return {\n                    value: linebreaks && typeof value === \"string\" ? this.renderLineBreaks(value) : utf8ToWord(value)\n                };\n            }\n        },\n        {\n            key: \"recordRuns\",\n            value: function recordRuns(part) {\n                if (part.tag === \"\".concat(ftprefix[this.fileType], \":r\")) {\n                    this.recordedRun = [];\n                } else if (part.tag === \"\".concat(ftprefix[this.fileType], \":rPr\")) {\n                    if (part.position === \"start\") {\n                        this.recordRun = true;\n                        this.recordedRun = [\n                            part.value\n                        ];\n                    }\n                    if (part.position === \"end\" || part.position === \"selfclosing\") {\n                        this.recordedRun.push(part.value);\n                        this.recordRun = false;\n                    }\n                } else if (this.recordRun) {\n                    this.recordedRun.push(part.value);\n                }\n            }\n        },\n        {\n            key: \"renderLineBreaks\",\n            value: function renderLineBreaks(value) {\n                var _this3 = this;\n                var p = ftprefix[this.fileType];\n                var br = this.fileType === \"docx\" ? \"<w:r><w:br/></w:r>\" : \"<a:br/>\";\n                var lines = value.split(\"\\n\");\n                var runprops = this.recordedRun.join(\"\");\n                return lines.map(function(line) {\n                    return utf8ToWord(line);\n                }).reduce(function(result, line, i) {\n                    result.push(line);\n                    if (i < lines.length - 1) {\n                        result.push(\"</\".concat(p, \":t></\").concat(p, \":r>\").concat(br, \"<\").concat(p, \":r>\").concat(runprops, \"<\").concat(p, \":t\").concat(_this3.fileType === \"docx\" ? ' xml:space=\"preserve\"' : \"\", \">\"));\n                    }\n                    return result;\n                }, []);\n            }\n        }\n    ]);\n}();\nmodule.exports = function() {\n    return wrapper(new Render());\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/docxtemplater/js/modules/render.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/docxtemplater/js/modules/space-preserve.js":
/*!*****************************************************************!*\
  !*** ./node_modules/docxtemplater/js/modules/space-preserve.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nfunction _typeof(o) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o) {\n        return typeof o;\n    } : function(o) {\n        return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    Object.defineProperty(Constructor, \"prototype\", {\n        writable: false\n    });\n    return Constructor;\n}\nfunction _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n    if (\"object\" != _typeof(t) || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n        var i = e.call(t, r || \"default\");\n        if (\"object\" != _typeof(i)) return i;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n}\nvar wrapper = __webpack_require__(/*! ../module-wrapper.js */ \"(ssr)/./node_modules/docxtemplater/js/module-wrapper.js\");\nvar _require = __webpack_require__(/*! ../doc-utils.js */ \"(ssr)/./node_modules/docxtemplater/js/doc-utils.js\"), isTextStart = _require.isTextStart, isTextEnd = _require.isTextEnd, endsWith = _require.endsWith, startsWith = _require.startsWith;\nvar wTpreserve = '<w:t xml:space=\"preserve\">';\nvar wTpreservelen = wTpreserve.length;\nvar wtEnd = \"</w:t>\";\nvar wtEndlen = wtEnd.length;\nfunction isWtStart(part) {\n    return isTextStart(part) && part.tag === \"w:t\";\n}\nfunction addXMLPreserve(chunk, index) {\n    var tag = chunk[index].value;\n    if (chunk[index + 1].value === \"</w:t>\") {\n        return tag;\n    }\n    if (tag.indexOf('xml:space=\"preserve\"') !== -1) {\n        return tag;\n    }\n    return tag.substr(0, tag.length - 1) + ' xml:space=\"preserve\">';\n}\nfunction isInsideLoop(meta, chunk) {\n    return meta && meta.basePart && chunk.length > 1;\n}\nvar SpacePreserve = /*#__PURE__*/ function() {\n    function SpacePreserve() {\n        _classCallCheck(this, SpacePreserve);\n        this.name = \"SpacePreserveModule\";\n    }\n    return _createClass(SpacePreserve, [\n        {\n            key: \"postparse\",\n            value: function postparse(postparsed, meta) {\n                var chunk = [], inTextTag = false, endLindex = 0, lastTextTag = 0;\n                function isStartingPlaceHolder(part, chunk) {\n                    return part.type === \"placeholder\" && chunk.length > 1;\n                }\n                var result = postparsed.reduce(function(postparsed, part) {\n                    if (isWtStart(part)) {\n                        inTextTag = true;\n                        lastTextTag = chunk.length;\n                    }\n                    if (!inTextTag) {\n                        postparsed.push(part);\n                        return postparsed;\n                    }\n                    chunk.push(part);\n                    if (isInsideLoop(meta, chunk)) {\n                        endLindex = meta.basePart.endLindex;\n                        chunk[0].value = addXMLPreserve(chunk, 0);\n                    }\n                    if (isStartingPlaceHolder(part, chunk)) {\n                        chunk[lastTextTag].value = addXMLPreserve(chunk, lastTextTag);\n                        endLindex = part.endLindex;\n                    }\n                    if (isTextEnd(part) && part.lIndex > endLindex) {\n                        if (endLindex !== 0) {\n                            chunk[lastTextTag].value = addXMLPreserve(chunk, lastTextTag);\n                        }\n                        Array.prototype.push.apply(postparsed, chunk);\n                        chunk = [];\n                        inTextTag = false;\n                        endLindex = 0;\n                        lastTextTag = 0;\n                    }\n                    return postparsed;\n                }, []);\n                Array.prototype.push.apply(result, chunk);\n                return result;\n            }\n        },\n        {\n            key: \"postrender\",\n            value: function postrender(parts) {\n                var lastNonEmpty = \"\";\n                var lastNonEmptyIndex = 0;\n                for(var i = 0, len = parts.length; i < len; i++){\n                    var index = i;\n                    var p = parts[i];\n                    if (p === \"\") {\n                        continue;\n                    }\n                    if (endsWith(lastNonEmpty, wTpreserve) && startsWith(p, wtEnd)) {\n                        parts[lastNonEmptyIndex] = lastNonEmpty.substr(0, lastNonEmpty.length - wTpreservelen) + \"<w:t/>\";\n                        p = p.substr(wtEndlen);\n                    }\n                    lastNonEmpty = p;\n                    lastNonEmptyIndex = index;\n                    parts[i] = p;\n                }\n                return parts;\n            }\n        }\n    ]);\n}();\nmodule.exports = function() {\n    return wrapper(new SpacePreserve());\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/docxtemplater/js/modules/space-preserve.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/docxtemplater/js/parser.js":
/*!*************************************************!*\
  !*** ./node_modules/docxtemplater/js/parser.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nfunction _typeof(o) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o) {\n        return typeof o;\n    } : function(o) {\n        return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n}\nfunction ownKeys(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n    if (\"object\" != _typeof(t) || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n        var i = e.call(t, r || \"default\");\n        if (\"object\" != _typeof(i)) return i;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n}\nfunction _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _iterableToArrayLimit(r, l) {\n    var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n    if (null != t) {\n        var e, n, i, u, a = [], f = !0, o = !1;\n        try {\n            if (i = (t = t.call(r)).next, 0 === l) {\n                if (Object(t) !== t) return;\n                f = !1;\n            } else for(; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n        } catch (r) {\n            o = !0, n = r;\n        } finally{\n            try {\n                if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n            } finally{\n                if (o) throw n;\n            }\n        }\n        return a;\n    }\n}\nfunction _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _iterableToArray(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nvar _require = __webpack_require__(/*! ./doc-utils.js */ \"(ssr)/./node_modules/docxtemplater/js/doc-utils.js\"), wordToUtf8 = _require.wordToUtf8;\nvar _require2 = __webpack_require__(/*! ./prefix-matcher.js */ \"(ssr)/./node_modules/docxtemplater/js/prefix-matcher.js\"), match = _require2.match, getValue = _require2.getValue, getValues = _require2.getValues;\nfunction getMatchers(modules, options) {\n    var matchers = [];\n    for(var i = 0, l = modules.length; i < l; i++){\n        var _module = modules[i];\n        if (_module.matchers) {\n            var mmm = _module.matchers(options);\n            if (!(mmm instanceof Array)) {\n                throw new Error(\"module matcher returns a non array\");\n            }\n            matchers.push.apply(matchers, _toConsumableArray(mmm));\n        }\n    }\n    return matchers;\n}\nfunction getMatches(matchers, placeHolderContent, options) {\n    var matches = [];\n    for(var i = 0, len = matchers.length; i < len; i++){\n        var matcher = matchers[i];\n        var _matcher = _slicedToArray(matcher, 2), prefix = _matcher[0], _module2 = _matcher[1];\n        var properties = matcher[2] || {};\n        if (options.match(prefix, placeHolderContent)) {\n            var values = options.getValues(prefix, placeHolderContent);\n            if (typeof properties === \"function\") {\n                properties = properties(values);\n            }\n            if (!properties.value) {\n                var _values = _slicedToArray(values, 2);\n                properties.value = _values[1];\n            }\n            matches.push(_objectSpread({\n                type: \"placeholder\",\n                prefix: prefix,\n                module: _module2,\n                onMatch: properties.onMatch,\n                priority: properties.priority\n            }, properties));\n        }\n    }\n    return matches;\n}\nfunction moduleParse(placeHolderContent, options) {\n    var modules = options.modules;\n    var startOffset = options.startOffset;\n    var endLindex = options.lIndex;\n    var moduleParsed;\n    options.offset = startOffset;\n    options.match = match;\n    options.getValue = getValue;\n    options.getValues = getValues;\n    var matchers = getMatchers(modules, options);\n    var matches = getMatches(matchers, placeHolderContent, options);\n    if (matches.length > 0) {\n        var bestMatch = null;\n        matches.forEach(function(match) {\n            match.priority = match.priority || -match.value.length;\n            if (!bestMatch || match.priority > bestMatch.priority) {\n                bestMatch = match;\n            }\n        });\n        bestMatch.offset = startOffset;\n        delete bestMatch.priority;\n        bestMatch.endLindex = endLindex;\n        bestMatch.lIndex = endLindex;\n        bestMatch.raw = placeHolderContent;\n        if (bestMatch.onMatch) {\n            bestMatch.onMatch(bestMatch);\n        }\n        delete bestMatch.onMatch;\n        delete bestMatch.prefix;\n        return bestMatch;\n    }\n    for(var i = 0, l = modules.length; i < l; i++){\n        var _module3 = modules[i];\n        moduleParsed = _module3.parse(placeHolderContent, options);\n        if (moduleParsed) {\n            moduleParsed.offset = startOffset;\n            moduleParsed.endLindex = endLindex;\n            moduleParsed.lIndex = endLindex;\n            moduleParsed.raw = placeHolderContent;\n            return moduleParsed;\n        }\n    }\n    return {\n        type: \"placeholder\",\n        value: placeHolderContent,\n        offset: startOffset,\n        endLindex: endLindex,\n        lIndex: endLindex\n    };\n}\nvar parser = {\n    preparse: function preparse(parsed, modules, options) {\n        function preparse(parsed, options) {\n            return modules.forEach(function(module1) {\n                module1.preparse(parsed, options);\n            });\n        }\n        return {\n            preparsed: preparse(parsed, options)\n        };\n    },\n    parse: function parse(lexed, modules, options) {\n        var inPlaceHolder = false;\n        var placeHolderContent = \"\";\n        var startOffset;\n        var tailParts = [];\n        var droppedTags = options.fileTypeConfig.droppedTagsInsidePlaceholder || [];\n        return lexed.reduce(function lexedToParsed(parsed, token) {\n            if (token.type === \"delimiter\") {\n                inPlaceHolder = token.position === \"start\";\n                if (token.position === \"end\") {\n                    options.parse = function(placeHolderContent) {\n                        return moduleParse(placeHolderContent, _objectSpread(_objectSpread(_objectSpread({}, options), token), {}, {\n                            startOffset: startOffset,\n                            modules: modules\n                        }));\n                    };\n                    parsed.push(options.parse(wordToUtf8(placeHolderContent)));\n                    Array.prototype.push.apply(parsed, tailParts);\n                    tailParts = [];\n                }\n                if (token.position === \"start\") {\n                    tailParts = [];\n                    startOffset = token.offset;\n                }\n                placeHolderContent = \"\";\n                return parsed;\n            }\n            if (!inPlaceHolder) {\n                parsed.push(token);\n                return parsed;\n            }\n            if (token.type !== \"content\" || token.position !== \"insidetag\") {\n                if (droppedTags.indexOf(token.tag) !== -1) {\n                    return parsed;\n                }\n                tailParts.push(token);\n                return parsed;\n            }\n            placeHolderContent += token.value;\n            return parsed;\n        }, []);\n    },\n    postparse: function postparse(postparsed, modules, options) {\n        function getTraits(traitName, postparsed) {\n            return modules.map(function(module1) {\n                return module1.getTraits(traitName, postparsed);\n            });\n        }\n        var errors = [];\n        function _postparse(postparsed, options) {\n            return modules.reduce(function(postparsed, module1) {\n                var r = module1.postparse(postparsed, _objectSpread(_objectSpread({}, options), {}, {\n                    postparse: function postparse(parsed, opts) {\n                        return _postparse(parsed, _objectSpread(_objectSpread({}, options), opts));\n                    },\n                    getTraits: getTraits\n                }));\n                if (r == null) {\n                    return postparsed;\n                }\n                if (r.errors) {\n                    Array.prototype.push.apply(errors, r.errors);\n                    return r.postparsed;\n                }\n                return r;\n            }, postparsed);\n        }\n        return {\n            postparsed: _postparse(postparsed, options),\n            errors: errors\n        };\n    }\n};\nmodule.exports = parser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/docxtemplater/js/parser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/docxtemplater/js/postrender.js":
/*!*****************************************************!*\
  !*** ./node_modules/docxtemplater/js/postrender.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("\n// convert string to array (typed, when possible)\n// Stryker disable all : because this is a utility function that was copied\n// from\n// https://github.com/open-xml-templating/pizzip/blob/34a840553c604980859dc6d0dcd1f89b6e5527b3/es6/utf8.js#L33\n// eslint-disable-next-line complexity\nfunction string2buf(str) {\n    var c, c2, mPos, i, bufLen = 0;\n    var strLen = str.length;\n    // count binary size\n    for(mPos = 0; mPos < strLen; mPos++){\n        c = str.charCodeAt(mPos);\n        if ((c & 0xfc00) === 0xd800 && mPos + 1 < strLen) {\n            c2 = str.charCodeAt(mPos + 1);\n            if ((c2 & 0xfc00) === 0xdc00) {\n                c = 0x10000 + (c - 0xd800 << 10) + (c2 - 0xdc00);\n                mPos++;\n            }\n        }\n        bufLen += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n    }\n    // allocate buffer\n    var buf = new Uint8Array(bufLen);\n    // convert\n    for(i = 0, mPos = 0; i < bufLen; mPos++){\n        c = str.charCodeAt(mPos);\n        if ((c & 0xfc00) === 0xd800 && mPos + 1 < strLen) {\n            c2 = str.charCodeAt(mPos + 1);\n            if ((c2 & 0xfc00) === 0xdc00) {\n                c = 0x10000 + (c - 0xd800 << 10) + (c2 - 0xdc00);\n                mPos++;\n            }\n        }\n        if (c < 0x80) {\n            /* one byte */ buf[i++] = c;\n        } else if (c < 0x800) {\n            /* two bytes */ buf[i++] = 0xc0 | c >>> 6;\n            buf[i++] = 0x80 | c & 0x3f;\n        } else if (c < 0x10000) {\n            /* three bytes */ buf[i++] = 0xe0 | c >>> 12;\n            buf[i++] = 0x80 | c >>> 6 & 0x3f;\n            buf[i++] = 0x80 | c & 0x3f;\n        } else {\n            /* four bytes */ buf[i++] = 0xf0 | c >>> 18;\n            buf[i++] = 0x80 | c >>> 12 & 0x3f;\n            buf[i++] = 0x80 | c >>> 6 & 0x3f;\n            buf[i++] = 0x80 | c & 0x3f;\n        }\n    }\n    return buf;\n}\n// Stryker restore all\nfunction postrender(parts, options) {\n    for(var i = 0, l = options.modules.length; i < l; i++){\n        var _module = options.modules[i];\n        parts = _module.postrender(parts, options);\n    }\n    var fullLength = 0;\n    var newParts = options.joinUncorrupt(parts, options);\n    var longStr = \"\";\n    var lenStr = 0;\n    var maxCompact = 65536;\n    var uintArrays = [];\n    for(var _i = 0, len = newParts.length; _i < len; _i++){\n        var part = newParts[_i];\n        // This condition should be hit in the integration test at :\n        // it(\"should not regress with long file (hit maxCompact value of 65536)\", function () {\n        // Stryker disable all : because this is an optimisation that won't make any tests fail\n        if (part.length + lenStr > maxCompact) {\n            var _arr = string2buf(longStr);\n            fullLength += _arr.length;\n            uintArrays.push(_arr);\n            longStr = \"\";\n        }\n        // Stryker restore all\n        longStr += part;\n        lenStr += part.length;\n        delete newParts[_i];\n    }\n    var arr = string2buf(longStr);\n    fullLength += arr.length;\n    uintArrays.push(arr);\n    var array = new Uint8Array(fullLength);\n    var j = 0;\n    // Stryker disable all : because this is an optimisation that won't make any tests fail\n    uintArrays.forEach(function(buf) {\n        for(var _i2 = 0; _i2 < buf.length; ++_i2){\n            array[_i2 + j] = buf[_i2];\n        }\n        j += buf.length;\n    });\n    // Stryker restore all\n    return array;\n}\nmodule.exports = postrender;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/docxtemplater/js/postrender.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/docxtemplater/js/prefix-matcher.js":
/*!*********************************************************!*\
  !*** ./node_modules/docxtemplater/js/prefix-matcher.js ***!
  \*********************************************************/
/***/ ((module) => {

eval("\nfunction _typeof(o) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o) {\n        return typeof o;\n    } : function(o) {\n        return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n}\nvar nbspRegex = new RegExp(String.fromCharCode(160), \"g\");\nfunction replaceNbsps(str) {\n    return str.replace(nbspRegex, \" \");\n}\nfunction match(condition, placeHolderContent) {\n    var type = _typeof(condition);\n    if (type === \"string\") {\n        return replaceNbsps(placeHolderContent.substr(0, condition.length)) === condition;\n    }\n    if (condition instanceof RegExp) {\n        return condition.test(replaceNbsps(placeHolderContent));\n    }\n    if (type === \"function\") {\n        return !!condition(placeHolderContent);\n    }\n}\nfunction getValue(condition, placeHolderContent) {\n    var type = _typeof(condition);\n    if (type === \"string\") {\n        return replaceNbsps(placeHolderContent).substr(condition.length);\n    }\n    if (condition instanceof RegExp) {\n        return replaceNbsps(placeHolderContent).match(condition)[1];\n    }\n    if (type === \"function\") {\n        return condition(placeHolderContent);\n    }\n}\nfunction getValues(condition, placeHolderContent) {\n    var type = _typeof(condition);\n    if (type === \"string\") {\n        return [\n            placeHolderContent,\n            replaceNbsps(placeHolderContent).substr(condition.length)\n        ];\n    }\n    if (condition instanceof RegExp) {\n        return replaceNbsps(placeHolderContent).match(condition);\n    }\n    if (type === \"function\") {\n        return [\n            placeHolderContent,\n            condition(placeHolderContent)\n        ];\n    }\n}\nmodule.exports = {\n    match: match,\n    getValue: getValue,\n    getValues: getValues\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZG9jeHRlbXBsYXRlci9qcy9wcmVmaXgtbWF0Y2hlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViLFNBQVNBLFFBQVFDLENBQUM7SUFBSTtJQUEyQixPQUFPRCxVQUFVLGNBQWMsT0FBT0UsVUFBVSxZQUFZLE9BQU9BLE9BQU9DLFFBQVEsR0FBRyxTQUFVRixDQUFDO1FBQUksT0FBTyxPQUFPQTtJQUFHLElBQUksU0FBVUEsQ0FBQztRQUFJLE9BQU9BLEtBQUssY0FBYyxPQUFPQyxVQUFVRCxFQUFFRyxXQUFXLEtBQUtGLFVBQVVELE1BQU1DLE9BQU9HLFNBQVMsR0FBRyxXQUFXLE9BQU9KO0lBQUcsR0FBR0QsUUFBUUM7QUFBSTtBQUM3VCxJQUFJSyxZQUFZLElBQUlDLE9BQU9DLE9BQU9DLFlBQVksQ0FBQyxNQUFNO0FBQ3JELFNBQVNDLGFBQWFDLEdBQUc7SUFDdkIsT0FBT0EsSUFBSUMsT0FBTyxDQUFDTixXQUFXO0FBQ2hDO0FBQ0EsU0FBU08sTUFBTUMsU0FBUyxFQUFFQyxrQkFBa0I7SUFDMUMsSUFBSUMsT0FBT2hCLFFBQVFjO0lBQ25CLElBQUlFLFNBQVMsVUFBVTtRQUNyQixPQUFPTixhQUFhSyxtQkFBbUJFLE1BQU0sQ0FBQyxHQUFHSCxVQUFVSSxNQUFNLE9BQU9KO0lBQzFFO0lBQ0EsSUFBSUEscUJBQXFCUCxRQUFRO1FBQy9CLE9BQU9PLFVBQVVLLElBQUksQ0FBQ1QsYUFBYUs7SUFDckM7SUFDQSxJQUFJQyxTQUFTLFlBQVk7UUFDdkIsT0FBTyxDQUFDLENBQUNGLFVBQVVDO0lBQ3JCO0FBQ0Y7QUFDQSxTQUFTSyxTQUFTTixTQUFTLEVBQUVDLGtCQUFrQjtJQUM3QyxJQUFJQyxPQUFPaEIsUUFBUWM7SUFDbkIsSUFBSUUsU0FBUyxVQUFVO1FBQ3JCLE9BQU9OLGFBQWFLLG9CQUFvQkUsTUFBTSxDQUFDSCxVQUFVSSxNQUFNO0lBQ2pFO0lBQ0EsSUFBSUoscUJBQXFCUCxRQUFRO1FBQy9CLE9BQU9HLGFBQWFLLG9CQUFvQkYsS0FBSyxDQUFDQyxVQUFVLENBQUMsRUFBRTtJQUM3RDtJQUNBLElBQUlFLFNBQVMsWUFBWTtRQUN2QixPQUFPRixVQUFVQztJQUNuQjtBQUNGO0FBQ0EsU0FBU00sVUFBVVAsU0FBUyxFQUFFQyxrQkFBa0I7SUFDOUMsSUFBSUMsT0FBT2hCLFFBQVFjO0lBQ25CLElBQUlFLFNBQVMsVUFBVTtRQUNyQixPQUFPO1lBQUNEO1lBQW9CTCxhQUFhSyxvQkFBb0JFLE1BQU0sQ0FBQ0gsVUFBVUksTUFBTTtTQUFFO0lBQ3hGO0lBQ0EsSUFBSUoscUJBQXFCUCxRQUFRO1FBQy9CLE9BQU9HLGFBQWFLLG9CQUFvQkYsS0FBSyxDQUFDQztJQUNoRDtJQUNBLElBQUlFLFNBQVMsWUFBWTtRQUN2QixPQUFPO1lBQUNEO1lBQW9CRCxVQUFVQztTQUFvQjtJQUM1RDtBQUNGO0FBQ0FPLE9BQU9DLE9BQU8sR0FBRztJQUNmVixPQUFPQTtJQUNQTyxVQUFVQTtJQUNWQyxXQUFXQTtBQUNiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVkLXBsYW5uZXItZnJvbnQtZW5kLy4vbm9kZV9tb2R1bGVzL2RvY3h0ZW1wbGF0ZXIvanMvcHJlZml4LW1hdGNoZXIuanM/NzM3NyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3R5cGVvZihvKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykgeyByZXR1cm4gdHlwZW9mIG87IH0gOiBmdW5jdGlvbiAobykgeyByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbzsgfSwgX3R5cGVvZihvKTsgfVxudmFyIG5ic3BSZWdleCA9IG5ldyBSZWdFeHAoU3RyaW5nLmZyb21DaGFyQ29kZSgxNjApLCBcImdcIik7XG5mdW5jdGlvbiByZXBsYWNlTmJzcHMoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZShuYnNwUmVnZXgsIFwiIFwiKTtcbn1cbmZ1bmN0aW9uIG1hdGNoKGNvbmRpdGlvbiwgcGxhY2VIb2xkZXJDb250ZW50KSB7XG4gIHZhciB0eXBlID0gX3R5cGVvZihjb25kaXRpb24pO1xuICBpZiAodHlwZSA9PT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiByZXBsYWNlTmJzcHMocGxhY2VIb2xkZXJDb250ZW50LnN1YnN0cigwLCBjb25kaXRpb24ubGVuZ3RoKSkgPT09IGNvbmRpdGlvbjtcbiAgfVxuICBpZiAoY29uZGl0aW9uIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgcmV0dXJuIGNvbmRpdGlvbi50ZXN0KHJlcGxhY2VOYnNwcyhwbGFjZUhvbGRlckNvbnRlbnQpKTtcbiAgfVxuICBpZiAodHlwZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgcmV0dXJuICEhY29uZGl0aW9uKHBsYWNlSG9sZGVyQ29udGVudCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldFZhbHVlKGNvbmRpdGlvbiwgcGxhY2VIb2xkZXJDb250ZW50KSB7XG4gIHZhciB0eXBlID0gX3R5cGVvZihjb25kaXRpb24pO1xuICBpZiAodHlwZSA9PT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiByZXBsYWNlTmJzcHMocGxhY2VIb2xkZXJDb250ZW50KS5zdWJzdHIoY29uZGl0aW9uLmxlbmd0aCk7XG4gIH1cbiAgaWYgKGNvbmRpdGlvbiBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgIHJldHVybiByZXBsYWNlTmJzcHMocGxhY2VIb2xkZXJDb250ZW50KS5tYXRjaChjb25kaXRpb24pWzFdO1xuICB9XG4gIGlmICh0eXBlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4gY29uZGl0aW9uKHBsYWNlSG9sZGVyQ29udGVudCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldFZhbHVlcyhjb25kaXRpb24sIHBsYWNlSG9sZGVyQ29udGVudCkge1xuICB2YXIgdHlwZSA9IF90eXBlb2YoY29uZGl0aW9uKTtcbiAgaWYgKHR5cGUgPT09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm4gW3BsYWNlSG9sZGVyQ29udGVudCwgcmVwbGFjZU5ic3BzKHBsYWNlSG9sZGVyQ29udGVudCkuc3Vic3RyKGNvbmRpdGlvbi5sZW5ndGgpXTtcbiAgfVxuICBpZiAoY29uZGl0aW9uIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgcmV0dXJuIHJlcGxhY2VOYnNwcyhwbGFjZUhvbGRlckNvbnRlbnQpLm1hdGNoKGNvbmRpdGlvbik7XG4gIH1cbiAgaWYgKHR5cGUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHJldHVybiBbcGxhY2VIb2xkZXJDb250ZW50LCBjb25kaXRpb24ocGxhY2VIb2xkZXJDb250ZW50KV07XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0ge1xuICBtYXRjaDogbWF0Y2gsXG4gIGdldFZhbHVlOiBnZXRWYWx1ZSxcbiAgZ2V0VmFsdWVzOiBnZXRWYWx1ZXNcbn07Il0sIm5hbWVzIjpbIl90eXBlb2YiLCJvIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsIm5ic3BSZWdleCIsIlJlZ0V4cCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInJlcGxhY2VOYnNwcyIsInN0ciIsInJlcGxhY2UiLCJtYXRjaCIsImNvbmRpdGlvbiIsInBsYWNlSG9sZGVyQ29udGVudCIsInR5cGUiLCJzdWJzdHIiLCJsZW5ndGgiLCJ0ZXN0IiwiZ2V0VmFsdWUiLCJnZXRWYWx1ZXMiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/docxtemplater/js/prefix-matcher.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/docxtemplater/js/render.js":
/*!*************************************************!*\
  !*** ./node_modules/docxtemplater/js/render.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar _require = __webpack_require__(/*! ./errors.js */ \"(ssr)/./node_modules/docxtemplater/js/errors.js\"), throwUnimplementedTagType = _require.throwUnimplementedTagType, XTScopeParserError = _require.XTScopeParserError;\nvar getResolvedId = __webpack_require__(/*! ./get-resolved-id.js */ \"(ssr)/./node_modules/docxtemplater/js/get-resolved-id.js\");\nfunction moduleRender(part, options) {\n    var moduleRendered;\n    for(var i = 0, l = options.modules.length; i < l; i++){\n        var _module = options.modules[i];\n        moduleRendered = _module.render(part, options);\n        if (moduleRendered) {\n            return moduleRendered;\n        }\n    }\n    return false;\n}\nfunction render(options) {\n    var baseNullGetter = options.baseNullGetter;\n    var compiled = options.compiled, scopeManager = options.scopeManager;\n    options.nullGetter = function(part, sm) {\n        return baseNullGetter(part, sm || scopeManager);\n    };\n    var errors = [];\n    var parts = compiled.map(function(part, i) {\n        options.index = i;\n        options.resolvedId = getResolvedId(part, options);\n        var moduleRendered;\n        try {\n            moduleRendered = moduleRender(part, options);\n        } catch (e) {\n            if (e instanceof XTScopeParserError) {\n                errors.push(e);\n                return part;\n            }\n            throw e;\n        }\n        if (moduleRendered) {\n            if (moduleRendered.errors) {\n                Array.prototype.push.apply(errors, moduleRendered.errors);\n            }\n            return moduleRendered;\n        }\n        if (part.type === \"content\" || part.type === \"tag\") {\n            return part;\n        }\n        throwUnimplementedTagType(part, i);\n    }).reduce(function(parts, _ref) {\n        var value = _ref.value;\n        if (value instanceof Array) {\n            for(var i = 0, len = value.length; i < len; i++){\n                parts.push(value[i]);\n            }\n        } else if (value) {\n            parts.push(value);\n        }\n        return parts;\n    }, []);\n    return {\n        errors: errors,\n        parts: parts\n    };\n}\nmodule.exports = render;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZG9jeHRlbXBsYXRlci9qcy9yZW5kZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYixJQUFJQSxXQUFXQyxtQkFBT0EsQ0FBQyxvRUFBYSxHQUNsQ0MsNEJBQTRCRixTQUFTRSx5QkFBeUIsRUFDOURDLHFCQUFxQkgsU0FBU0csa0JBQWtCO0FBQ2xELElBQUlDLGdCQUFnQkgsbUJBQU9BLENBQUMsc0ZBQXNCO0FBQ2xELFNBQVNJLGFBQWFDLElBQUksRUFBRUMsT0FBTztJQUNqQyxJQUFJQztJQUNKLElBQUssSUFBSUMsSUFBSSxHQUFHQyxJQUFJSCxRQUFRSSxPQUFPLENBQUNDLE1BQU0sRUFBRUgsSUFBSUMsR0FBR0QsSUFBSztRQUN0RCxJQUFJSSxVQUFVTixRQUFRSSxPQUFPLENBQUNGLEVBQUU7UUFDaENELGlCQUFpQkssUUFBUUMsTUFBTSxDQUFDUixNQUFNQztRQUN0QyxJQUFJQyxnQkFBZ0I7WUFDbEIsT0FBT0E7UUFDVDtJQUNGO0lBQ0EsT0FBTztBQUNUO0FBQ0EsU0FBU00sT0FBT1AsT0FBTztJQUNyQixJQUFJUSxpQkFBaUJSLFFBQVFRLGNBQWM7SUFDM0MsSUFBSUMsV0FBV1QsUUFBUVMsUUFBUSxFQUM3QkMsZUFBZVYsUUFBUVUsWUFBWTtJQUNyQ1YsUUFBUVcsVUFBVSxHQUFHLFNBQVVaLElBQUksRUFBRWEsRUFBRTtRQUNyQyxPQUFPSixlQUFlVCxNQUFNYSxNQUFNRjtJQUNwQztJQUNBLElBQUlHLFNBQVMsRUFBRTtJQUNmLElBQUlDLFFBQVFMLFNBQVNNLEdBQUcsQ0FBQyxTQUFVaEIsSUFBSSxFQUFFRyxDQUFDO1FBQ3hDRixRQUFRZ0IsS0FBSyxHQUFHZDtRQUNoQkYsUUFBUWlCLFVBQVUsR0FBR3BCLGNBQWNFLE1BQU1DO1FBQ3pDLElBQUlDO1FBQ0osSUFBSTtZQUNGQSxpQkFBaUJILGFBQWFDLE1BQU1DO1FBQ3RDLEVBQUUsT0FBT2tCLEdBQUc7WUFDVixJQUFJQSxhQUFhdEIsb0JBQW9CO2dCQUNuQ2lCLE9BQU9NLElBQUksQ0FBQ0Q7Z0JBQ1osT0FBT25CO1lBQ1Q7WUFDQSxNQUFNbUI7UUFDUjtRQUNBLElBQUlqQixnQkFBZ0I7WUFDbEIsSUFBSUEsZUFBZVksTUFBTSxFQUFFO2dCQUN6Qk8sTUFBTUMsU0FBUyxDQUFDRixJQUFJLENBQUNHLEtBQUssQ0FBQ1QsUUFBUVosZUFBZVksTUFBTTtZQUMxRDtZQUNBLE9BQU9aO1FBQ1Q7UUFDQSxJQUFJRixLQUFLd0IsSUFBSSxLQUFLLGFBQWF4QixLQUFLd0IsSUFBSSxLQUFLLE9BQU87WUFDbEQsT0FBT3hCO1FBQ1Q7UUFDQUosMEJBQTBCSSxNQUFNRztJQUNsQyxHQUFHc0IsTUFBTSxDQUFDLFNBQVVWLEtBQUssRUFBRVcsSUFBSTtRQUM3QixJQUFJQyxRQUFRRCxLQUFLQyxLQUFLO1FBQ3RCLElBQUlBLGlCQUFpQk4sT0FBTztZQUMxQixJQUFLLElBQUlsQixJQUFJLEdBQUd5QixNQUFNRCxNQUFNckIsTUFBTSxFQUFFSCxJQUFJeUIsS0FBS3pCLElBQUs7Z0JBQ2hEWSxNQUFNSyxJQUFJLENBQUNPLEtBQUssQ0FBQ3hCLEVBQUU7WUFDckI7UUFDRixPQUFPLElBQUl3QixPQUFPO1lBQ2hCWixNQUFNSyxJQUFJLENBQUNPO1FBQ2I7UUFDQSxPQUFPWjtJQUNULEdBQUcsRUFBRTtJQUNMLE9BQU87UUFDTEQsUUFBUUE7UUFDUkMsT0FBT0E7SUFDVDtBQUNGO0FBQ0FjLE9BQU9DLE9BQU8sR0FBR3RCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVkLXBsYW5uZXItZnJvbnQtZW5kLy4vbm9kZV9tb2R1bGVzL2RvY3h0ZW1wbGF0ZXIvanMvcmVuZGVyLmpzP2Y4YTEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoXCIuL2Vycm9ycy5qc1wiKSxcbiAgdGhyb3dVbmltcGxlbWVudGVkVGFnVHlwZSA9IF9yZXF1aXJlLnRocm93VW5pbXBsZW1lbnRlZFRhZ1R5cGUsXG4gIFhUU2NvcGVQYXJzZXJFcnJvciA9IF9yZXF1aXJlLlhUU2NvcGVQYXJzZXJFcnJvcjtcbnZhciBnZXRSZXNvbHZlZElkID0gcmVxdWlyZShcIi4vZ2V0LXJlc29sdmVkLWlkLmpzXCIpO1xuZnVuY3Rpb24gbW9kdWxlUmVuZGVyKHBhcnQsIG9wdGlvbnMpIHtcbiAgdmFyIG1vZHVsZVJlbmRlcmVkO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IG9wdGlvbnMubW9kdWxlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIgX21vZHVsZSA9IG9wdGlvbnMubW9kdWxlc1tpXTtcbiAgICBtb2R1bGVSZW5kZXJlZCA9IF9tb2R1bGUucmVuZGVyKHBhcnQsIG9wdGlvbnMpO1xuICAgIGlmIChtb2R1bGVSZW5kZXJlZCkge1xuICAgICAgcmV0dXJuIG1vZHVsZVJlbmRlcmVkO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiByZW5kZXIob3B0aW9ucykge1xuICB2YXIgYmFzZU51bGxHZXR0ZXIgPSBvcHRpb25zLmJhc2VOdWxsR2V0dGVyO1xuICB2YXIgY29tcGlsZWQgPSBvcHRpb25zLmNvbXBpbGVkLFxuICAgIHNjb3BlTWFuYWdlciA9IG9wdGlvbnMuc2NvcGVNYW5hZ2VyO1xuICBvcHRpb25zLm51bGxHZXR0ZXIgPSBmdW5jdGlvbiAocGFydCwgc20pIHtcbiAgICByZXR1cm4gYmFzZU51bGxHZXR0ZXIocGFydCwgc20gfHwgc2NvcGVNYW5hZ2VyKTtcbiAgfTtcbiAgdmFyIGVycm9ycyA9IFtdO1xuICB2YXIgcGFydHMgPSBjb21waWxlZC5tYXAoZnVuY3Rpb24gKHBhcnQsIGkpIHtcbiAgICBvcHRpb25zLmluZGV4ID0gaTtcbiAgICBvcHRpb25zLnJlc29sdmVkSWQgPSBnZXRSZXNvbHZlZElkKHBhcnQsIG9wdGlvbnMpO1xuICAgIHZhciBtb2R1bGVSZW5kZXJlZDtcbiAgICB0cnkge1xuICAgICAgbW9kdWxlUmVuZGVyZWQgPSBtb2R1bGVSZW5kZXIocGFydCwgb3B0aW9ucyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKGUgaW5zdGFuY2VvZiBYVFNjb3BlUGFyc2VyRXJyb3IpIHtcbiAgICAgICAgZXJyb3JzLnB1c2goZSk7XG4gICAgICAgIHJldHVybiBwYXJ0O1xuICAgICAgfVxuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gICAgaWYgKG1vZHVsZVJlbmRlcmVkKSB7XG4gICAgICBpZiAobW9kdWxlUmVuZGVyZWQuZXJyb3JzKSB7XG4gICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGVycm9ycywgbW9kdWxlUmVuZGVyZWQuZXJyb3JzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtb2R1bGVSZW5kZXJlZDtcbiAgICB9XG4gICAgaWYgKHBhcnQudHlwZSA9PT0gXCJjb250ZW50XCIgfHwgcGFydC50eXBlID09PSBcInRhZ1wiKSB7XG4gICAgICByZXR1cm4gcGFydDtcbiAgICB9XG4gICAgdGhyb3dVbmltcGxlbWVudGVkVGFnVHlwZShwYXJ0LCBpKTtcbiAgfSkucmVkdWNlKGZ1bmN0aW9uIChwYXJ0cywgX3JlZikge1xuICAgIHZhciB2YWx1ZSA9IF9yZWYudmFsdWU7XG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB2YWx1ZS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBwYXJ0cy5wdXNoKHZhbHVlW2ldKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHZhbHVlKSB7XG4gICAgICBwYXJ0cy5wdXNoKHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnRzO1xuICB9LCBbXSk7XG4gIHJldHVybiB7XG4gICAgZXJyb3JzOiBlcnJvcnMsXG4gICAgcGFydHM6IHBhcnRzXG4gIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IHJlbmRlcjsiXSwibmFtZXMiOlsiX3JlcXVpcmUiLCJyZXF1aXJlIiwidGhyb3dVbmltcGxlbWVudGVkVGFnVHlwZSIsIlhUU2NvcGVQYXJzZXJFcnJvciIsImdldFJlc29sdmVkSWQiLCJtb2R1bGVSZW5kZXIiLCJwYXJ0Iiwib3B0aW9ucyIsIm1vZHVsZVJlbmRlcmVkIiwiaSIsImwiLCJtb2R1bGVzIiwibGVuZ3RoIiwiX21vZHVsZSIsInJlbmRlciIsImJhc2VOdWxsR2V0dGVyIiwiY29tcGlsZWQiLCJzY29wZU1hbmFnZXIiLCJudWxsR2V0dGVyIiwic20iLCJlcnJvcnMiLCJwYXJ0cyIsIm1hcCIsImluZGV4IiwicmVzb2x2ZWRJZCIsImUiLCJwdXNoIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJhcHBseSIsInR5cGUiLCJyZWR1Y2UiLCJfcmVmIiwidmFsdWUiLCJsZW4iLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/docxtemplater/js/render.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/docxtemplater/js/resolve.js":
/*!**************************************************!*\
  !*** ./node_modules/docxtemplater/js/resolve.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nfunction _typeof(o) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o) {\n        return typeof o;\n    } : function(o) {\n        return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n}\nfunction _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _iterableToArray(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction ownKeys(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n    if (\"object\" != _typeof(t) || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n        var i = e.call(t, r || \"default\");\n        if (\"object\" != _typeof(i)) return i;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n}\nvar getResolvedId = __webpack_require__(/*! ./get-resolved-id.js */ \"(ssr)/./node_modules/docxtemplater/js/get-resolved-id.js\");\nfunction moduleResolve(part, options) {\n    var moduleResolved;\n    for(var i = 0, l = options.modules.length; i < l; i++){\n        var _module = options.modules[i];\n        moduleResolved = _module.resolve(part, options);\n        if (moduleResolved) {\n            return moduleResolved;\n        }\n    }\n    return false;\n}\nfunction resolve(options) {\n    var resolved = [];\n    var baseNullGetter = options.baseNullGetter;\n    var compiled = options.compiled, scopeManager = options.scopeManager;\n    options.nullGetter = function(part, sm) {\n        return baseNullGetter(part, sm || scopeManager);\n    };\n    options.resolved = resolved;\n    var errors = [];\n    return Promise.all(compiled.filter(function(part) {\n        return [\n            \"content\",\n            \"tag\"\n        ].indexOf(part.type) === -1;\n    }).reduce(function(promises, part) {\n        var moduleResolved = moduleResolve(part, _objectSpread(_objectSpread({}, options), {}, {\n            resolvedId: getResolvedId(part, options)\n        }));\n        var result;\n        if (moduleResolved) {\n            result = moduleResolved.then(function(value) {\n                resolved.push({\n                    tag: part.value,\n                    lIndex: part.lIndex,\n                    value: value\n                });\n            });\n        } else if (part.type === \"placeholder\") {\n            result = scopeManager.getValueAsync(part.value, {\n                part: part\n            }).then(function(value) {\n                return value == null ? options.nullGetter(part) : value;\n            }).then(function(value) {\n                resolved.push({\n                    tag: part.value,\n                    lIndex: part.lIndex,\n                    value: value\n                });\n                return value;\n            });\n        } else {\n            return;\n        }\n        promises.push(result[\"catch\"](function(e) {\n            if (e instanceof Array) {\n                errors.push.apply(errors, _toConsumableArray(e));\n            } else {\n                errors.push(e);\n            }\n        }));\n        return promises;\n    }, [])).then(function() {\n        return {\n            errors: errors,\n            resolved: resolved\n        };\n    });\n}\nmodule.exports = resolve;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/docxtemplater/js/resolve.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/docxtemplater/js/scope-manager.js":
/*!********************************************************!*\
  !*** ./node_modules/docxtemplater/js/scope-manager.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nfunction _typeof(o) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o) {\n        return typeof o;\n    } : function(o) {\n        return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    Object.defineProperty(Constructor, \"prototype\", {\n        writable: false\n    });\n    return Constructor;\n}\nfunction _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n    if (\"object\" != _typeof(t) || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n        var i = e.call(t, r || \"default\");\n        if (\"object\" != _typeof(i)) return i;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n}\nvar _require = __webpack_require__(/*! ./errors.js */ \"(ssr)/./node_modules/docxtemplater/js/errors.js\"), getScopeParserExecutionError = _require.getScopeParserExecutionError;\nvar _require2 = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/docxtemplater/js/utils.js\"), last = _require2.last;\nvar _require3 = __webpack_require__(/*! ./doc-utils.js */ \"(ssr)/./node_modules/docxtemplater/js/doc-utils.js\"), concatArrays = _require3.concatArrays;\nfunction find(list, fn) {\n    var length = list.length >>> 0;\n    var value;\n    for(var i = 0; i < length; i++){\n        value = list[i];\n        if (fn.call(this, value, i, list)) {\n            return value;\n        }\n    }\n    return undefined;\n}\nfunction _getValue(tag, meta, num) {\n    var _this = this;\n    var scope = this.scopeList[num];\n    if (this.root.finishedResolving) {\n        var w = this.resolved;\n        var _loop = function _loop() {\n            var lIndex = _this.scopeLindex[i];\n            w = find(w, function(r) {\n                return r.lIndex === lIndex;\n            });\n            w = w.value[_this.scopePathItem[i]];\n        };\n        for(var i = this.resolveOffset, len = this.scopePath.length; i < len; i++){\n            _loop();\n        }\n        return find(w, function(r) {\n            return meta.part.lIndex === r.lIndex;\n        }).value;\n    }\n    // search in the scopes (in reverse order) and keep the first defined value\n    var result;\n    var parser;\n    if (!this.cachedParsers || !meta.part) {\n        parser = this.parser(tag, {\n            tag: meta.part,\n            scopePath: this.scopePath\n        });\n    } else if (this.cachedParsers[meta.part.lIndex]) {\n        parser = this.cachedParsers[meta.part.lIndex];\n    } else {\n        parser = this.cachedParsers[meta.part.lIndex] = this.parser(tag, {\n            tag: meta.part,\n            scopePath: this.scopePath\n        });\n    }\n    try {\n        result = parser.get(scope, this.getContext(meta, num));\n    } catch (error) {\n        throw getScopeParserExecutionError({\n            tag: tag,\n            scope: scope,\n            error: error,\n            offset: meta.part.offset\n        });\n    }\n    if (result == null && num > 0) {\n        return _getValue.call(this, tag, meta, num - 1);\n    }\n    return result;\n}\nfunction _getValueAsync(tag, meta, num) {\n    var _this2 = this;\n    var scope = this.scopeList[num];\n    // search in the scopes (in reverse order) and keep the first defined value\n    var parser;\n    if (!this.cachedParsers || !meta.part) {\n        parser = this.parser(tag, {\n            tag: meta.part,\n            scopePath: this.scopePath\n        });\n    } else if (this.cachedParsers[meta.part.lIndex]) {\n        parser = this.cachedParsers[meta.part.lIndex];\n    } else {\n        parser = this.cachedParsers[meta.part.lIndex] = this.parser(tag, {\n            tag: meta.part,\n            scopePath: this.scopePath\n        });\n    }\n    return Promise.resolve().then(function() {\n        return parser.get(scope, _this2.getContext(meta, num));\n    })[\"catch\"](function(error) {\n        throw getScopeParserExecutionError({\n            tag: tag,\n            scope: scope,\n            error: error,\n            offset: meta.part.offset\n        });\n    }).then(function(result) {\n        if (result == null && num > 0) {\n            return _getValueAsync.call(_this2, tag, meta, num - 1);\n        }\n        return result;\n    });\n}\nvar ScopeManager = /*#__PURE__*/ function() {\n    function ScopeManager(options) {\n        _classCallCheck(this, ScopeManager);\n        this.root = options.root || this;\n        this.resolveOffset = options.resolveOffset || 0;\n        this.scopePath = options.scopePath;\n        this.scopePathItem = options.scopePathItem;\n        this.scopePathLength = options.scopePathLength;\n        this.scopeList = options.scopeList;\n        this.scopeType = \"\";\n        this.scopeTypes = options.scopeTypes;\n        this.scopeLindex = options.scopeLindex;\n        this.parser = options.parser;\n        this.resolved = options.resolved;\n        this.cachedParsers = options.cachedParsers;\n    }\n    return _createClass(ScopeManager, [\n        {\n            key: \"loopOver\",\n            value: function loopOver(tag, functor, inverted, meta) {\n                return this.loopOverValue(this.getValue(tag, meta), functor, inverted);\n            }\n        },\n        {\n            key: \"functorIfInverted\",\n            value: function functorIfInverted(inverted, functor, value, i, length) {\n                if (inverted) {\n                    functor(value, i, length);\n                }\n                return inverted;\n            }\n        },\n        {\n            key: \"isValueFalsy\",\n            value: function isValueFalsy(value, type) {\n                return value == null || !value || type === \"[object Array]\" && value.length === 0;\n            }\n        },\n        {\n            key: \"loopOverValue\",\n            value: function loopOverValue(value, functor, inverted) {\n                if (this.root.finishedResolving) {\n                    inverted = false;\n                }\n                var type = Object.prototype.toString.call(value);\n                if (this.isValueFalsy(value, type)) {\n                    this.scopeType = false;\n                    return this.functorIfInverted(inverted, functor, last(this.scopeList), 0, 1);\n                }\n                if (type === \"[object Array]\") {\n                    this.scopeType = \"array\";\n                    for(var i = 0; i < value.length; i++){\n                        this.functorIfInverted(!inverted, functor, value[i], i, value.length);\n                    }\n                    return true;\n                }\n                if (type === \"[object Object]\") {\n                    this.scopeType = \"object\";\n                    return this.functorIfInverted(!inverted, functor, value, 0, 1);\n                }\n                return this.functorIfInverted(!inverted, functor, last(this.scopeList), 0, 1);\n            }\n        },\n        {\n            key: \"getValue\",\n            value: function getValue(tag, meta) {\n                var result = _getValue.call(this, tag, meta, this.scopeList.length - 1);\n                if (typeof result === \"function\") {\n                    return result(this.scopeList[this.scopeList.length - 1], this);\n                }\n                return result;\n            }\n        },\n        {\n            key: \"getValueAsync\",\n            value: function getValueAsync(tag, meta) {\n                var _this3 = this;\n                return _getValueAsync.call(this, tag, meta, this.scopeList.length - 1).then(function(result) {\n                    if (typeof result === \"function\") {\n                        return result(_this3.scopeList[_this3.scopeList.length - 1], _this3);\n                    }\n                    return result;\n                });\n            }\n        },\n        {\n            key: \"getContext\",\n            value: function getContext(meta, num) {\n                return {\n                    num: num,\n                    meta: meta,\n                    scopeList: this.scopeList,\n                    resolved: this.resolved,\n                    scopePath: this.scopePath,\n                    scopeTypes: this.scopeTypes,\n                    scopePathItem: this.scopePathItem,\n                    scopePathLength: this.scopePathLength\n                };\n            }\n        },\n        {\n            key: \"createSubScopeManager\",\n            value: function createSubScopeManager(scope, tag, i, part, length) {\n                return new ScopeManager({\n                    root: this.root,\n                    resolveOffset: this.resolveOffset,\n                    resolved: this.resolved,\n                    parser: this.parser,\n                    cachedParsers: this.cachedParsers,\n                    scopeTypes: concatArrays([\n                        this.scopeTypes,\n                        [\n                            this.scopeType\n                        ]\n                    ]),\n                    scopeList: concatArrays([\n                        this.scopeList,\n                        [\n                            scope\n                        ]\n                    ]),\n                    scopePath: concatArrays([\n                        this.scopePath,\n                        [\n                            tag\n                        ]\n                    ]),\n                    scopePathItem: concatArrays([\n                        this.scopePathItem,\n                        [\n                            i\n                        ]\n                    ]),\n                    scopePathLength: concatArrays([\n                        this.scopePathLength,\n                        [\n                            length\n                        ]\n                    ]),\n                    scopeLindex: concatArrays([\n                        this.scopeLindex,\n                        [\n                            part.lIndex\n                        ]\n                    ])\n                });\n            }\n        }\n    ]);\n}();\nmodule.exports = function(options) {\n    options.scopePath = [];\n    options.scopePathItem = [];\n    options.scopePathLength = [];\n    options.scopeTypes = [];\n    options.scopeLindex = [];\n    options.scopeList = [\n        options.tags\n    ];\n    return new ScopeManager(options);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/docxtemplater/js/scope-manager.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/docxtemplater/js/traits.js":
/*!*************************************************!*\
  !*** ./node_modules/docxtemplater/js/traits.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nfunction _typeof(o) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o) {\n        return typeof o;\n    } : function(o) {\n        return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n}\nfunction _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _iterableToArray(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _iterableToArrayLimit(r, l) {\n    var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n    if (null != t) {\n        var e, n, i, u, a = [], f = !0, o = !1;\n        try {\n            if (i = (t = t.call(r)).next, 0 === l) {\n                if (Object(t) !== t) return;\n                f = !1;\n            } else for(; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n        } catch (r) {\n            o = !0, n = r;\n        } finally{\n            try {\n                if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n            } finally{\n                if (o) throw n;\n            }\n        }\n        return a;\n    }\n}\nfunction _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction ownKeys(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n    if (\"object\" != _typeof(t) || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n        var i = e.call(t, r || \"default\");\n        if (\"object\" != _typeof(i)) return i;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n}\nvar _require = __webpack_require__(/*! ./doc-utils.js */ \"(ssr)/./node_modules/docxtemplater/js/doc-utils.js\"), getRightOrNull = _require.getRightOrNull, getRight = _require.getRight, getLeft = _require.getLeft, getLeftOrNull = _require.getLeftOrNull, chunkBy = _require.chunkBy, isTagStart = _require.isTagStart, isTagEnd = _require.isTagEnd, isContent = _require.isContent, last = _require.last, first = _require.first;\nvar _require2 = __webpack_require__(/*! ./errors.js */ \"(ssr)/./node_modules/docxtemplater/js/errors.js\"), XTTemplateError = _require2.XTTemplateError, throwExpandNotFound = _require2.throwExpandNotFound, getLoopPositionProducesInvalidXMLError = _require2.getLoopPositionProducesInvalidXMLError;\nfunction lastTagIsOpenTag(tags, tag) {\n    if (tags.length === 0) {\n        return false;\n    }\n    var innerLastTag = last(tags).substr(1);\n    return innerLastTag.indexOf(tag) === 0;\n}\nfunction getListXmlElements(parts) {\n    /*\n  Gets the list of closing and opening tags between two texts. It doesn't take\n  into account tags that are opened then closed. Those that are closed then\n  opened are kept\n  \tExample input :\n  \t[\n  \t{\n  \t\t\"type\": \"placeholder\",\n  \t\t\"value\": \"table1\",\n  \t\t...\n  \t},\n  \t{\n  \t\t\"type\": \"placeholder\",\n  \t\t\"value\": \"t1data1\",\n  \t},\n  \t{\n  \t\t\"type\": \"tag\",\n  \t\t\"position\": \"end\",\n  \t\t\"text\": true,\n  \t\t\"value\": \"</w:t>\",\n  \t\t\"tag\": \"w:t\",\n  \t\t\"lIndex\": 112\n  \t},\n  \t{\n  \t\t\"type\": \"tag\",\n  \t\t\"value\": \"</w:r>\",\n  \t},\n  \t{\n  \t\t\"type\": \"tag\",\n  \t\t\"value\": \"</w:p>\",\n  \t},\n  \t{\n  \t\t\"type\": \"tag\",\n  \t\t\"value\": \"</w:tc>\",\n  \t},\n  \t{\n  \t\t\"type\": \"tag\",\n  \t\t\"value\": \"<w:tc>\",\n  \t},\n  \t{\n  \t\t\"type\": \"content\",\n  \t\t\"value\": \"<w:tcPr><w:tcW w:w=\"2444\" w:type=\"dxa\"/><w:tcBorders><w:top w:val=\"nil\"/><w:left w:val=\"nil\"/><w:bottom w:val=\"nil\"/><w:right w:val=\"nil\"/></w:tcBorders><w:shd w:val=\"clear\" w:color=\"auto\" w:fill=\"FFFFFF\"/></w:tcPr>\",\n  \t},\n  \t...\n  \t{\n  \t\t\"type\": \"tag\",\n  \t\t\"value\": \"<w:r>\",\n  \t},\n  \t{\n  \t\t\"type\": \"tag\",\n  \t\t\"value\": \"<w:t xml:space=\"preserve\">\",\n  \t},\n  \t{\n  \t\t\"type\": \"placeholder\",\n  \t\t\"value\": \"t1data4\",\n  \t}\n  ]\n  \treturns\n  \t[\n  \t\t{\n  \t\t\t\"tag\": \"</w:t>\",\n  \t\t},\n  \t\t{\n  \t\t\t\"tag\": \"</w:r>\",\n  \t\t},\n  \t\t{\n  \t\t\t\"tag\": \"</w:p>\",\n  \t\t},\n  \t\t{\n  \t\t\t\"tag\": \"</w:tc>\",\n  \t\t},\n  \t\t{\n  \t\t\t\"tag\": \"<w:tc>\",\n  \t\t},\n  \t\t{\n  \t\t\t\"tag\": \"<w:p>\",\n  \t\t},\n  \t\t{\n  \t\t\t\"tag\": \"<w:r>\",\n  \t\t},\n  \t\t{\n  \t\t\t\"tag\": \"<w:t>\",\n  \t\t},\n  \t]\n  */ var result = [];\n    for(var i = 0; i < parts.length; i++){\n        var _parts$i = parts[i], position = _parts$i.position, value = _parts$i.value, tag = _parts$i.tag;\n        // Stryker disable all : because removing this condition would also work but we want to make the API future proof\n        if (!tag) {\n            continue;\n        }\n        // Stryker restore all\n        if (position === \"end\") {\n            if (lastTagIsOpenTag(result, tag)) {\n                result.pop();\n            } else {\n                result.push(value);\n            }\n        } else if (position === \"start\") {\n            result.push(value);\n        }\n    // ignore position === \"selfclosing\"\n    }\n    return result;\n}\nfunction has(name, xmlElements) {\n    for(var i = 0; i < xmlElements.length; i++){\n        var xmlElement = xmlElements[i];\n        if (xmlElement.indexOf(\"<\".concat(name)) === 0) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction getExpandToDefault(postparsed, pair, expandTags) {\n    var parts = postparsed.slice(pair[0].offset, pair[1].offset);\n    var xmlElements = getListXmlElements(parts);\n    var closingTagCount = xmlElements.filter(function(tag) {\n        return tag[1] === \"/\";\n    }).length;\n    var startingTagCount = xmlElements.filter(function(tag) {\n        return tag[1] !== \"/\" && tag[tag.length - 2] !== \"/\";\n    }).length;\n    if (closingTagCount !== startingTagCount) {\n        return {\n            error: getLoopPositionProducesInvalidXMLError({\n                tag: first(pair).part.value,\n                offset: [\n                    first(pair).part.offset,\n                    last(pair).part.offset\n                ]\n            })\n        };\n    }\n    var _loop = function _loop() {\n        var _expandTags$i = expandTags[i], contains = _expandTags$i.contains, expand = _expandTags$i.expand, onlyTextInTag = _expandTags$i.onlyTextInTag;\n        if (has(contains, xmlElements)) {\n            if (onlyTextInTag) {\n                var left = getLeftOrNull(postparsed, contains, pair[0].offset);\n                var right = getRightOrNull(postparsed, contains, pair[1].offset);\n                if (left === null || right === null) {\n                    return 0; // continue\n                }\n                var chunks = chunkBy(postparsed.slice(left, right), function(p) {\n                    return isTagStart(contains, p) ? \"start\" : isTagEnd(contains, p) ? \"end\" : null;\n                });\n                var firstChunk = first(chunks);\n                var lastChunk = last(chunks);\n                var firstContent = firstChunk.filter(isContent);\n                var lastContent = lastChunk.filter(isContent);\n                if (firstContent.length !== 1 || lastContent.length !== 1) {\n                    return 0; // continue\n                }\n            }\n            return {\n                v: {\n                    value: expand\n                }\n            };\n        }\n    }, _ret;\n    for(var i = 0, len = expandTags.length; i < len; i++){\n        _ret = _loop();\n        if (_ret === 0) continue;\n        if (_ret) return _ret.v;\n    }\n    return {};\n}\nfunction getExpandLimit(part, index, postparsed, options) {\n    var expandTo = part.expandTo || options.expandTo;\n    // Stryker disable all : because this condition can be removed in v4 (the only usage was the image module before version 3.12.3 of the image module\n    if (!expandTo) {\n        return;\n    }\n    // Stryker restore all\n    var right, left;\n    try {\n        left = getLeft(postparsed, expandTo, index);\n        right = getRight(postparsed, expandTo, index);\n    } catch (rootError) {\n        if (rootError instanceof XTTemplateError) {\n            throwExpandNotFound(_objectSpread({\n                part: part,\n                rootError: rootError,\n                postparsed: postparsed,\n                expandTo: expandTo,\n                index: index\n            }, options.error));\n        }\n        throw rootError;\n    }\n    return [\n        left,\n        right\n    ];\n}\nfunction expandOne(_ref, part, postparsed, options) {\n    var _ref2 = _slicedToArray(_ref, 2), left = _ref2[0], right = _ref2[1];\n    var index = postparsed.indexOf(part);\n    var leftParts = postparsed.slice(left, index);\n    var rightParts = postparsed.slice(index + 1, right + 1);\n    var inner = options.getInner({\n        postparse: options.postparse,\n        index: index,\n        part: part,\n        leftParts: leftParts,\n        rightParts: rightParts,\n        left: left,\n        right: right,\n        postparsed: postparsed\n    });\n    if (!inner.length) {\n        inner.expanded = [\n            leftParts,\n            rightParts\n        ];\n        inner = [\n            inner\n        ];\n    }\n    return {\n        left: left,\n        right: right,\n        inner: inner\n    };\n}\nfunction expandToOne(postparsed, options) {\n    var errors = [];\n    if (postparsed.errors) {\n        errors = postparsed.errors;\n        postparsed = postparsed.postparsed;\n    }\n    var limits = [];\n    for(var i = 0, len = postparsed.length; i < len; i++){\n        var part = postparsed[i];\n        if (part.type === \"placeholder\" && part.module === options.moduleName && // The part.subparsed check is used to fix this github issue :\n        // https://github.com/open-xml-templating/docxtemplater/issues/671\n        !part.subparsed && !part.expanded) {\n            try {\n                var limit = getExpandLimit(part, i, postparsed, options);\n                if (!limit) {\n                    continue;\n                }\n                var _limit = _slicedToArray(limit, 2), left = _limit[0], right = _limit[1];\n                limits.push({\n                    left: left,\n                    right: right,\n                    part: part,\n                    i: i,\n                    leftPart: postparsed[left],\n                    rightPart: postparsed[right]\n                });\n            } catch (error) {\n                if (error instanceof XTTemplateError) {\n                    errors.push(error);\n                } else {\n                    throw error;\n                }\n            }\n        }\n    }\n    limits.sort(function(l1, l2) {\n        if (l1.left === l2.left) {\n            return l2.part.lIndex < l1.part.lIndex ? 1 : -1;\n        }\n        return l2.left < l1.left ? 1 : -1;\n    });\n    var maxRight = -1;\n    var offset = 0;\n    limits.forEach(function(limit, i) {\n        var _postparsed;\n        maxRight = Math.max(maxRight, i > 0 ? limits[i - 1].right : 0);\n        if (limit.left < maxRight) {\n            return;\n        }\n        var result;\n        try {\n            result = expandOne([\n                limit.left + offset,\n                limit.right + offset\n            ], limit.part, postparsed, options);\n        } catch (error) {\n            if (error instanceof XTTemplateError) {\n                errors.push(error);\n            } else {\n                throw error;\n            }\n        }\n        if (!result) {\n            return;\n        }\n        offset += result.inner.length - (result.right + 1 - result.left);\n        (_postparsed = postparsed).splice.apply(_postparsed, [\n            result.left,\n            result.right + 1 - result.left\n        ].concat(_toConsumableArray(result.inner)));\n    });\n    return {\n        postparsed: postparsed,\n        errors: errors\n    };\n}\nmodule.exports = {\n    expandToOne: expandToOne,\n    getExpandToDefault: getExpandToDefault\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/docxtemplater/js/traits.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/docxtemplater/js/utils.js":
/*!************************************************!*\
  !*** ./node_modules/docxtemplater/js/utils.js ***!
  \************************************************/
/***/ ((module) => {

eval("\nfunction last(a) {\n    return a[a.length - 1];\n}\nfunction first(a) {\n    return a[0];\n}\nmodule.exports = {\n    last: last,\n    first: first\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZG9jeHRlbXBsYXRlci9qcy91dGlscy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViLFNBQVNBLEtBQUtDLENBQUM7SUFDYixPQUFPQSxDQUFDLENBQUNBLEVBQUVDLE1BQU0sR0FBRyxFQUFFO0FBQ3hCO0FBQ0EsU0FBU0MsTUFBTUYsQ0FBQztJQUNkLE9BQU9BLENBQUMsQ0FBQyxFQUFFO0FBQ2I7QUFDQUcsT0FBT0MsT0FBTyxHQUFHO0lBQ2ZMLE1BQU1BO0lBQ05HLE9BQU9BO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWQtcGxhbm5lci1mcm9udC1lbmQvLi9ub2RlX21vZHVsZXMvZG9jeHRlbXBsYXRlci9qcy91dGlscy5qcz81YzNhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBsYXN0KGEpIHtcbiAgcmV0dXJuIGFbYS5sZW5ndGggLSAxXTtcbn1cbmZ1bmN0aW9uIGZpcnN0KGEpIHtcbiAgcmV0dXJuIGFbMF07XG59XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgbGFzdDogbGFzdCxcbiAgZmlyc3Q6IGZpcnN0XG59OyJdLCJuYW1lcyI6WyJsYXN0IiwiYSIsImxlbmd0aCIsImZpcnN0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/docxtemplater/js/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/docxtemplater/js/xml-matcher.js":
/*!******************************************************!*\
  !*** ./node_modules/docxtemplater/js/xml-matcher.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar _require = __webpack_require__(/*! ./doc-utils.js */ \"(ssr)/./node_modules/docxtemplater/js/doc-utils.js\"), pregMatchAll = _require.pregMatchAll;\nmodule.exports = function xmlMatcher(content, tagsXmlArray) {\n    var res = {\n        content: content\n    };\n    var taj = tagsXmlArray.join(\"|\");\n    var regexp = new RegExp(\"(?:(<(?:\".concat(taj, \")[^>]*>)([^<>]*)</(?:\").concat(taj, \")>)|(<(?:\").concat(taj, \")[^>]*/>)\"), \"g\");\n    res.matches = pregMatchAll(regexp, res.content);\n    return res;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZG9jeHRlbXBsYXRlci9qcy94bWwtbWF0Y2hlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViLElBQUlBLFdBQVdDLG1CQUFPQSxDQUFDLDBFQUFnQixHQUNyQ0MsZUFBZUYsU0FBU0UsWUFBWTtBQUN0Q0MsT0FBT0MsT0FBTyxHQUFHLFNBQVNDLFdBQVdDLE9BQU8sRUFBRUMsWUFBWTtJQUN4RCxJQUFJQyxNQUFNO1FBQ1JGLFNBQVNBO0lBQ1g7SUFDQSxJQUFJRyxNQUFNRixhQUFhRyxJQUFJLENBQUM7SUFDNUIsSUFBSUMsU0FBUyxJQUFJQyxPQUFPLFdBQVdDLE1BQU0sQ0FBQ0osS0FBSyx5QkFBeUJJLE1BQU0sQ0FBQ0osS0FBSyxhQUFhSSxNQUFNLENBQUNKLEtBQUssY0FBYztJQUMzSEQsSUFBSU0sT0FBTyxHQUFHWixhQUFhUyxRQUFRSCxJQUFJRixPQUFPO0lBQzlDLE9BQU9FO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWQtcGxhbm5lci1mcm9udC1lbmQvLi9ub2RlX21vZHVsZXMvZG9jeHRlbXBsYXRlci9qcy94bWwtbWF0Y2hlci5qcz9iMGY3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKFwiLi9kb2MtdXRpbHMuanNcIiksXG4gIHByZWdNYXRjaEFsbCA9IF9yZXF1aXJlLnByZWdNYXRjaEFsbDtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geG1sTWF0Y2hlcihjb250ZW50LCB0YWdzWG1sQXJyYXkpIHtcbiAgdmFyIHJlcyA9IHtcbiAgICBjb250ZW50OiBjb250ZW50XG4gIH07XG4gIHZhciB0YWogPSB0YWdzWG1sQXJyYXkuam9pbihcInxcIik7XG4gIHZhciByZWdleHAgPSBuZXcgUmVnRXhwKFwiKD86KDwoPzpcIi5jb25jYXQodGFqLCBcIilbXj5dKj4pKFtePD5dKik8Lyg/OlwiKS5jb25jYXQodGFqLCBcIik+KXwoPCg/OlwiKS5jb25jYXQodGFqLCBcIilbXj5dKi8+KVwiKSwgXCJnXCIpO1xuICByZXMubWF0Y2hlcyA9IHByZWdNYXRjaEFsbChyZWdleHAsIHJlcy5jb250ZW50KTtcbiAgcmV0dXJuIHJlcztcbn07Il0sIm5hbWVzIjpbIl9yZXF1aXJlIiwicmVxdWlyZSIsInByZWdNYXRjaEFsbCIsIm1vZHVsZSIsImV4cG9ydHMiLCJ4bWxNYXRjaGVyIiwiY29udGVudCIsInRhZ3NYbWxBcnJheSIsInJlcyIsInRhaiIsImpvaW4iLCJyZWdleHAiLCJSZWdFeHAiLCJjb25jYXQiLCJtYXRjaGVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/docxtemplater/js/xml-matcher.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/docxtemplater/js/xml-templater.js":
/*!********************************************************!*\
  !*** ./node_modules/docxtemplater/js/xml-templater.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nfunction _typeof(o) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o) {\n        return typeof o;\n    } : function(o) {\n        return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    Object.defineProperty(Constructor, \"prototype\", {\n        writable: false\n    });\n    return Constructor;\n}\nfunction _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n    if (\"object\" != _typeof(t) || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n        var i = e.call(t, r || \"default\");\n        if (\"object\" != _typeof(i)) return i;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n}\nvar _require = __webpack_require__(/*! ./doc-utils.js */ \"(ssr)/./node_modules/docxtemplater/js/doc-utils.js\"), wordToUtf8 = _require.wordToUtf8, convertSpaces = _require.convertSpaces;\nvar xmlMatcher = __webpack_require__(/*! ./xml-matcher.js */ \"(ssr)/./node_modules/docxtemplater/js/xml-matcher.js\");\nvar Lexer = __webpack_require__(/*! ./lexer.js */ \"(ssr)/./node_modules/docxtemplater/js/lexer.js\");\nvar Parser = __webpack_require__(/*! ./parser.js */ \"(ssr)/./node_modules/docxtemplater/js/parser.js\");\nvar _render = __webpack_require__(/*! ./render.js */ \"(ssr)/./node_modules/docxtemplater/js/render.js\");\nvar postrender = __webpack_require__(/*! ./postrender.js */ \"(ssr)/./node_modules/docxtemplater/js/postrender.js\");\nvar resolve = __webpack_require__(/*! ./resolve.js */ \"(ssr)/./node_modules/docxtemplater/js/resolve.js\");\nvar joinUncorrupt = __webpack_require__(/*! ./join-uncorrupt.js */ \"(ssr)/./node_modules/docxtemplater/js/join-uncorrupt.js\");\nfunction _getFullText(content, tagsXmlArray) {\n    var matcher = xmlMatcher(content, tagsXmlArray);\n    var result = matcher.matches.map(function(match) {\n        return match.array[2];\n    });\n    return wordToUtf8(convertSpaces(result.join(\"\")));\n}\nmodule.exports = /*#__PURE__*/ function() {\n    function XmlTemplater(content, options) {\n        var _this = this;\n        _classCallCheck(this, XmlTemplater);\n        this.cachedParsers = {};\n        this.content = content;\n        Object.keys(options).forEach(function(key) {\n            _this[key] = options[key];\n        });\n        this.setModules({\n            inspect: {\n                filePath: options.filePath\n            }\n        });\n    }\n    return _createClass(XmlTemplater, [\n        {\n            key: \"resolveTags\",\n            value: function resolveTags(tags) {\n                var _this2 = this;\n                this.tags = tags;\n                var options = this.getOptions();\n                var filePath = this.filePath;\n                options.scopeManager = this.scopeManager;\n                options.resolve = resolve;\n                var errors = [];\n                return Promise.all(this.modules.map(function(module1) {\n                    return Promise.resolve(module1.preResolve(options))[\"catch\"](function(e) {\n                        errors.push(e);\n                    });\n                })).then(function() {\n                    if (errors.length !== 0) {\n                        throw errors;\n                    }\n                    return resolve(options).then(function(_ref) {\n                        var resolved = _ref.resolved, errors = _ref.errors;\n                        errors = errors.map(function(error) {\n                            // If a string is thrown, convert it to a real Error\n                            if (!(error instanceof Error)) {\n                                error = new Error(error);\n                            }\n                            // error properties might not be defined if some foreign error\n                            // (unhandled error not thrown by docxtemplater willingly) is\n                            // thrown.\n                            error.properties = error.properties || {};\n                            error.properties.file = filePath;\n                            return error;\n                        });\n                        if (errors.length !== 0) {\n                            throw errors;\n                        }\n                        return Promise.all(resolved).then(function(resolved) {\n                            options.scopeManager.root.finishedResolving = true;\n                            options.scopeManager.resolved = resolved;\n                            _this2.setModules({\n                                inspect: {\n                                    resolved: resolved,\n                                    filePath: filePath\n                                }\n                            });\n                            return resolved;\n                        });\n                    });\n                });\n            }\n        },\n        {\n            key: \"getFullText\",\n            value: function getFullText() {\n                return _getFullText(this.content, this.fileTypeConfig.tagsXmlTextArray);\n            }\n        },\n        {\n            key: \"setModules\",\n            value: function setModules(obj) {\n                this.modules.forEach(function(module1) {\n                    module1.set(obj);\n                });\n            }\n        },\n        {\n            key: \"preparse\",\n            value: function preparse() {\n                this.allErrors = [];\n                this.xmllexed = Lexer.xmlparse(this.content, {\n                    text: this.fileTypeConfig.tagsXmlTextArray,\n                    other: this.fileTypeConfig.tagsXmlLexedArray\n                });\n                this.setModules({\n                    inspect: {\n                        filePath: this.filePath,\n                        xmllexed: this.xmllexed\n                    }\n                });\n                var _Lexer$parse = Lexer.parse(this.xmllexed, this.delimiters, this.syntax, this.fileType), lexed = _Lexer$parse.lexed, lexerErrors = _Lexer$parse.errors;\n                this.allErrors = this.allErrors.concat(lexerErrors);\n                this.lexed = lexed;\n                this.setModules({\n                    inspect: {\n                        filePath: this.filePath,\n                        lexed: this.lexed\n                    }\n                });\n                var options = this.getOptions();\n                Parser.preparse(this.lexed, this.modules, options);\n            }\n        },\n        {\n            key: \"parse\",\n            value: function parse() {\n                this.setModules({\n                    inspect: {\n                        filePath: this.filePath\n                    }\n                });\n                var options = this.getOptions();\n                this.parsed = Parser.parse(this.lexed, this.modules, options);\n                this.setModules({\n                    inspect: {\n                        filePath: this.filePath,\n                        parsed: this.parsed\n                    }\n                });\n                var _Parser$postparse = Parser.postparse(this.parsed, this.modules, options), postparsed = _Parser$postparse.postparsed, postparsedErrors = _Parser$postparse.errors;\n                this.postparsed = postparsed;\n                this.setModules({\n                    inspect: {\n                        filePath: this.filePath,\n                        postparsed: this.postparsed\n                    }\n                });\n                this.allErrors = this.allErrors.concat(postparsedErrors);\n                this.errorChecker(this.allErrors);\n                return this;\n            }\n        },\n        {\n            key: \"errorChecker\",\n            value: function errorChecker(errors) {\n                var _this3 = this;\n                errors.forEach(function(error) {\n                    // error properties might not be defined if some foreign\n                    // (unhandled error not thrown by docxtemplater willingly) is\n                    // thrown.\n                    error.properties = error.properties || {};\n                    error.properties.file = _this3.filePath;\n                });\n                this.modules.forEach(function(module1) {\n                    errors = module1.errorsTransformer(errors);\n                });\n            }\n        },\n        {\n            key: \"baseNullGetter\",\n            value: function baseNullGetter(part, sm) {\n                var _this4 = this;\n                var value = this.modules.reduce(function(value, module1) {\n                    if (value != null) {\n                        return value;\n                    }\n                    return module1.nullGetter(part, sm, _this4);\n                }, null);\n                if (value != null) {\n                    return value;\n                }\n                return this.nullGetter(part, sm);\n            }\n        },\n        {\n            key: \"getOptions\",\n            value: function getOptions() {\n                return {\n                    compiled: this.postparsed,\n                    cachedParsers: this.cachedParsers,\n                    tags: this.tags,\n                    modules: this.modules,\n                    parser: this.parser,\n                    contentType: this.contentType,\n                    relsType: this.relsType,\n                    baseNullGetter: this.baseNullGetter.bind(this),\n                    filePath: this.filePath,\n                    fileTypeConfig: this.fileTypeConfig,\n                    fileType: this.fileType,\n                    linebreaks: this.linebreaks\n                };\n            }\n        },\n        {\n            key: \"render\",\n            value: function render(to) {\n                this.filePath = to;\n                var options = this.getOptions();\n                options.resolved = this.scopeManager.resolved;\n                options.scopeManager = this.scopeManager;\n                options.render = _render;\n                options.joinUncorrupt = joinUncorrupt;\n                var _render2 = _render(options), errors = _render2.errors, parts = _render2.parts;\n                if (errors.length > 0) {\n                    this.allErrors = errors;\n                    this.errorChecker(errors);\n                    return this;\n                }\n                this.content = postrender(parts, options);\n                this.setModules({\n                    inspect: {\n                        filePath: this.filePath,\n                        content: this.content\n                    }\n                });\n                return this;\n            }\n        }\n    ]);\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/docxtemplater/js/xml-templater.js\n");

/***/ })

};
;