/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@xmldom";
exports.ids = ["vendor-chunks/@xmldom"];
exports.modules = {

/***/ "(ssr)/./node_modules/@xmldom/xmldom/lib/conventions.js":
/*!********************************************************!*\
  !*** ./node_modules/@xmldom/xmldom/lib/conventions.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/**\n * Ponyfill for `Array.prototype.find` which is only available in ES6 runtimes.\n *\n * Works with anything that has a `length` property and index access properties, including NodeList.\n *\n * @template {unknown} T\n * @param {Array<T> | ({length:number, [number]: T})} list\n * @param {function (item: T, index: number, list:Array<T> | ({length:number, [number]: T})):boolean} predicate\n * @param {Partial<Pick<ArrayConstructor['prototype'], 'find'>>?} ac `Array.prototype` by default,\n * \t\t\t\tallows injecting a custom implementation in tests\n * @returns {T | undefined}\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find\n * @see https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.find\n */ function find(list, predicate, ac) {\n    if (ac === undefined) {\n        ac = Array.prototype;\n    }\n    if (list && typeof ac.find === \"function\") {\n        return ac.find.call(list, predicate);\n    }\n    for(var i = 0; i < list.length; i++){\n        if (Object.prototype.hasOwnProperty.call(list, i)) {\n            var item = list[i];\n            if (predicate.call(undefined, item, i, list)) {\n                return item;\n            }\n        }\n    }\n}\n/**\n * \"Shallow freezes\" an object to render it immutable.\n * Uses `Object.freeze` if available,\n * otherwise the immutability is only in the type.\n *\n * Is used to create \"enum like\" objects.\n *\n * @template T\n * @param {T} object the object to freeze\n * @param {Pick<ObjectConstructor, 'freeze'> = Object} oc `Object` by default,\n * \t\t\t\tallows to inject custom object constructor for tests\n * @returns {Readonly<T>}\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\n */ function freeze(object, oc) {\n    if (oc === undefined) {\n        oc = Object;\n    }\n    return oc && typeof oc.freeze === \"function\" ? oc.freeze(object) : object;\n}\n/**\n * Since we can not rely on `Object.assign` we provide a simplified version\n * that is sufficient for our needs.\n *\n * @param {Object} target\n * @param {Object | null | undefined} source\n *\n * @returns {Object} target\n * @throws TypeError if target is not an object\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n * @see https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.assign\n */ function assign(target, source) {\n    if (target === null || typeof target !== \"object\") {\n        throw new TypeError(\"target is not an object\");\n    }\n    for(var key in source){\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\n/**\n * All mime types that are allowed as input to `DOMParser.parseFromString`\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/parseFromString#Argument02 MDN\n * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#domparsersupportedtype WHATWG HTML Spec\n * @see DOMParser.prototype.parseFromString\n */ var MIME_TYPE = freeze({\n    /**\n\t * `text/html`, the only mime type that triggers treating an XML document as HTML.\n\t *\n\t * @see DOMParser.SupportedType.isHTML\n\t * @see https://www.iana.org/assignments/media-types/text/html IANA MimeType registration\n\t * @see https://en.wikipedia.org/wiki/HTML Wikipedia\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/parseFromString MDN\n\t * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#dom-domparser-parsefromstring WHATWG HTML Spec\n\t */ HTML: \"text/html\",\n    /**\n\t * Helper method to check a mime type if it indicates an HTML document\n\t *\n\t * @param {string} [value]\n\t * @returns {boolean}\n\t *\n\t * @see https://www.iana.org/assignments/media-types/text/html IANA MimeType registration\n\t * @see https://en.wikipedia.org/wiki/HTML Wikipedia\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/parseFromString MDN\n\t * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#dom-domparser-parsefromstring \t */ isHTML: function(value) {\n        return value === MIME_TYPE.HTML;\n    },\n    /**\n\t * `application/xml`, the standard mime type for XML documents.\n\t *\n\t * @see https://www.iana.org/assignments/media-types/application/xml IANA MimeType registration\n\t * @see https://tools.ietf.org/html/rfc7303#section-9.1 RFC 7303\n\t * @see https://en.wikipedia.org/wiki/XML_and_MIME Wikipedia\n\t */ XML_APPLICATION: \"application/xml\",\n    /**\n\t * `text/html`, an alias for `application/xml`.\n\t *\n\t * @see https://tools.ietf.org/html/rfc7303#section-9.2 RFC 7303\n\t * @see https://www.iana.org/assignments/media-types/text/xml IANA MimeType registration\n\t * @see https://en.wikipedia.org/wiki/XML_and_MIME Wikipedia\n\t */ XML_TEXT: \"text/xml\",\n    /**\n\t * `application/xhtml+xml`, indicates an XML document that has the default HTML namespace,\n\t * but is parsed as an XML document.\n\t *\n\t * @see https://www.iana.org/assignments/media-types/application/xhtml+xml IANA MimeType registration\n\t * @see https://dom.spec.whatwg.org/#dom-domimplementation-createdocument WHATWG DOM Spec\n\t * @see https://en.wikipedia.org/wiki/XHTML Wikipedia\n\t */ XML_XHTML_APPLICATION: \"application/xhtml+xml\",\n    /**\n\t * `image/svg+xml`,\n\t *\n\t * @see https://www.iana.org/assignments/media-types/image/svg+xml IANA MimeType registration\n\t * @see https://www.w3.org/TR/SVG11/ W3C SVG 1.1\n\t * @see https://en.wikipedia.org/wiki/Scalable_Vector_Graphics Wikipedia\n\t */ XML_SVG_IMAGE: \"image/svg+xml\"\n});\n/**\n * Namespaces that are used in this code base.\n *\n * @see http://www.w3.org/TR/REC-xml-names\n */ var NAMESPACE = freeze({\n    /**\n\t * The XHTML namespace.\n\t *\n\t * @see http://www.w3.org/1999/xhtml\n\t */ HTML: \"http://www.w3.org/1999/xhtml\",\n    /**\n\t * Checks if `uri` equals `NAMESPACE.HTML`.\n\t *\n\t * @param {string} [uri]\n\t *\n\t * @see NAMESPACE.HTML\n\t */ isHTML: function(uri) {\n        return uri === NAMESPACE.HTML;\n    },\n    /**\n\t * The SVG namespace.\n\t *\n\t * @see http://www.w3.org/2000/svg\n\t */ SVG: \"http://www.w3.org/2000/svg\",\n    /**\n\t * The `xml:` namespace.\n\t *\n\t * @see http://www.w3.org/XML/1998/namespace\n\t */ XML: \"http://www.w3.org/XML/1998/namespace\",\n    /**\n\t * The `xmlns:` namespace\n\t *\n\t * @see https://www.w3.org/2000/xmlns/\n\t */ XMLNS: \"http://www.w3.org/2000/xmlns/\"\n});\nexports.assign = assign;\nexports.find = find;\nexports.freeze = freeze;\nexports.MIME_TYPE = MIME_TYPE;\nexports.NAMESPACE = NAMESPACE;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmldom/xmldom/lib/conventions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmldom/xmldom/lib/dom-parser.js":
/*!*******************************************************!*\
  !*** ./node_modules/@xmldom/xmldom/lib/dom-parser.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var conventions = __webpack_require__(/*! ./conventions */ \"(ssr)/./node_modules/@xmldom/xmldom/lib/conventions.js\");\nvar dom = __webpack_require__(/*! ./dom */ \"(ssr)/./node_modules/@xmldom/xmldom/lib/dom.js\");\nvar entities = __webpack_require__(/*! ./entities */ \"(ssr)/./node_modules/@xmldom/xmldom/lib/entities.js\");\nvar sax = __webpack_require__(/*! ./sax */ \"(ssr)/./node_modules/@xmldom/xmldom/lib/sax.js\");\nvar DOMImplementation = dom.DOMImplementation;\nvar NAMESPACE = conventions.NAMESPACE;\nvar ParseError = sax.ParseError;\nvar XMLReader = sax.XMLReader;\n/**\n * Normalizes line ending according to https://www.w3.org/TR/xml11/#sec-line-ends:\n *\n * > XML parsed entities are often stored in computer files which,\n * > for editing convenience, are organized into lines.\n * > These lines are typically separated by some combination\n * > of the characters CARRIAGE RETURN (#xD) and LINE FEED (#xA).\n * >\n * > To simplify the tasks of applications, the XML processor must behave\n * > as if it normalized all line breaks in external parsed entities (including the document entity)\n * > on input, before parsing, by translating all of the following to a single #xA character:\n * >\n * > 1. the two-character sequence #xD #xA\n * > 2. the two-character sequence #xD #x85\n * > 3. the single character #x85\n * > 4. the single character #x2028\n * > 5. any #xD character that is not immediately followed by #xA or #x85.\n *\n * @param {string} input\n * @returns {string}\n */ function normalizeLineEndings(input) {\n    return input.replace(/\\r[\\n\\u0085]/g, \"\\n\").replace(/[\\r\\u0085\\u2028]/g, \"\\n\");\n}\n/**\n * @typedef Locator\n * @property {number} [columnNumber]\n * @property {number} [lineNumber]\n */ /**\n * @typedef DOMParserOptions\n * @property {DOMHandler} [domBuilder]\n * @property {Function} [errorHandler]\n * @property {(string) => string} [normalizeLineEndings] used to replace line endings before parsing\n * \t\t\t\t\t\tdefaults to `normalizeLineEndings`\n * @property {Locator} [locator]\n * @property {Record<string, string>} [xmlns]\n *\n * @see normalizeLineEndings\n */ /**\n * The DOMParser interface provides the ability to parse XML or HTML source code\n * from a string into a DOM `Document`.\n *\n * _xmldom is different from the spec in that it allows an `options` parameter,\n * to override the default behavior._\n *\n * @param {DOMParserOptions} [options]\n * @constructor\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser\n * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#dom-parsing-and-serialization\n */ function DOMParser(options) {\n    this.options = options || {\n        locator: {}\n    };\n}\nDOMParser.prototype.parseFromString = function(source, mimeType) {\n    var options = this.options;\n    var sax = new XMLReader();\n    var domBuilder = options.domBuilder || new DOMHandler(); //contentHandler and LexicalHandler\n    var errorHandler = options.errorHandler;\n    var locator = options.locator;\n    var defaultNSMap = options.xmlns || {};\n    var isHTML = /\\/x?html?$/.test(mimeType); //mimeType.toLowerCase().indexOf('html') > -1;\n    var entityMap = isHTML ? entities.HTML_ENTITIES : entities.XML_ENTITIES;\n    if (locator) {\n        domBuilder.setDocumentLocator(locator);\n    }\n    sax.errorHandler = buildErrorHandler(errorHandler, domBuilder, locator);\n    sax.domBuilder = options.domBuilder || domBuilder;\n    if (isHTML) {\n        defaultNSMap[\"\"] = NAMESPACE.HTML;\n    }\n    defaultNSMap.xml = defaultNSMap.xml || NAMESPACE.XML;\n    var normalize = options.normalizeLineEndings || normalizeLineEndings;\n    if (source && typeof source === \"string\") {\n        sax.parse(normalize(source), defaultNSMap, entityMap);\n    } else {\n        sax.errorHandler.error(\"invalid doc source\");\n    }\n    return domBuilder.doc;\n};\nfunction buildErrorHandler(errorImpl, domBuilder, locator) {\n    if (!errorImpl) {\n        if (domBuilder instanceof DOMHandler) {\n            return domBuilder;\n        }\n        errorImpl = domBuilder;\n    }\n    var errorHandler = {};\n    var isCallback = errorImpl instanceof Function;\n    locator = locator || {};\n    function build(key) {\n        var fn = errorImpl[key];\n        if (!fn && isCallback) {\n            fn = errorImpl.length == 2 ? function(msg) {\n                errorImpl(key, msg);\n            } : errorImpl;\n        }\n        errorHandler[key] = fn && function(msg) {\n            fn(\"[xmldom \" + key + \"]\t\" + msg + _locator(locator));\n        } || function() {};\n    }\n    build(\"warning\");\n    build(\"error\");\n    build(\"fatalError\");\n    return errorHandler;\n}\n//console.log('#\\n\\n\\n\\n\\n\\n\\n####')\n/**\n * +ContentHandler+ErrorHandler\n * +LexicalHandler+EntityResolver2\n * -DeclHandler-DTDHandler\n *\n * DefaultHandler:EntityResolver, DTDHandler, ContentHandler, ErrorHandler\n * DefaultHandler2:DefaultHandler,LexicalHandler, DeclHandler, EntityResolver2\n * @link http://www.saxproject.org/apidoc/org/xml/sax/helpers/DefaultHandler.html\n */ function DOMHandler() {\n    this.cdata = false;\n}\nfunction position(locator, node) {\n    node.lineNumber = locator.lineNumber;\n    node.columnNumber = locator.columnNumber;\n}\n/**\n * @see org.xml.sax.ContentHandler#startDocument\n * @link http://www.saxproject.org/apidoc/org/xml/sax/ContentHandler.html\n */ DOMHandler.prototype = {\n    startDocument: function() {\n        this.doc = new DOMImplementation().createDocument(null, null, null);\n        if (this.locator) {\n            this.doc.documentURI = this.locator.systemId;\n        }\n    },\n    startElement: function(namespaceURI, localName, qName, attrs) {\n        var doc = this.doc;\n        var el = doc.createElementNS(namespaceURI, qName || localName);\n        var len = attrs.length;\n        appendElement(this, el);\n        this.currentElement = el;\n        this.locator && position(this.locator, el);\n        for(var i = 0; i < len; i++){\n            var namespaceURI = attrs.getURI(i);\n            var value = attrs.getValue(i);\n            var qName = attrs.getQName(i);\n            var attr = doc.createAttributeNS(namespaceURI, qName);\n            this.locator && position(attrs.getLocator(i), attr);\n            attr.value = attr.nodeValue = value;\n            el.setAttributeNode(attr);\n        }\n    },\n    endElement: function(namespaceURI, localName, qName) {\n        var current = this.currentElement;\n        var tagName = current.tagName;\n        this.currentElement = current.parentNode;\n    },\n    startPrefixMapping: function(prefix, uri) {},\n    endPrefixMapping: function(prefix) {},\n    processingInstruction: function(target, data) {\n        var ins = this.doc.createProcessingInstruction(target, data);\n        this.locator && position(this.locator, ins);\n        appendElement(this, ins);\n    },\n    ignorableWhitespace: function(ch, start, length) {},\n    characters: function(chars, start, length) {\n        chars = _toString.apply(this, arguments);\n        //console.log(chars)\n        if (chars) {\n            if (this.cdata) {\n                var charNode = this.doc.createCDATASection(chars);\n            } else {\n                var charNode = this.doc.createTextNode(chars);\n            }\n            if (this.currentElement) {\n                this.currentElement.appendChild(charNode);\n            } else if (/^\\s*$/.test(chars)) {\n                this.doc.appendChild(charNode);\n            //process xml\n            }\n            this.locator && position(this.locator, charNode);\n        }\n    },\n    skippedEntity: function(name) {},\n    endDocument: function() {\n        this.doc.normalize();\n    },\n    setDocumentLocator: function(locator) {\n        if (this.locator = locator) {\n            locator.lineNumber = 0;\n        }\n    },\n    //LexicalHandler\n    comment: function(chars, start, length) {\n        chars = _toString.apply(this, arguments);\n        var comm = this.doc.createComment(chars);\n        this.locator && position(this.locator, comm);\n        appendElement(this, comm);\n    },\n    startCDATA: function() {\n        //used in characters() methods\n        this.cdata = true;\n    },\n    endCDATA: function() {\n        this.cdata = false;\n    },\n    startDTD: function(name, publicId, systemId) {\n        var impl = this.doc.implementation;\n        if (impl && impl.createDocumentType) {\n            var dt = impl.createDocumentType(name, publicId, systemId);\n            this.locator && position(this.locator, dt);\n            appendElement(this, dt);\n            this.doc.doctype = dt;\n        }\n    },\n    /**\n\t * @see org.xml.sax.ErrorHandler\n\t * @link http://www.saxproject.org/apidoc/org/xml/sax/ErrorHandler.html\n\t */ warning: function(error) {\n        console.warn(\"[xmldom warning]\t\" + error, _locator(this.locator));\n    },\n    error: function(error) {\n        console.error(\"[xmldom error]\t\" + error, _locator(this.locator));\n    },\n    fatalError: function(error) {\n        throw new ParseError(error, this.locator);\n    }\n};\nfunction _locator(l) {\n    if (l) {\n        return \"\\n@\" + (l.systemId || \"\") + \"#[line:\" + l.lineNumber + \",col:\" + l.columnNumber + \"]\";\n    }\n}\nfunction _toString(chars, start, length) {\n    if (typeof chars == \"string\") {\n        return chars.substr(start, length);\n    } else {\n        if (chars.length >= start + length || start) {\n            return new java.lang.String(chars, start, length) + \"\";\n        }\n        return chars;\n    }\n}\n/*\n * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/LexicalHandler.html\n * used method of org.xml.sax.ext.LexicalHandler:\n *  #comment(chars, start, length)\n *  #startCDATA()\n *  #endCDATA()\n *  #startDTD(name, publicId, systemId)\n *\n *\n * IGNORED method of org.xml.sax.ext.LexicalHandler:\n *  #endDTD()\n *  #startEntity(name)\n *  #endEntity(name)\n *\n *\n * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/DeclHandler.html\n * IGNORED method of org.xml.sax.ext.DeclHandler\n * \t#attributeDecl(eName, aName, type, mode, value)\n *  #elementDecl(name, model)\n *  #externalEntityDecl(name, publicId, systemId)\n *  #internalEntityDecl(name, value)\n * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/EntityResolver2.html\n * IGNORED method of org.xml.sax.EntityResolver2\n *  #resolveEntity(String name,String publicId,String baseURI,String systemId)\n *  #resolveEntity(publicId, systemId)\n *  #getExternalSubset(name, baseURI)\n * @link http://www.saxproject.org/apidoc/org/xml/sax/DTDHandler.html\n * IGNORED method of org.xml.sax.DTDHandler\n *  #notationDecl(name, publicId, systemId) {};\n *  #unparsedEntityDecl(name, publicId, systemId, notationName) {};\n */ \"endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl\".replace(/\\w+/g, function(key) {\n    DOMHandler.prototype[key] = function() {\n        return null;\n    };\n});\n/* Private static helpers treated below as private instance methods, so don't need to add these to the public API; we might use a Relator to also get rid of non-standard public properties */ function appendElement(hander, node) {\n    if (!hander.currentElement) {\n        hander.doc.appendChild(node);\n    } else {\n        hander.currentElement.appendChild(node);\n    }\n} //appendChild and setAttributeNS are preformance key\nexports.__DOMHandler = DOMHandler;\nexports.normalizeLineEndings = normalizeLineEndings;\nexports.DOMParser = DOMParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmldom/xmldom/lib/dom-parser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmldom/xmldom/lib/dom.js":
/*!************************************************!*\
  !*** ./node_modules/@xmldom/xmldom/lib/dom.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var conventions = __webpack_require__(/*! ./conventions */ \"(ssr)/./node_modules/@xmldom/xmldom/lib/conventions.js\");\nvar find = conventions.find;\nvar NAMESPACE = conventions.NAMESPACE;\n/**\n * A prerequisite for `[].filter`, to drop elements that are empty\n * @param {string} input\n * @returns {boolean}\n */ function notEmptyString(input) {\n    return input !== \"\";\n}\n/**\n * @see https://infra.spec.whatwg.org/#split-on-ascii-whitespace\n * @see https://infra.spec.whatwg.org/#ascii-whitespace\n *\n * @param {string} input\n * @returns {string[]} (can be empty)\n */ function splitOnASCIIWhitespace(input) {\n    // U+0009 TAB, U+000A LF, U+000C FF, U+000D CR, U+0020 SPACE\n    return input ? input.split(/[\\t\\n\\f\\r ]+/).filter(notEmptyString) : [];\n}\n/**\n * Adds element as a key to current if it is not already present.\n *\n * @param {Record<string, boolean | undefined>} current\n * @param {string} element\n * @returns {Record<string, boolean | undefined>}\n */ function orderedSetReducer(current, element) {\n    if (!current.hasOwnProperty(element)) {\n        current[element] = true;\n    }\n    return current;\n}\n/**\n * @see https://infra.spec.whatwg.org/#ordered-set\n * @param {string} input\n * @returns {string[]}\n */ function toOrderedSet(input) {\n    if (!input) return [];\n    var list = splitOnASCIIWhitespace(input);\n    return Object.keys(list.reduce(orderedSetReducer, {}));\n}\n/**\n * Uses `list.indexOf` to implement something like `Array.prototype.includes`,\n * which we can not rely on being available.\n *\n * @param {any[]} list\n * @returns {function(any): boolean}\n */ function arrayIncludes(list) {\n    return function(element) {\n        return list && list.indexOf(element) !== -1;\n    };\n}\nfunction copy(src, dest) {\n    for(var p in src){\n        if (Object.prototype.hasOwnProperty.call(src, p)) {\n            dest[p] = src[p];\n        }\n    }\n}\n/**\n^\\w+\\.prototype\\.([_\\w]+)\\s*=\\s*((?:.*\\{\\s*?[\\r\\n][\\s\\S]*?^})|\\S.*?(?=[;\\r\\n]));?\n^\\w+\\.prototype\\.([_\\w]+)\\s*=\\s*(\\S.*?(?=[;\\r\\n]));?\n */ function _extends(Class, Super) {\n    var pt = Class.prototype;\n    if (!(pt instanceof Super)) {\n        function t() {}\n        ;\n        t.prototype = Super.prototype;\n        t = new t();\n        copy(pt, t);\n        Class.prototype = pt = t;\n    }\n    if (pt.constructor != Class) {\n        if (typeof Class != \"function\") {\n            console.error(\"unknown Class:\" + Class);\n        }\n        pt.constructor = Class;\n    }\n}\n// Node Types\nvar NodeType = {};\nvar ELEMENT_NODE = NodeType.ELEMENT_NODE = 1;\nvar ATTRIBUTE_NODE = NodeType.ATTRIBUTE_NODE = 2;\nvar TEXT_NODE = NodeType.TEXT_NODE = 3;\nvar CDATA_SECTION_NODE = NodeType.CDATA_SECTION_NODE = 4;\nvar ENTITY_REFERENCE_NODE = NodeType.ENTITY_REFERENCE_NODE = 5;\nvar ENTITY_NODE = NodeType.ENTITY_NODE = 6;\nvar PROCESSING_INSTRUCTION_NODE = NodeType.PROCESSING_INSTRUCTION_NODE = 7;\nvar COMMENT_NODE = NodeType.COMMENT_NODE = 8;\nvar DOCUMENT_NODE = NodeType.DOCUMENT_NODE = 9;\nvar DOCUMENT_TYPE_NODE = NodeType.DOCUMENT_TYPE_NODE = 10;\nvar DOCUMENT_FRAGMENT_NODE = NodeType.DOCUMENT_FRAGMENT_NODE = 11;\nvar NOTATION_NODE = NodeType.NOTATION_NODE = 12;\n// ExceptionCode\nvar ExceptionCode = {};\nvar ExceptionMessage = {};\nvar INDEX_SIZE_ERR = ExceptionCode.INDEX_SIZE_ERR = (ExceptionMessage[1] = \"Index size error\", 1);\nvar DOMSTRING_SIZE_ERR = ExceptionCode.DOMSTRING_SIZE_ERR = (ExceptionMessage[2] = \"DOMString size error\", 2);\nvar HIERARCHY_REQUEST_ERR = ExceptionCode.HIERARCHY_REQUEST_ERR = (ExceptionMessage[3] = \"Hierarchy request error\", 3);\nvar WRONG_DOCUMENT_ERR = ExceptionCode.WRONG_DOCUMENT_ERR = (ExceptionMessage[4] = \"Wrong document\", 4);\nvar INVALID_CHARACTER_ERR = ExceptionCode.INVALID_CHARACTER_ERR = (ExceptionMessage[5] = \"Invalid character\", 5);\nvar NO_DATA_ALLOWED_ERR = ExceptionCode.NO_DATA_ALLOWED_ERR = (ExceptionMessage[6] = \"No data allowed\", 6);\nvar NO_MODIFICATION_ALLOWED_ERR = ExceptionCode.NO_MODIFICATION_ALLOWED_ERR = (ExceptionMessage[7] = \"No modification allowed\", 7);\nvar NOT_FOUND_ERR = ExceptionCode.NOT_FOUND_ERR = (ExceptionMessage[8] = \"Not found\", 8);\nvar NOT_SUPPORTED_ERR = ExceptionCode.NOT_SUPPORTED_ERR = (ExceptionMessage[9] = \"Not supported\", 9);\nvar INUSE_ATTRIBUTE_ERR = ExceptionCode.INUSE_ATTRIBUTE_ERR = (ExceptionMessage[10] = \"Attribute in use\", 10);\n//level2\nvar INVALID_STATE_ERR = ExceptionCode.INVALID_STATE_ERR = (ExceptionMessage[11] = \"Invalid state\", 11);\nvar SYNTAX_ERR = ExceptionCode.SYNTAX_ERR = (ExceptionMessage[12] = \"Syntax error\", 12);\nvar INVALID_MODIFICATION_ERR = ExceptionCode.INVALID_MODIFICATION_ERR = (ExceptionMessage[13] = \"Invalid modification\", 13);\nvar NAMESPACE_ERR = ExceptionCode.NAMESPACE_ERR = (ExceptionMessage[14] = \"Invalid namespace\", 14);\nvar INVALID_ACCESS_ERR = ExceptionCode.INVALID_ACCESS_ERR = (ExceptionMessage[15] = \"Invalid access\", 15);\n/**\n * DOM Level 2\n * Object DOMException\n * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/ecma-script-binding.html\n * @see http://www.w3.org/TR/REC-DOM-Level-1/ecma-script-language-binding.html\n */ function DOMException(code, message) {\n    if (message instanceof Error) {\n        var error = message;\n    } else {\n        error = this;\n        Error.call(this, ExceptionMessage[code]);\n        this.message = ExceptionMessage[code];\n        if (Error.captureStackTrace) Error.captureStackTrace(this, DOMException);\n    }\n    error.code = code;\n    if (message) this.message = this.message + \": \" + message;\n    return error;\n}\n;\nDOMException.prototype = Error.prototype;\ncopy(ExceptionCode, DOMException);\n/**\n * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-536297177\n * The NodeList interface provides the abstraction of an ordered collection of nodes, without defining or constraining how this collection is implemented. NodeList objects in the DOM are live.\n * The items in the NodeList are accessible via an integral index, starting from 0.\n */ function NodeList() {}\n;\nNodeList.prototype = {\n    /**\n\t * The number of nodes in the list. The range of valid child node indices is 0 to length-1 inclusive.\n\t * @standard level1\n\t */ length: 0,\n    /**\n\t * Returns the indexth item in the collection. If index is greater than or equal to the number of nodes in the list, this returns null.\n\t * @standard level1\n\t * @param index  unsigned long\n\t *   Index into the collection.\n\t * @return Node\n\t * \tThe node at the indexth position in the NodeList, or null if that is not a valid index.\n\t */ item: function(index) {\n        return index >= 0 && index < this.length ? this[index] : null;\n    },\n    toString: function(isHTML, nodeFilter) {\n        for(var buf = [], i = 0; i < this.length; i++){\n            serializeToString(this[i], buf, isHTML, nodeFilter);\n        }\n        return buf.join(\"\");\n    },\n    /**\n\t * @private\n\t * @param {function (Node):boolean} predicate\n\t * @returns {Node[]}\n\t */ filter: function(predicate) {\n        return Array.prototype.filter.call(this, predicate);\n    },\n    /**\n\t * @private\n\t * @param {Node} item\n\t * @returns {number}\n\t */ indexOf: function(item) {\n        return Array.prototype.indexOf.call(this, item);\n    }\n};\nfunction LiveNodeList(node, refresh) {\n    this._node = node;\n    this._refresh = refresh;\n    _updateLiveList(this);\n}\nfunction _updateLiveList(list) {\n    var inc = list._node._inc || list._node.ownerDocument._inc;\n    if (list._inc !== inc) {\n        var ls = list._refresh(list._node);\n        __set__(list, \"length\", ls.length);\n        if (!list.$$length || ls.length < list.$$length) {\n            for(var i = ls.length; (i in list); i++){\n                if (Object.prototype.hasOwnProperty.call(list, i)) {\n                    delete list[i];\n                }\n            }\n        }\n        copy(ls, list);\n        list._inc = inc;\n    }\n}\nLiveNodeList.prototype.item = function(i) {\n    _updateLiveList(this);\n    return this[i] || null;\n};\n_extends(LiveNodeList, NodeList);\n/**\n * Objects implementing the NamedNodeMap interface are used\n * to represent collections of nodes that can be accessed by name.\n * Note that NamedNodeMap does not inherit from NodeList;\n * NamedNodeMaps are not maintained in any particular order.\n * Objects contained in an object implementing NamedNodeMap may also be accessed by an ordinal index,\n * but this is simply to allow convenient enumeration of the contents of a NamedNodeMap,\n * and does not imply that the DOM specifies an order to these Nodes.\n * NamedNodeMap objects in the DOM are live.\n * used for attributes or DocumentType entities\n */ function NamedNodeMap() {}\n;\nfunction _findNodeIndex(list, node) {\n    var i = list.length;\n    while(i--){\n        if (list[i] === node) {\n            return i;\n        }\n    }\n}\nfunction _addNamedNode(el, list, newAttr, oldAttr) {\n    if (oldAttr) {\n        list[_findNodeIndex(list, oldAttr)] = newAttr;\n    } else {\n        list[list.length++] = newAttr;\n    }\n    if (el) {\n        newAttr.ownerElement = el;\n        var doc = el.ownerDocument;\n        if (doc) {\n            oldAttr && _onRemoveAttribute(doc, el, oldAttr);\n            _onAddAttribute(doc, el, newAttr);\n        }\n    }\n}\nfunction _removeNamedNode(el, list, attr) {\n    //console.log('remove attr:'+attr)\n    var i = _findNodeIndex(list, attr);\n    if (i >= 0) {\n        var lastIndex = list.length - 1;\n        while(i < lastIndex){\n            list[i] = list[++i];\n        }\n        list.length = lastIndex;\n        if (el) {\n            var doc = el.ownerDocument;\n            if (doc) {\n                _onRemoveAttribute(doc, el, attr);\n                attr.ownerElement = null;\n            }\n        }\n    } else {\n        throw new DOMException(NOT_FOUND_ERR, new Error(el.tagName + \"@\" + attr));\n    }\n}\nNamedNodeMap.prototype = {\n    length: 0,\n    item: NodeList.prototype.item,\n    getNamedItem: function(key) {\n        //\t\tif(key.indexOf(':')>0 || key == 'xmlns'){\n        //\t\t\treturn null;\n        //\t\t}\n        //console.log()\n        var i = this.length;\n        while(i--){\n            var attr = this[i];\n            //console.log(attr.nodeName,key)\n            if (attr.nodeName == key) {\n                return attr;\n            }\n        }\n    },\n    setNamedItem: function(attr) {\n        var el = attr.ownerElement;\n        if (el && el != this._ownerElement) {\n            throw new DOMException(INUSE_ATTRIBUTE_ERR);\n        }\n        var oldAttr = this.getNamedItem(attr.nodeName);\n        _addNamedNode(this._ownerElement, this, attr, oldAttr);\n        return oldAttr;\n    },\n    /* returns Node */ setNamedItemNS: function(attr) {\n        var el = attr.ownerElement, oldAttr;\n        if (el && el != this._ownerElement) {\n            throw new DOMException(INUSE_ATTRIBUTE_ERR);\n        }\n        oldAttr = this.getNamedItemNS(attr.namespaceURI, attr.localName);\n        _addNamedNode(this._ownerElement, this, attr, oldAttr);\n        return oldAttr;\n    },\n    /* returns Node */ removeNamedItem: function(key) {\n        var attr = this.getNamedItem(key);\n        _removeNamedNode(this._ownerElement, this, attr);\n        return attr;\n    },\n    //for level2\n    removeNamedItemNS: function(namespaceURI, localName) {\n        var attr = this.getNamedItemNS(namespaceURI, localName);\n        _removeNamedNode(this._ownerElement, this, attr);\n        return attr;\n    },\n    getNamedItemNS: function(namespaceURI, localName) {\n        var i = this.length;\n        while(i--){\n            var node = this[i];\n            if (node.localName == localName && node.namespaceURI == namespaceURI) {\n                return node;\n            }\n        }\n        return null;\n    }\n};\n/**\n * The DOMImplementation interface represents an object providing methods\n * which are not dependent on any particular document.\n * Such an object is returned by the `Document.implementation` property.\n *\n * __The individual methods describe the differences compared to the specs.__\n *\n * @constructor\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation MDN\n * @see https://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-102161490 DOM Level 1 Core (Initial)\n * @see https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-102161490 DOM Level 2 Core\n * @see https://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-102161490 DOM Level 3 Core\n * @see https://dom.spec.whatwg.org/#domimplementation DOM Living Standard\n */ function DOMImplementation() {}\nDOMImplementation.prototype = {\n    /**\n\t * The DOMImplementation.hasFeature() method returns a Boolean flag indicating if a given feature is supported.\n\t * The different implementations fairly diverged in what kind of features were reported.\n\t * The latest version of the spec settled to force this method to always return true, where the functionality was accurate and in use.\n\t *\n\t * @deprecated It is deprecated and modern browsers return true in all cases.\n\t *\n\t * @param {string} feature\n\t * @param {string} [version]\n\t * @returns {boolean} always true\n\t *\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/hasFeature MDN\n\t * @see https://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-5CED94D7 DOM Level 1 Core\n\t * @see https://dom.spec.whatwg.org/#dom-domimplementation-hasfeature DOM Living Standard\n\t */ hasFeature: function(feature, version) {\n        return true;\n    },\n    /**\n\t * Creates an XML Document object of the specified type with its document element.\n\t *\n\t * __It behaves slightly different from the description in the living standard__:\n\t * - There is no interface/class `XMLDocument`, it returns a `Document` instance.\n\t * - `contentType`, `encoding`, `mode`, `origin`, `url` fields are currently not declared.\n\t * - this implementation is not validating names or qualified names\n\t *   (when parsing XML strings, the SAX parser takes care of that)\n\t *\n\t * @param {string|null} namespaceURI\n\t * @param {string} qualifiedName\n\t * @param {DocumentType=null} doctype\n\t * @returns {Document}\n\t *\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createDocument MDN\n\t * @see https://www.w3.org/TR/DOM-Level-2-Core/core.html#Level-2-Core-DOM-createDocument DOM Level 2 Core (initial)\n\t * @see https://dom.spec.whatwg.org/#dom-domimplementation-createdocument  DOM Level 2 Core\n\t *\n\t * @see https://dom.spec.whatwg.org/#validate-and-extract DOM: Validate and extract\n\t * @see https://www.w3.org/TR/xml/#NT-NameStartChar XML Spec: Names\n\t * @see https://www.w3.org/TR/xml-names/#ns-qualnames XML Namespaces: Qualified names\n\t */ createDocument: function(namespaceURI, qualifiedName, doctype) {\n        var doc = new Document();\n        doc.implementation = this;\n        doc.childNodes = new NodeList();\n        doc.doctype = doctype || null;\n        if (doctype) {\n            doc.appendChild(doctype);\n        }\n        if (qualifiedName) {\n            var root = doc.createElementNS(namespaceURI, qualifiedName);\n            doc.appendChild(root);\n        }\n        return doc;\n    },\n    /**\n\t * Returns a doctype, with the given `qualifiedName`, `publicId`, and `systemId`.\n\t *\n\t * __This behavior is slightly different from the in the specs__:\n\t * - this implementation is not validating names or qualified names\n\t *   (when parsing XML strings, the SAX parser takes care of that)\n\t *\n\t * @param {string} qualifiedName\n\t * @param {string} [publicId]\n\t * @param {string} [systemId]\n\t * @returns {DocumentType} which can either be used with `DOMImplementation.createDocument` upon document creation\n\t * \t\t\t\t  or can be put into the document via methods like `Node.insertBefore()` or `Node.replaceChild()`\n\t *\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createDocumentType MDN\n\t * @see https://www.w3.org/TR/DOM-Level-2-Core/core.html#Level-2-Core-DOM-createDocType DOM Level 2 Core\n\t * @see https://dom.spec.whatwg.org/#dom-domimplementation-createdocumenttype DOM Living Standard\n\t *\n\t * @see https://dom.spec.whatwg.org/#validate-and-extract DOM: Validate and extract\n\t * @see https://www.w3.org/TR/xml/#NT-NameStartChar XML Spec: Names\n\t * @see https://www.w3.org/TR/xml-names/#ns-qualnames XML Namespaces: Qualified names\n\t */ createDocumentType: function(qualifiedName, publicId, systemId) {\n        var node = new DocumentType();\n        node.name = qualifiedName;\n        node.nodeName = qualifiedName;\n        node.publicId = publicId || \"\";\n        node.systemId = systemId || \"\";\n        return node;\n    }\n};\n/**\n * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-1950641247\n */ function Node() {}\n;\nNode.prototype = {\n    firstChild: null,\n    lastChild: null,\n    previousSibling: null,\n    nextSibling: null,\n    attributes: null,\n    parentNode: null,\n    childNodes: null,\n    ownerDocument: null,\n    nodeValue: null,\n    namespaceURI: null,\n    prefix: null,\n    localName: null,\n    // Modified in DOM Level 2:\n    insertBefore: function(newChild, refChild) {\n        return _insertBefore(this, newChild, refChild);\n    },\n    replaceChild: function(newChild, oldChild) {\n        _insertBefore(this, newChild, oldChild, assertPreReplacementValidityInDocument);\n        if (oldChild) {\n            this.removeChild(oldChild);\n        }\n    },\n    removeChild: function(oldChild) {\n        return _removeChild(this, oldChild);\n    },\n    appendChild: function(newChild) {\n        return this.insertBefore(newChild, null);\n    },\n    hasChildNodes: function() {\n        return this.firstChild != null;\n    },\n    cloneNode: function(deep) {\n        return cloneNode(this.ownerDocument || this, this, deep);\n    },\n    // Modified in DOM Level 2:\n    normalize: function() {\n        var child = this.firstChild;\n        while(child){\n            var next = child.nextSibling;\n            if (next && next.nodeType == TEXT_NODE && child.nodeType == TEXT_NODE) {\n                this.removeChild(next);\n                child.appendData(next.data);\n            } else {\n                child.normalize();\n                child = next;\n            }\n        }\n    },\n    // Introduced in DOM Level 2:\n    isSupported: function(feature, version) {\n        return this.ownerDocument.implementation.hasFeature(feature, version);\n    },\n    // Introduced in DOM Level 2:\n    hasAttributes: function() {\n        return this.attributes.length > 0;\n    },\n    /**\n\t * Look up the prefix associated to the given namespace URI, starting from this node.\n\t * **The default namespace declarations are ignored by this method.**\n\t * See Namespace Prefix Lookup for details on the algorithm used by this method.\n\t *\n\t * _Note: The implementation seems to be incomplete when compared to the algorithm described in the specs._\n\t *\n\t * @param {string | null} namespaceURI\n\t * @returns {string | null}\n\t * @see https://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-lookupNamespacePrefix\n\t * @see https://www.w3.org/TR/DOM-Level-3-Core/namespaces-algorithms.html#lookupNamespacePrefixAlgo\n\t * @see https://dom.spec.whatwg.org/#dom-node-lookupprefix\n\t * @see https://github.com/xmldom/xmldom/issues/322\n\t */ lookupPrefix: function(namespaceURI) {\n        var el = this;\n        while(el){\n            var map = el._nsMap;\n            //console.dir(map)\n            if (map) {\n                for(var n in map){\n                    if (Object.prototype.hasOwnProperty.call(map, n) && map[n] === namespaceURI) {\n                        return n;\n                    }\n                }\n            }\n            el = el.nodeType == ATTRIBUTE_NODE ? el.ownerDocument : el.parentNode;\n        }\n        return null;\n    },\n    // Introduced in DOM Level 3:\n    lookupNamespaceURI: function(prefix) {\n        var el = this;\n        while(el){\n            var map = el._nsMap;\n            //console.dir(map)\n            if (map) {\n                if (Object.prototype.hasOwnProperty.call(map, prefix)) {\n                    return map[prefix];\n                }\n            }\n            el = el.nodeType == ATTRIBUTE_NODE ? el.ownerDocument : el.parentNode;\n        }\n        return null;\n    },\n    // Introduced in DOM Level 3:\n    isDefaultNamespace: function(namespaceURI) {\n        var prefix = this.lookupPrefix(namespaceURI);\n        return prefix == null;\n    }\n};\nfunction _xmlEncoder(c) {\n    return c == \"<\" && \"&lt;\" || c == \">\" && \"&gt;\" || c == \"&\" && \"&amp;\" || c == '\"' && \"&quot;\" || \"&#\" + c.charCodeAt() + \";\";\n}\ncopy(NodeType, Node);\ncopy(NodeType, Node.prototype);\n/**\n * @param callback return true for continue,false for break\n * @return boolean true: break visit;\n */ function _visitNode(node, callback) {\n    if (callback(node)) {\n        return true;\n    }\n    if (node = node.firstChild) {\n        do {\n            if (_visitNode(node, callback)) {\n                return true;\n            }\n        }while (node = node.nextSibling);\n    }\n}\nfunction Document() {\n    this.ownerDocument = this;\n}\nfunction _onAddAttribute(doc, el, newAttr) {\n    doc && doc._inc++;\n    var ns = newAttr.namespaceURI;\n    if (ns === NAMESPACE.XMLNS) {\n        //update namespace\n        el._nsMap[newAttr.prefix ? newAttr.localName : \"\"] = newAttr.value;\n    }\n}\nfunction _onRemoveAttribute(doc, el, newAttr, remove) {\n    doc && doc._inc++;\n    var ns = newAttr.namespaceURI;\n    if (ns === NAMESPACE.XMLNS) {\n        //update namespace\n        delete el._nsMap[newAttr.prefix ? newAttr.localName : \"\"];\n    }\n}\n/**\n * Updates `el.childNodes`, updating the indexed items and it's `length`.\n * Passing `newChild` means it will be appended.\n * Otherwise it's assumed that an item has been removed,\n * and `el.firstNode` and it's `.nextSibling` are used\n * to walk the current list of child nodes.\n *\n * @param {Document} doc\n * @param {Node} el\n * @param {Node} [newChild]\n * @private\n */ function _onUpdateChild(doc, el, newChild) {\n    if (doc && doc._inc) {\n        doc._inc++;\n        //update childNodes\n        var cs = el.childNodes;\n        if (newChild) {\n            cs[cs.length++] = newChild;\n        } else {\n            var child = el.firstChild;\n            var i = 0;\n            while(child){\n                cs[i++] = child;\n                child = child.nextSibling;\n            }\n            cs.length = i;\n            delete cs[cs.length];\n        }\n    }\n}\n/**\n * Removes the connections between `parentNode` and `child`\n * and any existing `child.previousSibling` or `child.nextSibling`.\n *\n * @see https://github.com/xmldom/xmldom/issues/135\n * @see https://github.com/xmldom/xmldom/issues/145\n *\n * @param {Node} parentNode\n * @param {Node} child\n * @returns {Node} the child that was removed.\n * @private\n */ function _removeChild(parentNode, child) {\n    var previous = child.previousSibling;\n    var next = child.nextSibling;\n    if (previous) {\n        previous.nextSibling = next;\n    } else {\n        parentNode.firstChild = next;\n    }\n    if (next) {\n        next.previousSibling = previous;\n    } else {\n        parentNode.lastChild = previous;\n    }\n    child.parentNode = null;\n    child.previousSibling = null;\n    child.nextSibling = null;\n    _onUpdateChild(parentNode.ownerDocument, parentNode);\n    return child;\n}\n/**\n * Returns `true` if `node` can be a parent for insertion.\n * @param {Node} node\n * @returns {boolean}\n */ function hasValidParentNodeType(node) {\n    return node && (node.nodeType === Node.DOCUMENT_NODE || node.nodeType === Node.DOCUMENT_FRAGMENT_NODE || node.nodeType === Node.ELEMENT_NODE);\n}\n/**\n * Returns `true` if `node` can be inserted according to it's `nodeType`.\n * @param {Node} node\n * @returns {boolean}\n */ function hasInsertableNodeType(node) {\n    return node && (isElementNode(node) || isTextNode(node) || isDocTypeNode(node) || node.nodeType === Node.DOCUMENT_FRAGMENT_NODE || node.nodeType === Node.COMMENT_NODE || node.nodeType === Node.PROCESSING_INSTRUCTION_NODE);\n}\n/**\n * Returns true if `node` is a DOCTYPE node\n * @param {Node} node\n * @returns {boolean}\n */ function isDocTypeNode(node) {\n    return node && node.nodeType === Node.DOCUMENT_TYPE_NODE;\n}\n/**\n * Returns true if the node is an element\n * @param {Node} node\n * @returns {boolean}\n */ function isElementNode(node) {\n    return node && node.nodeType === Node.ELEMENT_NODE;\n}\n/**\n * Returns true if `node` is a text node\n * @param {Node} node\n * @returns {boolean}\n */ function isTextNode(node) {\n    return node && node.nodeType === Node.TEXT_NODE;\n}\n/**\n * Check if en element node can be inserted before `child`, or at the end if child is falsy,\n * according to the presence and position of a doctype node on the same level.\n *\n * @param {Document} doc The document node\n * @param {Node} child the node that would become the nextSibling if the element would be inserted\n * @returns {boolean} `true` if an element can be inserted before child\n * @private\n * https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity\n */ function isElementInsertionPossible(doc, child) {\n    var parentChildNodes = doc.childNodes || [];\n    if (find(parentChildNodes, isElementNode) || isDocTypeNode(child)) {\n        return false;\n    }\n    var docTypeNode = find(parentChildNodes, isDocTypeNode);\n    return !(child && docTypeNode && parentChildNodes.indexOf(docTypeNode) > parentChildNodes.indexOf(child));\n}\n/**\n * Check if en element node can be inserted before `child`, or at the end if child is falsy,\n * according to the presence and position of a doctype node on the same level.\n *\n * @param {Node} doc The document node\n * @param {Node} child the node that would become the nextSibling if the element would be inserted\n * @returns {boolean} `true` if an element can be inserted before child\n * @private\n * https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity\n */ function isElementReplacementPossible(doc, child) {\n    var parentChildNodes = doc.childNodes || [];\n    function hasElementChildThatIsNotChild(node) {\n        return isElementNode(node) && node !== child;\n    }\n    if (find(parentChildNodes, hasElementChildThatIsNotChild)) {\n        return false;\n    }\n    var docTypeNode = find(parentChildNodes, isDocTypeNode);\n    return !(child && docTypeNode && parentChildNodes.indexOf(docTypeNode) > parentChildNodes.indexOf(child));\n}\n/**\n * @private\n * Steps 1-5 of the checks before inserting and before replacing a child are the same.\n *\n * @param {Node} parent the parent node to insert `node` into\n * @param {Node} node the node to insert\n * @param {Node=} child the node that should become the `nextSibling` of `node`\n * @returns {Node}\n * @throws DOMException for several node combinations that would create a DOM that is not well-formed.\n * @throws DOMException if `child` is provided but is not a child of `parent`.\n * @see https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity\n * @see https://dom.spec.whatwg.org/#concept-node-replace\n */ function assertPreInsertionValidity1to5(parent, node, child) {\n    // 1. If `parent` is not a Document, DocumentFragment, or Element node, then throw a \"HierarchyRequestError\" DOMException.\n    if (!hasValidParentNodeType(parent)) {\n        throw new DOMException(HIERARCHY_REQUEST_ERR, \"Unexpected parent node type \" + parent.nodeType);\n    }\n    // 2. If `node` is a host-including inclusive ancestor of `parent`, then throw a \"HierarchyRequestError\" DOMException.\n    // not implemented!\n    // 3. If `child` is non-null and its parent is not `parent`, then throw a \"NotFoundError\" DOMException.\n    if (child && child.parentNode !== parent) {\n        throw new DOMException(NOT_FOUND_ERR, \"child not in parent\");\n    }\n    if (// 4. If `node` is not a DocumentFragment, DocumentType, Element, or CharacterData node, then throw a \"HierarchyRequestError\" DOMException.\n    !hasInsertableNodeType(node) || // 5. If either `node` is a Text node and `parent` is a document,\n    // the sax parser currently adds top level text nodes, this will be fixed in 0.9.0\n    // || (node.nodeType === Node.TEXT_NODE && parent.nodeType === Node.DOCUMENT_NODE)\n    // or `node` is a doctype and `parent` is not a document, then throw a \"HierarchyRequestError\" DOMException.\n    isDocTypeNode(node) && parent.nodeType !== Node.DOCUMENT_NODE) {\n        throw new DOMException(HIERARCHY_REQUEST_ERR, \"Unexpected node type \" + node.nodeType + \" for parent node type \" + parent.nodeType);\n    }\n}\n/**\n * @private\n * Step 6 of the checks before inserting and before replacing a child are different.\n *\n * @param {Document} parent the parent node to insert `node` into\n * @param {Node} node the node to insert\n * @param {Node | undefined} child the node that should become the `nextSibling` of `node`\n * @returns {Node}\n * @throws DOMException for several node combinations that would create a DOM that is not well-formed.\n * @throws DOMException if `child` is provided but is not a child of `parent`.\n * @see https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity\n * @see https://dom.spec.whatwg.org/#concept-node-replace\n */ function assertPreInsertionValidityInDocument(parent, node, child) {\n    var parentChildNodes = parent.childNodes || [];\n    var nodeChildNodes = node.childNodes || [];\n    // DocumentFragment\n    if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n        var nodeChildElements = nodeChildNodes.filter(isElementNode);\n        // If node has more than one element child or has a Text node child.\n        if (nodeChildElements.length > 1 || find(nodeChildNodes, isTextNode)) {\n            throw new DOMException(HIERARCHY_REQUEST_ERR, \"More than one element or text in fragment\");\n        }\n        // Otherwise, if `node` has one element child and either `parent` has an element child,\n        // `child` is a doctype, or `child` is non-null and a doctype is following `child`.\n        if (nodeChildElements.length === 1 && !isElementInsertionPossible(parent, child)) {\n            throw new DOMException(HIERARCHY_REQUEST_ERR, \"Element in fragment can not be inserted before doctype\");\n        }\n    }\n    // Element\n    if (isElementNode(node)) {\n        // `parent` has an element child, `child` is a doctype,\n        // or `child` is non-null and a doctype is following `child`.\n        if (!isElementInsertionPossible(parent, child)) {\n            throw new DOMException(HIERARCHY_REQUEST_ERR, \"Only one element can be added and only after doctype\");\n        }\n    }\n    // DocumentType\n    if (isDocTypeNode(node)) {\n        // `parent` has a doctype child,\n        if (find(parentChildNodes, isDocTypeNode)) {\n            throw new DOMException(HIERARCHY_REQUEST_ERR, \"Only one doctype is allowed\");\n        }\n        var parentElementChild = find(parentChildNodes, isElementNode);\n        // `child` is non-null and an element is preceding `child`,\n        if (child && parentChildNodes.indexOf(parentElementChild) < parentChildNodes.indexOf(child)) {\n            throw new DOMException(HIERARCHY_REQUEST_ERR, \"Doctype can only be inserted before an element\");\n        }\n        // or `child` is null and `parent` has an element child.\n        if (!child && parentElementChild) {\n            throw new DOMException(HIERARCHY_REQUEST_ERR, \"Doctype can not be appended since element is present\");\n        }\n    }\n}\n/**\n * @private\n * Step 6 of the checks before inserting and before replacing a child are different.\n *\n * @param {Document} parent the parent node to insert `node` into\n * @param {Node} node the node to insert\n * @param {Node | undefined} child the node that should become the `nextSibling` of `node`\n * @returns {Node}\n * @throws DOMException for several node combinations that would create a DOM that is not well-formed.\n * @throws DOMException if `child` is provided but is not a child of `parent`.\n * @see https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity\n * @see https://dom.spec.whatwg.org/#concept-node-replace\n */ function assertPreReplacementValidityInDocument(parent, node, child) {\n    var parentChildNodes = parent.childNodes || [];\n    var nodeChildNodes = node.childNodes || [];\n    // DocumentFragment\n    if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n        var nodeChildElements = nodeChildNodes.filter(isElementNode);\n        // If `node` has more than one element child or has a Text node child.\n        if (nodeChildElements.length > 1 || find(nodeChildNodes, isTextNode)) {\n            throw new DOMException(HIERARCHY_REQUEST_ERR, \"More than one element or text in fragment\");\n        }\n        // Otherwise, if `node` has one element child and either `parent` has an element child that is not `child` or a doctype is following `child`.\n        if (nodeChildElements.length === 1 && !isElementReplacementPossible(parent, child)) {\n            throw new DOMException(HIERARCHY_REQUEST_ERR, \"Element in fragment can not be inserted before doctype\");\n        }\n    }\n    // Element\n    if (isElementNode(node)) {\n        // `parent` has an element child that is not `child` or a doctype is following `child`.\n        if (!isElementReplacementPossible(parent, child)) {\n            throw new DOMException(HIERARCHY_REQUEST_ERR, \"Only one element can be added and only after doctype\");\n        }\n    }\n    // DocumentType\n    if (isDocTypeNode(node)) {\n        function hasDoctypeChildThatIsNotChild(node) {\n            return isDocTypeNode(node) && node !== child;\n        }\n        // `parent` has a doctype child that is not `child`,\n        if (find(parentChildNodes, hasDoctypeChildThatIsNotChild)) {\n            throw new DOMException(HIERARCHY_REQUEST_ERR, \"Only one doctype is allowed\");\n        }\n        var parentElementChild = find(parentChildNodes, isElementNode);\n        // or an element is preceding `child`.\n        if (child && parentChildNodes.indexOf(parentElementChild) < parentChildNodes.indexOf(child)) {\n            throw new DOMException(HIERARCHY_REQUEST_ERR, \"Doctype can only be inserted before an element\");\n        }\n    }\n}\n/**\n * @private\n * @param {Node} parent the parent node to insert `node` into\n * @param {Node} node the node to insert\n * @param {Node=} child the node that should become the `nextSibling` of `node`\n * @returns {Node}\n * @throws DOMException for several node combinations that would create a DOM that is not well-formed.\n * @throws DOMException if `child` is provided but is not a child of `parent`.\n * @see https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity\n */ function _insertBefore(parent, node, child, _inDocumentAssertion) {\n    // To ensure pre-insertion validity of a node into a parent before a child, run these steps:\n    assertPreInsertionValidity1to5(parent, node, child);\n    // If parent is a document, and any of the statements below, switched on the interface node implements,\n    // are true, then throw a \"HierarchyRequestError\" DOMException.\n    if (parent.nodeType === Node.DOCUMENT_NODE) {\n        (_inDocumentAssertion || assertPreInsertionValidityInDocument)(parent, node, child);\n    }\n    var cp = node.parentNode;\n    if (cp) {\n        cp.removeChild(node); //remove and update\n    }\n    if (node.nodeType === DOCUMENT_FRAGMENT_NODE) {\n        var newFirst = node.firstChild;\n        if (newFirst == null) {\n            return node;\n        }\n        var newLast = node.lastChild;\n    } else {\n        newFirst = newLast = node;\n    }\n    var pre = child ? child.previousSibling : parent.lastChild;\n    newFirst.previousSibling = pre;\n    newLast.nextSibling = child;\n    if (pre) {\n        pre.nextSibling = newFirst;\n    } else {\n        parent.firstChild = newFirst;\n    }\n    if (child == null) {\n        parent.lastChild = newLast;\n    } else {\n        child.previousSibling = newLast;\n    }\n    do {\n        newFirst.parentNode = parent;\n    }while (newFirst !== newLast && (newFirst = newFirst.nextSibling));\n    _onUpdateChild(parent.ownerDocument || parent, parent);\n    //console.log(parent.lastChild.nextSibling == null)\n    if (node.nodeType == DOCUMENT_FRAGMENT_NODE) {\n        node.firstChild = node.lastChild = null;\n    }\n    return node;\n}\n/**\n * Appends `newChild` to `parentNode`.\n * If `newChild` is already connected to a `parentNode` it is first removed from it.\n *\n * @see https://github.com/xmldom/xmldom/issues/135\n * @see https://github.com/xmldom/xmldom/issues/145\n * @param {Node} parentNode\n * @param {Node} newChild\n * @returns {Node}\n * @private\n */ function _appendSingleChild(parentNode, newChild) {\n    if (newChild.parentNode) {\n        newChild.parentNode.removeChild(newChild);\n    }\n    newChild.parentNode = parentNode;\n    newChild.previousSibling = parentNode.lastChild;\n    newChild.nextSibling = null;\n    if (newChild.previousSibling) {\n        newChild.previousSibling.nextSibling = newChild;\n    } else {\n        parentNode.firstChild = newChild;\n    }\n    parentNode.lastChild = newChild;\n    _onUpdateChild(parentNode.ownerDocument, parentNode, newChild);\n    return newChild;\n}\nDocument.prototype = {\n    //implementation : null,\n    nodeName: \"#document\",\n    nodeType: DOCUMENT_NODE,\n    /**\n\t * The DocumentType node of the document.\n\t *\n\t * @readonly\n\t * @type DocumentType\n\t */ doctype: null,\n    documentElement: null,\n    _inc: 1,\n    insertBefore: function(newChild, refChild) {\n        if (newChild.nodeType == DOCUMENT_FRAGMENT_NODE) {\n            var child = newChild.firstChild;\n            while(child){\n                var next = child.nextSibling;\n                this.insertBefore(child, refChild);\n                child = next;\n            }\n            return newChild;\n        }\n        _insertBefore(this, newChild, refChild);\n        newChild.ownerDocument = this;\n        if (this.documentElement === null && newChild.nodeType === ELEMENT_NODE) {\n            this.documentElement = newChild;\n        }\n        return newChild;\n    },\n    removeChild: function(oldChild) {\n        if (this.documentElement == oldChild) {\n            this.documentElement = null;\n        }\n        return _removeChild(this, oldChild);\n    },\n    replaceChild: function(newChild, oldChild) {\n        //raises\n        _insertBefore(this, newChild, oldChild, assertPreReplacementValidityInDocument);\n        newChild.ownerDocument = this;\n        if (oldChild) {\n            this.removeChild(oldChild);\n        }\n        if (isElementNode(newChild)) {\n            this.documentElement = newChild;\n        }\n    },\n    // Introduced in DOM Level 2:\n    importNode: function(importedNode, deep) {\n        return importNode(this, importedNode, deep);\n    },\n    // Introduced in DOM Level 2:\n    getElementById: function(id) {\n        var rtv = null;\n        _visitNode(this.documentElement, function(node) {\n            if (node.nodeType == ELEMENT_NODE) {\n                if (node.getAttribute(\"id\") == id) {\n                    rtv = node;\n                    return true;\n                }\n            }\n        });\n        return rtv;\n    },\n    /**\n\t * The `getElementsByClassName` method of `Document` interface returns an array-like object\n\t * of all child elements which have **all** of the given class name(s).\n\t *\n\t * Returns an empty list if `classeNames` is an empty string or only contains HTML white space characters.\n\t *\n\t *\n\t * Warning: This is a live LiveNodeList.\n\t * Changes in the DOM will reflect in the array as the changes occur.\n\t * If an element selected by this array no longer qualifies for the selector,\n\t * it will automatically be removed. Be aware of this for iteration purposes.\n\t *\n\t * @param {string} classNames is a string representing the class name(s) to match; multiple class names are separated by (ASCII-)whitespace\n\t *\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByClassName\n\t * @see https://dom.spec.whatwg.org/#concept-getelementsbyclassname\n\t */ getElementsByClassName: function(classNames) {\n        var classNamesSet = toOrderedSet(classNames);\n        return new LiveNodeList(this, function(base) {\n            var ls = [];\n            if (classNamesSet.length > 0) {\n                _visitNode(base.documentElement, function(node) {\n                    if (node !== base && node.nodeType === ELEMENT_NODE) {\n                        var nodeClassNames = node.getAttribute(\"class\");\n                        // can be null if the attribute does not exist\n                        if (nodeClassNames) {\n                            // before splitting and iterating just compare them for the most common case\n                            var matches = classNames === nodeClassNames;\n                            if (!matches) {\n                                var nodeClassNamesSet = toOrderedSet(nodeClassNames);\n                                matches = classNamesSet.every(arrayIncludes(nodeClassNamesSet));\n                            }\n                            if (matches) {\n                                ls.push(node);\n                            }\n                        }\n                    }\n                });\n            }\n            return ls;\n        });\n    },\n    //document factory method:\n    createElement: function(tagName) {\n        var node = new Element();\n        node.ownerDocument = this;\n        node.nodeName = tagName;\n        node.tagName = tagName;\n        node.localName = tagName;\n        node.childNodes = new NodeList();\n        var attrs = node.attributes = new NamedNodeMap();\n        attrs._ownerElement = node;\n        return node;\n    },\n    createDocumentFragment: function() {\n        var node = new DocumentFragment();\n        node.ownerDocument = this;\n        node.childNodes = new NodeList();\n        return node;\n    },\n    createTextNode: function(data) {\n        var node = new Text();\n        node.ownerDocument = this;\n        node.appendData(data);\n        return node;\n    },\n    createComment: function(data) {\n        var node = new Comment();\n        node.ownerDocument = this;\n        node.appendData(data);\n        return node;\n    },\n    createCDATASection: function(data) {\n        var node = new CDATASection();\n        node.ownerDocument = this;\n        node.appendData(data);\n        return node;\n    },\n    createProcessingInstruction: function(target, data) {\n        var node = new ProcessingInstruction();\n        node.ownerDocument = this;\n        node.tagName = node.nodeName = node.target = target;\n        node.nodeValue = node.data = data;\n        return node;\n    },\n    createAttribute: function(name) {\n        var node = new Attr();\n        node.ownerDocument = this;\n        node.name = name;\n        node.nodeName = name;\n        node.localName = name;\n        node.specified = true;\n        return node;\n    },\n    createEntityReference: function(name) {\n        var node = new EntityReference();\n        node.ownerDocument = this;\n        node.nodeName = name;\n        return node;\n    },\n    // Introduced in DOM Level 2:\n    createElementNS: function(namespaceURI, qualifiedName) {\n        var node = new Element();\n        var pl = qualifiedName.split(\":\");\n        var attrs = node.attributes = new NamedNodeMap();\n        node.childNodes = new NodeList();\n        node.ownerDocument = this;\n        node.nodeName = qualifiedName;\n        node.tagName = qualifiedName;\n        node.namespaceURI = namespaceURI;\n        if (pl.length == 2) {\n            node.prefix = pl[0];\n            node.localName = pl[1];\n        } else {\n            //el.prefix = null;\n            node.localName = qualifiedName;\n        }\n        attrs._ownerElement = node;\n        return node;\n    },\n    // Introduced in DOM Level 2:\n    createAttributeNS: function(namespaceURI, qualifiedName) {\n        var node = new Attr();\n        var pl = qualifiedName.split(\":\");\n        node.ownerDocument = this;\n        node.nodeName = qualifiedName;\n        node.name = qualifiedName;\n        node.namespaceURI = namespaceURI;\n        node.specified = true;\n        if (pl.length == 2) {\n            node.prefix = pl[0];\n            node.localName = pl[1];\n        } else {\n            //el.prefix = null;\n            node.localName = qualifiedName;\n        }\n        return node;\n    }\n};\n_extends(Document, Node);\nfunction Element() {\n    this._nsMap = {};\n}\n;\nElement.prototype = {\n    nodeType: ELEMENT_NODE,\n    hasAttribute: function(name) {\n        return this.getAttributeNode(name) != null;\n    },\n    getAttribute: function(name) {\n        var attr = this.getAttributeNode(name);\n        return attr && attr.value || \"\";\n    },\n    getAttributeNode: function(name) {\n        return this.attributes.getNamedItem(name);\n    },\n    setAttribute: function(name, value) {\n        var attr = this.ownerDocument.createAttribute(name);\n        attr.value = attr.nodeValue = \"\" + value;\n        this.setAttributeNode(attr);\n    },\n    removeAttribute: function(name) {\n        var attr = this.getAttributeNode(name);\n        attr && this.removeAttributeNode(attr);\n    },\n    //four real opeartion method\n    appendChild: function(newChild) {\n        if (newChild.nodeType === DOCUMENT_FRAGMENT_NODE) {\n            return this.insertBefore(newChild, null);\n        } else {\n            return _appendSingleChild(this, newChild);\n        }\n    },\n    setAttributeNode: function(newAttr) {\n        return this.attributes.setNamedItem(newAttr);\n    },\n    setAttributeNodeNS: function(newAttr) {\n        return this.attributes.setNamedItemNS(newAttr);\n    },\n    removeAttributeNode: function(oldAttr) {\n        //console.log(this == oldAttr.ownerElement)\n        return this.attributes.removeNamedItem(oldAttr.nodeName);\n    },\n    //get real attribute name,and remove it by removeAttributeNode\n    removeAttributeNS: function(namespaceURI, localName) {\n        var old = this.getAttributeNodeNS(namespaceURI, localName);\n        old && this.removeAttributeNode(old);\n    },\n    hasAttributeNS: function(namespaceURI, localName) {\n        return this.getAttributeNodeNS(namespaceURI, localName) != null;\n    },\n    getAttributeNS: function(namespaceURI, localName) {\n        var attr = this.getAttributeNodeNS(namespaceURI, localName);\n        return attr && attr.value || \"\";\n    },\n    setAttributeNS: function(namespaceURI, qualifiedName, value) {\n        var attr = this.ownerDocument.createAttributeNS(namespaceURI, qualifiedName);\n        attr.value = attr.nodeValue = \"\" + value;\n        this.setAttributeNode(attr);\n    },\n    getAttributeNodeNS: function(namespaceURI, localName) {\n        return this.attributes.getNamedItemNS(namespaceURI, localName);\n    },\n    getElementsByTagName: function(tagName) {\n        return new LiveNodeList(this, function(base) {\n            var ls = [];\n            _visitNode(base, function(node) {\n                if (node !== base && node.nodeType == ELEMENT_NODE && (tagName === \"*\" || node.tagName == tagName)) {\n                    ls.push(node);\n                }\n            });\n            return ls;\n        });\n    },\n    getElementsByTagNameNS: function(namespaceURI, localName) {\n        return new LiveNodeList(this, function(base) {\n            var ls = [];\n            _visitNode(base, function(node) {\n                if (node !== base && node.nodeType === ELEMENT_NODE && (namespaceURI === \"*\" || node.namespaceURI === namespaceURI) && (localName === \"*\" || node.localName == localName)) {\n                    ls.push(node);\n                }\n            });\n            return ls;\n        });\n    }\n};\nDocument.prototype.getElementsByTagName = Element.prototype.getElementsByTagName;\nDocument.prototype.getElementsByTagNameNS = Element.prototype.getElementsByTagNameNS;\n_extends(Element, Node);\nfunction Attr() {}\n;\nAttr.prototype.nodeType = ATTRIBUTE_NODE;\n_extends(Attr, Node);\nfunction CharacterData() {}\n;\nCharacterData.prototype = {\n    data: \"\",\n    substringData: function(offset, count) {\n        return this.data.substring(offset, offset + count);\n    },\n    appendData: function(text) {\n        text = this.data + text;\n        this.nodeValue = this.data = text;\n        this.length = text.length;\n    },\n    insertData: function(offset, text) {\n        this.replaceData(offset, 0, text);\n    },\n    appendChild: function(newChild) {\n        throw new Error(ExceptionMessage[HIERARCHY_REQUEST_ERR]);\n    },\n    deleteData: function(offset, count) {\n        this.replaceData(offset, count, \"\");\n    },\n    replaceData: function(offset, count, text) {\n        var start = this.data.substring(0, offset);\n        var end = this.data.substring(offset + count);\n        text = start + text + end;\n        this.nodeValue = this.data = text;\n        this.length = text.length;\n    }\n};\n_extends(CharacterData, Node);\nfunction Text() {}\n;\nText.prototype = {\n    nodeName: \"#text\",\n    nodeType: TEXT_NODE,\n    splitText: function(offset) {\n        var text = this.data;\n        var newText = text.substring(offset);\n        text = text.substring(0, offset);\n        this.data = this.nodeValue = text;\n        this.length = text.length;\n        var newNode = this.ownerDocument.createTextNode(newText);\n        if (this.parentNode) {\n            this.parentNode.insertBefore(newNode, this.nextSibling);\n        }\n        return newNode;\n    }\n};\n_extends(Text, CharacterData);\nfunction Comment() {}\n;\nComment.prototype = {\n    nodeName: \"#comment\",\n    nodeType: COMMENT_NODE\n};\n_extends(Comment, CharacterData);\nfunction CDATASection() {}\n;\nCDATASection.prototype = {\n    nodeName: \"#cdata-section\",\n    nodeType: CDATA_SECTION_NODE\n};\n_extends(CDATASection, CharacterData);\nfunction DocumentType() {}\n;\nDocumentType.prototype.nodeType = DOCUMENT_TYPE_NODE;\n_extends(DocumentType, Node);\nfunction Notation() {}\n;\nNotation.prototype.nodeType = NOTATION_NODE;\n_extends(Notation, Node);\nfunction Entity() {}\n;\nEntity.prototype.nodeType = ENTITY_NODE;\n_extends(Entity, Node);\nfunction EntityReference() {}\n;\nEntityReference.prototype.nodeType = ENTITY_REFERENCE_NODE;\n_extends(EntityReference, Node);\nfunction DocumentFragment() {}\n;\nDocumentFragment.prototype.nodeName = \"#document-fragment\";\nDocumentFragment.prototype.nodeType = DOCUMENT_FRAGMENT_NODE;\n_extends(DocumentFragment, Node);\nfunction ProcessingInstruction() {}\nProcessingInstruction.prototype.nodeType = PROCESSING_INSTRUCTION_NODE;\n_extends(ProcessingInstruction, Node);\nfunction XMLSerializer() {}\nXMLSerializer.prototype.serializeToString = function(node, isHtml, nodeFilter) {\n    return nodeSerializeToString.call(node, isHtml, nodeFilter);\n};\nNode.prototype.toString = nodeSerializeToString;\nfunction nodeSerializeToString(isHtml, nodeFilter) {\n    var buf = [];\n    var refNode = this.nodeType == 9 && this.documentElement || this;\n    var prefix = refNode.prefix;\n    var uri = refNode.namespaceURI;\n    if (uri && prefix == null) {\n        //console.log(prefix)\n        var prefix = refNode.lookupPrefix(uri);\n        if (prefix == null) {\n            //isHTML = true;\n            var visibleNamespaces = [\n                {\n                    namespace: uri,\n                    prefix: null\n                }\n            ];\n        }\n    }\n    serializeToString(this, buf, isHtml, nodeFilter, visibleNamespaces);\n    //console.log('###',this.nodeType,uri,prefix,buf.join(''))\n    return buf.join(\"\");\n}\nfunction needNamespaceDefine(node, isHTML, visibleNamespaces) {\n    var prefix = node.prefix || \"\";\n    var uri = node.namespaceURI;\n    // According to [Namespaces in XML 1.0](https://www.w3.org/TR/REC-xml-names/#ns-using) ,\n    // and more specifically https://www.w3.org/TR/REC-xml-names/#nsc-NoPrefixUndecl :\n    // > In a namespace declaration for a prefix [...], the attribute value MUST NOT be empty.\n    // in a similar manner [Namespaces in XML 1.1](https://www.w3.org/TR/xml-names11/#ns-using)\n    // and more specifically https://www.w3.org/TR/xml-names11/#nsc-NSDeclared :\n    // > [...] Furthermore, the attribute value [...] must not be an empty string.\n    // so serializing empty namespace value like xmlns:ds=\"\" would produce an invalid XML document.\n    if (!uri) {\n        return false;\n    }\n    if (prefix === \"xml\" && uri === NAMESPACE.XML || uri === NAMESPACE.XMLNS) {\n        return false;\n    }\n    var i = visibleNamespaces.length;\n    while(i--){\n        var ns = visibleNamespaces[i];\n        // get namespace prefix\n        if (ns.prefix === prefix) {\n            return ns.namespace !== uri;\n        }\n    }\n    return true;\n}\n/**\n * Well-formed constraint: No < in Attribute Values\n * > The replacement text of any entity referred to directly or indirectly\n * > in an attribute value must not contain a <.\n * @see https://www.w3.org/TR/xml11/#CleanAttrVals\n * @see https://www.w3.org/TR/xml11/#NT-AttValue\n *\n * Literal whitespace other than space that appear in attribute values\n * are serialized as their entity references, so they will be preserved.\n * (In contrast to whitespace literals in the input which are normalized to spaces)\n * @see https://www.w3.org/TR/xml11/#AVNormalize\n * @see https://w3c.github.io/DOM-Parsing/#serializing-an-element-s-attributes\n */ function addSerializedAttribute(buf, qualifiedName, value) {\n    buf.push(\" \", qualifiedName, '=\"', value.replace(/[<>&\"\\t\\n\\r]/g, _xmlEncoder), '\"');\n}\nfunction serializeToString(node, buf, isHTML, nodeFilter, visibleNamespaces) {\n    if (!visibleNamespaces) {\n        visibleNamespaces = [];\n    }\n    if (nodeFilter) {\n        node = nodeFilter(node);\n        if (node) {\n            if (typeof node == \"string\") {\n                buf.push(node);\n                return;\n            }\n        } else {\n            return;\n        }\n    //buf.sort.apply(attrs, attributeSorter);\n    }\n    switch(node.nodeType){\n        case ELEMENT_NODE:\n            var attrs = node.attributes;\n            var len = attrs.length;\n            var child = node.firstChild;\n            var nodeName = node.tagName;\n            isHTML = NAMESPACE.isHTML(node.namespaceURI) || isHTML;\n            var prefixedNodeName = nodeName;\n            if (!isHTML && !node.prefix && node.namespaceURI) {\n                var defaultNS;\n                // lookup current default ns from `xmlns` attribute\n                for(var ai = 0; ai < attrs.length; ai++){\n                    if (attrs.item(ai).name === \"xmlns\") {\n                        defaultNS = attrs.item(ai).value;\n                        break;\n                    }\n                }\n                if (!defaultNS) {\n                    // lookup current default ns in visibleNamespaces\n                    for(var nsi = visibleNamespaces.length - 1; nsi >= 0; nsi--){\n                        var namespace = visibleNamespaces[nsi];\n                        if (namespace.prefix === \"\" && namespace.namespace === node.namespaceURI) {\n                            defaultNS = namespace.namespace;\n                            break;\n                        }\n                    }\n                }\n                if (defaultNS !== node.namespaceURI) {\n                    for(var nsi = visibleNamespaces.length - 1; nsi >= 0; nsi--){\n                        var namespace = visibleNamespaces[nsi];\n                        if (namespace.namespace === node.namespaceURI) {\n                            if (namespace.prefix) {\n                                prefixedNodeName = namespace.prefix + \":\" + nodeName;\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n            buf.push(\"<\", prefixedNodeName);\n            for(var i = 0; i < len; i++){\n                // add namespaces for attributes\n                var attr = attrs.item(i);\n                if (attr.prefix == \"xmlns\") {\n                    visibleNamespaces.push({\n                        prefix: attr.localName,\n                        namespace: attr.value\n                    });\n                } else if (attr.nodeName == \"xmlns\") {\n                    visibleNamespaces.push({\n                        prefix: \"\",\n                        namespace: attr.value\n                    });\n                }\n            }\n            for(var i = 0; i < len; i++){\n                var attr = attrs.item(i);\n                if (needNamespaceDefine(attr, isHTML, visibleNamespaces)) {\n                    var prefix = attr.prefix || \"\";\n                    var uri = attr.namespaceURI;\n                    addSerializedAttribute(buf, prefix ? \"xmlns:\" + prefix : \"xmlns\", uri);\n                    visibleNamespaces.push({\n                        prefix: prefix,\n                        namespace: uri\n                    });\n                }\n                serializeToString(attr, buf, isHTML, nodeFilter, visibleNamespaces);\n            }\n            // add namespace for current node\n            if (nodeName === prefixedNodeName && needNamespaceDefine(node, isHTML, visibleNamespaces)) {\n                var prefix = node.prefix || \"\";\n                var uri = node.namespaceURI;\n                addSerializedAttribute(buf, prefix ? \"xmlns:\" + prefix : \"xmlns\", uri);\n                visibleNamespaces.push({\n                    prefix: prefix,\n                    namespace: uri\n                });\n            }\n            if (child || isHTML && !/^(?:meta|link|img|br|hr|input)$/i.test(nodeName)) {\n                buf.push(\">\");\n                //if is cdata child node\n                if (isHTML && /^script$/i.test(nodeName)) {\n                    while(child){\n                        if (child.data) {\n                            buf.push(child.data);\n                        } else {\n                            serializeToString(child, buf, isHTML, nodeFilter, visibleNamespaces.slice());\n                        }\n                        child = child.nextSibling;\n                    }\n                } else {\n                    while(child){\n                        serializeToString(child, buf, isHTML, nodeFilter, visibleNamespaces.slice());\n                        child = child.nextSibling;\n                    }\n                }\n                buf.push(\"</\", prefixedNodeName, \">\");\n            } else {\n                buf.push(\"/>\");\n            }\n            // remove added visible namespaces\n            //visibleNamespaces.length = startVisibleNamespaces;\n            return;\n        case DOCUMENT_NODE:\n        case DOCUMENT_FRAGMENT_NODE:\n            var child = node.firstChild;\n            while(child){\n                serializeToString(child, buf, isHTML, nodeFilter, visibleNamespaces.slice());\n                child = child.nextSibling;\n            }\n            return;\n        case ATTRIBUTE_NODE:\n            return addSerializedAttribute(buf, node.name, node.value);\n        case TEXT_NODE:\n            /**\n\t\t * The ampersand character (&) and the left angle bracket (<) must not appear in their literal form,\n\t\t * except when used as markup delimiters, or within a comment, a processing instruction, or a CDATA section.\n\t\t * If they are needed elsewhere, they must be escaped using either numeric character references or the strings\n\t\t * `&amp;` and `&lt;` respectively.\n\t\t * The right angle bracket (>) may be represented using the string \" &gt; \", and must, for compatibility,\n\t\t * be escaped using either `&gt;` or a character reference when it appears in the string `]]>` in content,\n\t\t * when that string is not marking the end of a CDATA section.\n\t\t *\n\t\t * In the content of elements, character data is any string of characters\n\t\t * which does not contain the start-delimiter of any markup\n\t\t * and does not include the CDATA-section-close delimiter, `]]>`.\n\t\t *\n\t\t * @see https://www.w3.org/TR/xml/#NT-CharData\n\t\t * @see https://w3c.github.io/DOM-Parsing/#xml-serializing-a-text-node\n\t\t */ return buf.push(node.data.replace(/[<&>]/g, _xmlEncoder));\n        case CDATA_SECTION_NODE:\n            return buf.push(\"<![CDATA[\", node.data, \"]]>\");\n        case COMMENT_NODE:\n            return buf.push(\"<!--\", node.data, \"-->\");\n        case DOCUMENT_TYPE_NODE:\n            var pubid = node.publicId;\n            var sysid = node.systemId;\n            buf.push(\"<!DOCTYPE \", node.name);\n            if (pubid) {\n                buf.push(\" PUBLIC \", pubid);\n                if (sysid && sysid != \".\") {\n                    buf.push(\" \", sysid);\n                }\n                buf.push(\">\");\n            } else if (sysid && sysid != \".\") {\n                buf.push(\" SYSTEM \", sysid, \">\");\n            } else {\n                var sub = node.internalSubset;\n                if (sub) {\n                    buf.push(\" [\", sub, \"]\");\n                }\n                buf.push(\">\");\n            }\n            return;\n        case PROCESSING_INSTRUCTION_NODE:\n            return buf.push(\"<?\", node.target, \" \", node.data, \"?>\");\n        case ENTITY_REFERENCE_NODE:\n            return buf.push(\"&\", node.nodeName, \";\");\n        //case ENTITY_NODE:\n        //case NOTATION_NODE:\n        default:\n            buf.push(\"??\", node.nodeName);\n    }\n}\nfunction importNode(doc, node, deep) {\n    var node2;\n    switch(node.nodeType){\n        case ELEMENT_NODE:\n            node2 = node.cloneNode(false);\n            node2.ownerDocument = doc;\n        //var attrs = node2.attributes;\n        //var len = attrs.length;\n        //for(var i=0;i<len;i++){\n        //node2.setAttributeNodeNS(importNode(doc,attrs.item(i),deep));\n        //}\n        case DOCUMENT_FRAGMENT_NODE:\n            break;\n        case ATTRIBUTE_NODE:\n            deep = true;\n            break;\n    }\n    if (!node2) {\n        node2 = node.cloneNode(false); //false\n    }\n    node2.ownerDocument = doc;\n    node2.parentNode = null;\n    if (deep) {\n        var child = node.firstChild;\n        while(child){\n            node2.appendChild(importNode(doc, child, deep));\n            child = child.nextSibling;\n        }\n    }\n    return node2;\n}\n//\n//var _relationMap = {firstChild:1,lastChild:1,previousSibling:1,nextSibling:1,\n//\t\t\t\t\tattributes:1,childNodes:1,parentNode:1,documentElement:1,doctype,};\nfunction cloneNode(doc, node, deep) {\n    var node2 = new node.constructor();\n    for(var n in node){\n        if (Object.prototype.hasOwnProperty.call(node, n)) {\n            var v = node[n];\n            if (typeof v != \"object\") {\n                if (v != node2[n]) {\n                    node2[n] = v;\n                }\n            }\n        }\n    }\n    if (node.childNodes) {\n        node2.childNodes = new NodeList();\n    }\n    node2.ownerDocument = doc;\n    switch(node2.nodeType){\n        case ELEMENT_NODE:\n            var attrs = node.attributes;\n            var attrs2 = node2.attributes = new NamedNodeMap();\n            var len = attrs.length;\n            attrs2._ownerElement = node2;\n            for(var i = 0; i < len; i++){\n                node2.setAttributeNode(cloneNode(doc, attrs.item(i), true));\n            }\n            break;\n            ;\n        case ATTRIBUTE_NODE:\n            deep = true;\n    }\n    if (deep) {\n        var child = node.firstChild;\n        while(child){\n            node2.appendChild(cloneNode(doc, child, deep));\n            child = child.nextSibling;\n        }\n    }\n    return node2;\n}\nfunction __set__(object, key, value) {\n    object[key] = value;\n}\n//do dynamic\ntry {\n    if (Object.defineProperty) {\n        Object.defineProperty(LiveNodeList.prototype, \"length\", {\n            get: function() {\n                _updateLiveList(this);\n                return this.$$length;\n            }\n        });\n        Object.defineProperty(Node.prototype, \"textContent\", {\n            get: function() {\n                return getTextContent(this);\n            },\n            set: function(data) {\n                switch(this.nodeType){\n                    case ELEMENT_NODE:\n                    case DOCUMENT_FRAGMENT_NODE:\n                        while(this.firstChild){\n                            this.removeChild(this.firstChild);\n                        }\n                        if (data || String(data)) {\n                            this.appendChild(this.ownerDocument.createTextNode(data));\n                        }\n                        break;\n                    default:\n                        this.data = data;\n                        this.value = data;\n                        this.nodeValue = data;\n                }\n            }\n        });\n        function getTextContent(node) {\n            switch(node.nodeType){\n                case ELEMENT_NODE:\n                case DOCUMENT_FRAGMENT_NODE:\n                    var buf = [];\n                    node = node.firstChild;\n                    while(node){\n                        if (node.nodeType !== 7 && node.nodeType !== 8) {\n                            buf.push(getTextContent(node));\n                        }\n                        node = node.nextSibling;\n                    }\n                    return buf.join(\"\");\n                default:\n                    return node.nodeValue;\n            }\n        }\n        __set__ = function(object, key, value) {\n            //console.log(value)\n            object[\"$$\" + key] = value;\n        };\n    }\n} catch (e) {}\n//if(typeof require == 'function'){\nexports.DocumentType = DocumentType;\nexports.DOMException = DOMException;\nexports.DOMImplementation = DOMImplementation;\nexports.Element = Element;\nexports.Node = Node;\nexports.NodeList = NodeList;\nexports.XMLSerializer = XMLSerializer; //}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHhtbGRvbS94bWxkb20vbGliL2RvbS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxjQUFjQyxtQkFBT0EsQ0FBQyw2RUFBZTtBQUV6QyxJQUFJQyxPQUFPRixZQUFZRSxJQUFJO0FBQzNCLElBQUlDLFlBQVlILFlBQVlHLFNBQVM7QUFFckM7Ozs7Q0FJQyxHQUNELFNBQVNDLGVBQWdCQyxLQUFLO0lBQzdCLE9BQU9BLFVBQVU7QUFDbEI7QUFDQTs7Ozs7O0NBTUMsR0FDRCxTQUFTQyx1QkFBdUJELEtBQUs7SUFDcEMsNERBQTREO0lBQzVELE9BQU9BLFFBQVFBLE1BQU1FLEtBQUssQ0FBQyxnQkFBZ0JDLE1BQU0sQ0FBQ0osa0JBQWtCLEVBQUU7QUFDdkU7QUFFQTs7Ozs7O0NBTUMsR0FDRCxTQUFTSyxrQkFBbUJDLE9BQU8sRUFBRUMsT0FBTztJQUMzQyxJQUFJLENBQUNELFFBQVFFLGNBQWMsQ0FBQ0QsVUFBVTtRQUNyQ0QsT0FBTyxDQUFDQyxRQUFRLEdBQUc7SUFDcEI7SUFDQSxPQUFPRDtBQUNSO0FBRUE7Ozs7Q0FJQyxHQUNELFNBQVNHLGFBQWFSLEtBQUs7SUFDMUIsSUFBSSxDQUFDQSxPQUFPLE9BQU8sRUFBRTtJQUNyQixJQUFJUyxPQUFPUix1QkFBdUJEO0lBQ2xDLE9BQU9VLE9BQU9DLElBQUksQ0FBQ0YsS0FBS0csTUFBTSxDQUFDUixtQkFBbUIsQ0FBQztBQUNwRDtBQUVBOzs7Ozs7Q0FNQyxHQUNELFNBQVNTLGNBQWVKLElBQUk7SUFDM0IsT0FBTyxTQUFTSCxPQUFPO1FBQ3RCLE9BQU9HLFFBQVFBLEtBQUtLLE9BQU8sQ0FBQ1IsYUFBYSxDQUFDO0lBQzNDO0FBQ0Q7QUFFQSxTQUFTUyxLQUFLQyxHQUFHLEVBQUNDLElBQUk7SUFDckIsSUFBSSxJQUFJQyxLQUFLRixJQUFJO1FBQ2hCLElBQUlOLE9BQU9TLFNBQVMsQ0FBQ1osY0FBYyxDQUFDYSxJQUFJLENBQUNKLEtBQUtFLElBQUk7WUFDakRELElB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b0JBQ0osSUFBSStCLE1BQU0sRUFBRTtvQkFDWk8sT0FBT0EsS0FBS3VELFVBQVU7b0JBQ3RCLE1BQU12RCxLQUFLO3dCQUNWLElBQUdBLEtBQUs4RSxRQUFRLEtBQUcsS0FBSzlFLEtBQUs4RSxRQUFRLEtBQUksR0FBRTs0QkFDMUNyRixJQUFJa0osSUFBSSxDQUFDaUYsZUFBZTVOO3dCQUN6Qjt3QkFDQUEsT0FBT0EsS0FBSzBELFdBQVc7b0JBQ3hCO29CQUNBLE9BQU9qRSxJQUFJRyxJQUFJLENBQUM7Z0JBQ2pCO29CQUNDLE9BQU9JLEtBQUs2RCxTQUFTO1lBQ3RCO1FBQ0Q7UUFFQXBELFVBQVUsU0FBU2dOLE1BQU0sRUFBQy9MLEdBQUcsRUFBQ3NFLEtBQUs7WUFDbEMsb0JBQW9CO1lBQ3BCeUgsTUFBTSxDQUFDLE9BQUsvTCxJQUFJLEdBQUdzRTtRQUNwQjtJQUNEO0FBQ0QsRUFBQyxPQUFNK0gsR0FBRSxDQUNUO0FBRUEsbUNBQW1DO0FBQ2xDQyxvQkFBb0IsR0FBRzVLO0FBQ3ZCNEssb0JBQW9CLEdBQUduUDtBQUN2Qm1QLHlCQUF5QixHQUFHNUw7QUFDNUI0TCxlQUFlLEdBQUduRjtBQUNsQm1GLFlBQVksR0FBRzFLO0FBQ2YwSyxnQkFBZ0IsR0FBRzlPO0FBQ25COE8scUJBQXFCLEdBQUdoQyxlQUN6QixHQUFHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVkLXBsYW5uZXItZnJvbnQtZW5kLy4vbm9kZV9tb2R1bGVzL0B4bWxkb20veG1sZG9tL2xpYi9kb20uanM/NWUyYiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY29udmVudGlvbnMgPSByZXF1aXJlKFwiLi9jb252ZW50aW9uc1wiKTtcblxudmFyIGZpbmQgPSBjb252ZW50aW9ucy5maW5kO1xudmFyIE5BTUVTUEFDRSA9IGNvbnZlbnRpb25zLk5BTUVTUEFDRTtcblxuLyoqXG4gKiBBIHByZXJlcXVpc2l0ZSBmb3IgYFtdLmZpbHRlcmAsIHRvIGRyb3AgZWxlbWVudHMgdGhhdCBhcmUgZW1wdHlcbiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dFxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIG5vdEVtcHR5U3RyaW5nIChpbnB1dCkge1xuXHRyZXR1cm4gaW5wdXQgIT09ICcnXG59XG4vKipcbiAqIEBzZWUgaHR0cHM6Ly9pbmZyYS5zcGVjLndoYXR3Zy5vcmcvI3NwbGl0LW9uLWFzY2lpLXdoaXRlc3BhY2VcbiAqIEBzZWUgaHR0cHM6Ly9pbmZyYS5zcGVjLndoYXR3Zy5vcmcvI2FzY2lpLXdoaXRlc3BhY2VcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gaW5wdXRcbiAqIEByZXR1cm5zIHtzdHJpbmdbXX0gKGNhbiBiZSBlbXB0eSlcbiAqL1xuZnVuY3Rpb24gc3BsaXRPbkFTQ0lJV2hpdGVzcGFjZShpbnB1dCkge1xuXHQvLyBVKzAwMDkgVEFCLCBVKzAwMEEgTEYsIFUrMDAwQyBGRiwgVSswMDBEIENSLCBVKzAwMjAgU1BBQ0Vcblx0cmV0dXJuIGlucHV0ID8gaW5wdXQuc3BsaXQoL1tcXHRcXG5cXGZcXHIgXSsvKS5maWx0ZXIobm90RW1wdHlTdHJpbmcpIDogW11cbn1cblxuLyoqXG4gKiBBZGRzIGVsZW1lbnQgYXMgYSBrZXkgdG8gY3VycmVudCBpZiBpdCBpcyBub3QgYWxyZWFkeSBwcmVzZW50LlxuICpcbiAqIEBwYXJhbSB7UmVjb3JkPHN0cmluZywgYm9vbGVhbiB8IHVuZGVmaW5lZD59IGN1cnJlbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSBlbGVtZW50XG4gKiBAcmV0dXJucyB7UmVjb3JkPHN0cmluZywgYm9vbGVhbiB8IHVuZGVmaW5lZD59XG4gKi9cbmZ1bmN0aW9uIG9yZGVyZWRTZXRSZWR1Y2VyIChjdXJyZW50LCBlbGVtZW50KSB7XG5cdGlmICghY3VycmVudC5oYXNPd25Qcm9wZXJ0eShlbGVtZW50KSkge1xuXHRcdGN1cnJlbnRbZWxlbWVudF0gPSB0cnVlO1xuXHR9XG5cdHJldHVybiBjdXJyZW50O1xufVxuXG4vKipcbiAqIEBzZWUgaHR0cHM6Ly9pbmZyYS5zcGVjLndoYXR3Zy5vcmcvI29yZGVyZWQtc2V0XG4gKiBAcGFyYW0ge3N0cmluZ30gaW5wdXRcbiAqIEByZXR1cm5zIHtzdHJpbmdbXX1cbiAqL1xuZnVuY3Rpb24gdG9PcmRlcmVkU2V0KGlucHV0KSB7XG5cdGlmICghaW5wdXQpIHJldHVybiBbXTtcblx0dmFyIGxpc3QgPSBzcGxpdE9uQVNDSUlXaGl0ZXNwYWNlKGlucHV0KTtcblx0cmV0dXJuIE9iamVjdC5rZXlzKGxpc3QucmVkdWNlKG9yZGVyZWRTZXRSZWR1Y2VyLCB7fSkpXG59XG5cbi8qKlxuICogVXNlcyBgbGlzdC5pbmRleE9mYCB0byBpbXBsZW1lbnQgc29tZXRoaW5nIGxpa2UgYEFycmF5LnByb3RvdHlwZS5pbmNsdWRlc2AsXG4gKiB3aGljaCB3ZSBjYW4gbm90IHJlbHkgb24gYmVpbmcgYXZhaWxhYmxlLlxuICpcbiAqIEBwYXJhbSB7YW55W119IGxpc3RcbiAqIEByZXR1cm5zIHtmdW5jdGlvbihhbnkpOiBib29sZWFufVxuICovXG5mdW5jdGlvbiBhcnJheUluY2x1ZGVzIChsaXN0KSB7XG5cdHJldHVybiBmdW5jdGlvbihlbGVtZW50KSB7XG5cdFx0cmV0dXJuIGxpc3QgJiYgbGlzdC5pbmRleE9mKGVsZW1lbnQpICE9PSAtMTtcblx0fVxufVxuXG5mdW5jdGlvbiBjb3B5KHNyYyxkZXN0KXtcblx0Zm9yKHZhciBwIGluIHNyYyl7XG5cdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzcmMsIHApKSB7XG5cdFx0XHRkZXN0W3BdID0gc3JjW3BdO1xuXHRcdH1cblx0fVxufVxuXG4vKipcbl5cXHcrXFwucHJvdG90eXBlXFwuKFtfXFx3XSspXFxzKj1cXHMqKCg/Oi4qXFx7XFxzKj9bXFxyXFxuXVtcXHNcXFNdKj9efSl8XFxTLio/KD89WztcXHJcXG5dKSk7P1xuXlxcdytcXC5wcm90b3R5cGVcXC4oW19cXHddKylcXHMqPVxccyooXFxTLio/KD89WztcXHJcXG5dKSk7P1xuICovXG5mdW5jdGlvbiBfZXh0ZW5kcyhDbGFzcyxTdXBlcil7XG5cdHZhciBwdCA9IENsYXNzLnByb3RvdHlwZTtcblx0aWYoIShwdCBpbnN0YW5jZW9mIFN1cGVyKSl7XG5cdFx0ZnVuY3Rpb24gdCgpe307XG5cdFx0dC5wcm90b3R5cGUgPSBTdXBlci5wcm90b3R5cGU7XG5cdFx0dCA9IG5ldyB0KCk7XG5cdFx0Y29weShwdCx0KTtcblx0XHRDbGFzcy5wcm90b3R5cGUgPSBwdCA9IHQ7XG5cdH1cblx0aWYocHQuY29uc3RydWN0b3IgIT0gQ2xhc3Mpe1xuXHRcdGlmKHR5cGVvZiBDbGFzcyAhPSAnZnVuY3Rpb24nKXtcblx0XHRcdGNvbnNvbGUuZXJyb3IoXCJ1bmtub3duIENsYXNzOlwiK0NsYXNzKVxuXHRcdH1cblx0XHRwdC5jb25zdHJ1Y3RvciA9IENsYXNzXG5cdH1cbn1cblxuLy8gTm9kZSBUeXBlc1xudmFyIE5vZGVUeXBlID0ge31cbnZhciBFTEVNRU5UX05PREUgICAgICAgICAgICAgICAgPSBOb2RlVHlwZS5FTEVNRU5UX05PREUgICAgICAgICAgICAgICAgPSAxO1xudmFyIEFUVFJJQlVURV9OT0RFICAgICAgICAgICAgICA9IE5vZGVUeXBlLkFUVFJJQlVURV9OT0RFICAgICAgICAgICAgICA9IDI7XG52YXIgVEVYVF9OT0RFICAgICAgICAgICAgICAgICAgID0gTm9kZVR5cGUuVEVYVF9OT0RFICAgICAgICAgICAgICAgICAgID0gMztcbnZhciBDREFUQV9TRUNUSU9OX05PREUgICAgICAgICAgPSBOb2RlVHlwZS5DREFUQV9TRUNUSU9OX05PREUgICAgICAgICAgPSA0O1xudmFyIEVOVElUWV9SRUZFUkVOQ0VfTk9ERSAgICAgICA9IE5vZGVUeXBlLkVOVElUWV9SRUZFUkVOQ0VfTk9ERSAgICAgICA9IDU7XG52YXIgRU5USVRZX05PREUgICAgICAgICAgICAgICAgID0gTm9kZVR5cGUuRU5USVRZX05PREUgICAgICAgICAgICAgICAgID0gNjtcbnZhciBQUk9DRVNTSU5HX0lOU1RSVUNUSU9OX05PREUgPSBOb2RlVHlwZS5QUk9DRVNTSU5HX0lOU1RSVUNUSU9OX05PREUgPSA3O1xudmFyIENPTU1FTlRfTk9ERSAgICAgICAgICAgICAgICA9IE5vZGVUeXBlLkNPTU1FTlRfTk9ERSAgICAgICAgICAgICAgICA9IDg7XG52YXIgRE9DVU1FTlRfTk9ERSAgICAgICAgICAgICAgID0gTm9kZVR5cGUuRE9DVU1FTlRfTk9ERSAgICAgICAgICAgICAgID0gOTtcbnZhciBET0NVTUVOVF9UWVBFX05PREUgICAgICAgICAgPSBOb2RlVHlwZS5ET0NVTUVOVF9UWVBFX05PREUgICAgICAgICAgPSAxMDtcbnZhciBET0NVTUVOVF9GUkFHTUVOVF9OT0RFICAgICAgPSBOb2RlVHlwZS5ET0NVTUVOVF9GUkFHTUVOVF9OT0RFICAgICAgPSAxMTtcbnZhciBOT1RBVElPTl9OT0RFICAgICAgICAgICAgICAgPSBOb2RlVHlwZS5OT1RBVElPTl9OT0RFICAgICAgICAgICAgICAgPSAxMjtcblxuLy8gRXhjZXB0aW9uQ29kZVxudmFyIEV4Y2VwdGlvbkNvZGUgPSB7fVxudmFyIEV4Y2VwdGlvbk1lc3NhZ2UgPSB7fTtcbnZhciBJTkRFWF9TSVpFX0VSUiAgICAgICAgICAgICAgPSBFeGNlcHRpb25Db2RlLklOREVYX1NJWkVfRVJSICAgICAgICAgICAgICA9ICgoRXhjZXB0aW9uTWVzc2FnZVsxXT1cIkluZGV4IHNpemUgZXJyb3JcIiksMSk7XG52YXIgRE9NU1RSSU5HX1NJWkVfRVJSICAgICAgICAgID0gRXhjZXB0aW9uQ29kZS5ET01TVFJJTkdfU0laRV9FUlIgICAgICAgICAgPSAoKEV4Y2VwdGlvbk1lc3NhZ2VbMl09XCJET01TdHJpbmcgc2l6ZSBlcnJvclwiKSwyKTtcbnZhciBISUVSQVJDSFlfUkVRVUVTVF9FUlIgICAgICAgPSBFeGNlcHRpb25Db2RlLkhJRVJBUkNIWV9SRVFVRVNUX0VSUiAgICAgICA9ICgoRXhjZXB0aW9uTWVzc2FnZVszXT1cIkhpZXJhcmNoeSByZXF1ZXN0IGVycm9yXCIpLDMpO1xudmFyIFdST05HX0RPQ1VNRU5UX0VSUiAgICAgICAgICA9IEV4Y2VwdGlvbkNvZGUuV1JPTkdfRE9DVU1FTlRfRVJSICAgICAgICAgID0gKChFeGNlcHRpb25NZXNzYWdlWzRdPVwiV3JvbmcgZG9jdW1lbnRcIiksNCk7XG52YXIgSU5WQUxJRF9DSEFSQUNURVJfRVJSICAgICAgID0gRXhjZXB0aW9uQ29kZS5JTlZBTElEX0NIQVJBQ1RFUl9FUlIgICAgICAgPSAoKEV4Y2VwdGlvbk1lc3NhZ2VbNV09XCJJbnZhbGlkIGNoYXJhY3RlclwiKSw1KTtcbnZhciBOT19EQVRBX0FMTE9XRURfRVJSICAgICAgICAgPSBFeGNlcHRpb25Db2RlLk5PX0RBVEFfQUxMT1dFRF9FUlIgICAgICAgICA9ICgoRXhjZXB0aW9uTWVzc2FnZVs2XT1cIk5vIGRhdGEgYWxsb3dlZFwiKSw2KTtcbnZhciBOT19NT0RJRklDQVRJT05fQUxMT1dFRF9FUlIgPSBFeGNlcHRpb25Db2RlLk5PX01PRElGSUNBVElPTl9BTExPV0VEX0VSUiA9ICgoRXhjZXB0aW9uTWVzc2FnZVs3XT1cIk5vIG1vZGlmaWNhdGlvbiBhbGxvd2VkXCIpLDcpO1xudmFyIE5PVF9GT1VORF9FUlIgICAgICAgICAgICAgICA9IEV4Y2VwdGlvbkNvZGUuTk9UX0ZPVU5EX0VSUiAgICAgICAgICAgICAgID0gKChFeGNlcHRpb25NZXNzYWdlWzhdPVwiTm90IGZvdW5kXCIpLDgpO1xudmFyIE5PVF9TVVBQT1JURURfRVJSICAgICAgICAgICA9IEV4Y2VwdGlvbkNvZGUuTk9UX1NVUFBPUlRFRF9FUlIgICAgICAgICAgID0gKChFeGNlcHRpb25NZXNzYWdlWzldPVwiTm90IHN1cHBvcnRlZFwiKSw5KTtcbnZhciBJTlVTRV9BVFRSSUJVVEVfRVJSICAgICAgICAgPSBFeGNlcHRpb25Db2RlLklOVVNFX0FUVFJJQlVURV9FUlIgICAgICAgICA9ICgoRXhjZXB0aW9uTWVzc2FnZVsxMF09XCJBdHRyaWJ1dGUgaW4gdXNlXCIpLDEwKTtcbi8vbGV2ZWwyXG52YXIgSU5WQUxJRF9TVEFURV9FUlIgICAgICAgIFx0PSBFeGNlcHRpb25Db2RlLklOVkFMSURfU1RBVEVfRVJSICAgICAgICBcdD0gKChFeGNlcHRpb25NZXNzYWdlWzExXT1cIkludmFsaWQgc3RhdGVcIiksMTEpO1xudmFyIFNZTlRBWF9FUlIgICAgICAgICAgICAgICBcdD0gRXhjZXB0aW9uQ29kZS5TWU5UQVhfRVJSICAgICAgICAgICAgICAgXHQ9ICgoRXhjZXB0aW9uTWVzc2FnZVsxMl09XCJTeW50YXggZXJyb3JcIiksMTIpO1xudmFyIElOVkFMSURfTU9ESUZJQ0FUSU9OX0VSUiBcdD0gRXhjZXB0aW9uQ29kZS5JTlZBTElEX01PRElGSUNBVElPTl9FUlIgXHQ9ICgoRXhjZXB0aW9uTWVzc2FnZVsxM109XCJJbnZhbGlkIG1vZGlmaWNhdGlvblwiKSwxMyk7XG52YXIgTkFNRVNQQUNFX0VSUiAgICAgICAgICAgIFx0PSBFeGNlcHRpb25Db2RlLk5BTUVTUEFDRV9FUlIgICAgICAgICAgIFx0PSAoKEV4Y2VwdGlvbk1lc3NhZ2VbMTRdPVwiSW52YWxpZCBuYW1lc3BhY2VcIiksMTQpO1xudmFyIElOVkFMSURfQUNDRVNTX0VSUiAgICAgICBcdD0gRXhjZXB0aW9uQ29kZS5JTlZBTElEX0FDQ0VTU19FUlIgICAgICBcdD0gKChFeGNlcHRpb25NZXNzYWdlWzE1XT1cIkludmFsaWQgYWNjZXNzXCIpLDE1KTtcblxuLyoqXG4gKiBET00gTGV2ZWwgMlxuICogT2JqZWN0IERPTUV4Y2VwdGlvblxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDAwL1JFQy1ET00tTGV2ZWwtMi1Db3JlLTIwMDAxMTEzL2VjbWEtc2NyaXB0LWJpbmRpbmcuaHRtbFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9SRUMtRE9NLUxldmVsLTEvZWNtYS1zY3JpcHQtbGFuZ3VhZ2UtYmluZGluZy5odG1sXG4gKi9cbmZ1bmN0aW9uIERPTUV4Y2VwdGlvbihjb2RlLCBtZXNzYWdlKSB7XG5cdGlmKG1lc3NhZ2UgaW5zdGFuY2VvZiBFcnJvcil7XG5cdFx0dmFyIGVycm9yID0gbWVzc2FnZTtcblx0fWVsc2V7XG5cdFx0ZXJyb3IgPSB0aGlzO1xuXHRcdEVycm9yLmNhbGwodGhpcywgRXhjZXB0aW9uTWVzc2FnZVtjb2RlXSk7XG5cdFx0dGhpcy5tZXNzYWdlID0gRXhjZXB0aW9uTWVzc2FnZVtjb2RlXTtcblx0XHRpZihFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgRE9NRXhjZXB0aW9uKTtcblx0fVxuXHRlcnJvci5jb2RlID0gY29kZTtcblx0aWYobWVzc2FnZSkgdGhpcy5tZXNzYWdlID0gdGhpcy5tZXNzYWdlICsgXCI6IFwiICsgbWVzc2FnZTtcblx0cmV0dXJuIGVycm9yO1xufTtcbkRPTUV4Y2VwdGlvbi5wcm90b3R5cGUgPSBFcnJvci5wcm90b3R5cGU7XG5jb3B5KEV4Y2VwdGlvbkNvZGUsRE9NRXhjZXB0aW9uKVxuXG4vKipcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvMjAwMC9SRUMtRE9NLUxldmVsLTItQ29yZS0yMDAwMTExMy9jb3JlLmh0bWwjSUQtNTM2Mjk3MTc3XG4gKiBUaGUgTm9kZUxpc3QgaW50ZXJmYWNlIHByb3ZpZGVzIHRoZSBhYnN0cmFjdGlvbiBvZiBhbiBvcmRlcmVkIGNvbGxlY3Rpb24gb2Ygbm9kZXMsIHdpdGhvdXQgZGVmaW5pbmcgb3IgY29uc3RyYWluaW5nIGhvdyB0aGlzIGNvbGxlY3Rpb24gaXMgaW1wbGVtZW50ZWQuIE5vZGVMaXN0IG9iamVjdHMgaW4gdGhlIERPTSBhcmUgbGl2ZS5cbiAqIFRoZSBpdGVtcyBpbiB0aGUgTm9kZUxpc3QgYXJlIGFjY2Vzc2libGUgdmlhIGFuIGludGVncmFsIGluZGV4LCBzdGFydGluZyBmcm9tIDAuXG4gKi9cbmZ1bmN0aW9uIE5vZGVMaXN0KCkge1xufTtcbk5vZGVMaXN0LnByb3RvdHlwZSA9IHtcblx0LyoqXG5cdCAqIFRoZSBudW1iZXIgb2Ygbm9kZXMgaW4gdGhlIGxpc3QuIFRoZSByYW5nZSBvZiB2YWxpZCBjaGlsZCBub2RlIGluZGljZXMgaXMgMCB0byBsZW5ndGgtMSBpbmNsdXNpdmUuXG5cdCAqIEBzdGFuZGFyZCBsZXZlbDFcblx0ICovXG5cdGxlbmd0aDowLFxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgaW5kZXh0aCBpdGVtIGluIHRoZSBjb2xsZWN0aW9uLiBJZiBpbmRleCBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gdGhlIG51bWJlciBvZiBub2RlcyBpbiB0aGUgbGlzdCwgdGhpcyByZXR1cm5zIG51bGwuXG5cdCAqIEBzdGFuZGFyZCBsZXZlbDFcblx0ICogQHBhcmFtIGluZGV4ICB1bnNpZ25lZCBsb25nXG5cdCAqICAgSW5kZXggaW50byB0aGUgY29sbGVjdGlvbi5cblx0ICogQHJldHVybiBOb2RlXG5cdCAqIFx0VGhlIG5vZGUgYXQgdGhlIGluZGV4dGggcG9zaXRpb24gaW4gdGhlIE5vZGVMaXN0LCBvciBudWxsIGlmIHRoYXQgaXMgbm90IGEgdmFsaWQgaW5kZXguXG5cdCAqL1xuXHRpdGVtOiBmdW5jdGlvbihpbmRleCkge1xuXHRcdHJldHVybiBpbmRleCA+PSAwICYmIGluZGV4IDwgdGhpcy5sZW5ndGggPyB0aGlzW2luZGV4XSA6IG51bGw7XG5cdH0sXG5cdHRvU3RyaW5nOmZ1bmN0aW9uKGlzSFRNTCxub2RlRmlsdGVyKXtcblx0XHRmb3IodmFyIGJ1ZiA9IFtdLCBpID0gMDtpPHRoaXMubGVuZ3RoO2krKyl7XG5cdFx0XHRzZXJpYWxpemVUb1N0cmluZyh0aGlzW2ldLGJ1Zixpc0hUTUwsbm9kZUZpbHRlcik7XG5cdFx0fVxuXHRcdHJldHVybiBidWYuam9pbignJyk7XG5cdH0sXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9uIChOb2RlKTpib29sZWFufSBwcmVkaWNhdGVcblx0ICogQHJldHVybnMge05vZGVbXX1cblx0ICovXG5cdGZpbHRlcjogZnVuY3Rpb24gKHByZWRpY2F0ZSkge1xuXHRcdHJldHVybiBBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwodGhpcywgcHJlZGljYXRlKTtcblx0fSxcblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7Tm9kZX0gaXRlbVxuXHQgKiBAcmV0dXJucyB7bnVtYmVyfVxuXHQgKi9cblx0aW5kZXhPZjogZnVuY3Rpb24gKGl0ZW0pIHtcblx0XHRyZXR1cm4gQXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbCh0aGlzLCBpdGVtKTtcblx0fSxcbn07XG5cbmZ1bmN0aW9uIExpdmVOb2RlTGlzdChub2RlLHJlZnJlc2gpe1xuXHR0aGlzLl9ub2RlID0gbm9kZTtcblx0dGhpcy5fcmVmcmVzaCA9IHJlZnJlc2hcblx0X3VwZGF0ZUxpdmVMaXN0KHRoaXMpO1xufVxuZnVuY3Rpb24gX3VwZGF0ZUxpdmVMaXN0KGxpc3Qpe1xuXHR2YXIgaW5jID0gbGlzdC5fbm9kZS5faW5jIHx8IGxpc3QuX25vZGUub3duZXJEb2N1bWVudC5faW5jO1xuXHRpZiAobGlzdC5faW5jICE9PSBpbmMpIHtcblx0XHR2YXIgbHMgPSBsaXN0Ll9yZWZyZXNoKGxpc3QuX25vZGUpO1xuXHRcdF9fc2V0X18obGlzdCwnbGVuZ3RoJyxscy5sZW5ndGgpO1xuXHRcdGlmICghbGlzdC4kJGxlbmd0aCB8fCBscy5sZW5ndGggPCBsaXN0LiQkbGVuZ3RoKSB7XG5cdFx0XHRmb3IgKHZhciBpID0gbHMubGVuZ3RoOyBpIGluIGxpc3Q7IGkrKykge1xuXHRcdFx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGxpc3QsIGkpKSB7XG5cdFx0XHRcdFx0ZGVsZXRlIGxpc3RbaV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0Y29weShscyxsaXN0KTtcblx0XHRsaXN0Ll9pbmMgPSBpbmM7XG5cdH1cbn1cbkxpdmVOb2RlTGlzdC5wcm90b3R5cGUuaXRlbSA9IGZ1bmN0aW9uKGkpe1xuXHRfdXBkYXRlTGl2ZUxpc3QodGhpcyk7XG5cdHJldHVybiB0aGlzW2ldIHx8IG51bGw7XG59XG5cbl9leHRlbmRzKExpdmVOb2RlTGlzdCxOb2RlTGlzdCk7XG5cbi8qKlxuICogT2JqZWN0cyBpbXBsZW1lbnRpbmcgdGhlIE5hbWVkTm9kZU1hcCBpbnRlcmZhY2UgYXJlIHVzZWRcbiAqIHRvIHJlcHJlc2VudCBjb2xsZWN0aW9ucyBvZiBub2RlcyB0aGF0IGNhbiBiZSBhY2Nlc3NlZCBieSBuYW1lLlxuICogTm90ZSB0aGF0IE5hbWVkTm9kZU1hcCBkb2VzIG5vdCBpbmhlcml0IGZyb20gTm9kZUxpc3Q7XG4gKiBOYW1lZE5vZGVNYXBzIGFyZSBub3QgbWFpbnRhaW5lZCBpbiBhbnkgcGFydGljdWxhciBvcmRlci5cbiAqIE9iamVjdHMgY29udGFpbmVkIGluIGFuIG9iamVjdCBpbXBsZW1lbnRpbmcgTmFtZWROb2RlTWFwIG1heSBhbHNvIGJlIGFjY2Vzc2VkIGJ5IGFuIG9yZGluYWwgaW5kZXgsXG4gKiBidXQgdGhpcyBpcyBzaW1wbHkgdG8gYWxsb3cgY29udmVuaWVudCBlbnVtZXJhdGlvbiBvZiB0aGUgY29udGVudHMgb2YgYSBOYW1lZE5vZGVNYXAsXG4gKiBhbmQgZG9lcyBub3QgaW1wbHkgdGhhdCB0aGUgRE9NIHNwZWNpZmllcyBhbiBvcmRlciB0byB0aGVzZSBOb2Rlcy5cbiAqIE5hbWVkTm9kZU1hcCBvYmplY3RzIGluIHRoZSBET00gYXJlIGxpdmUuXG4gKiB1c2VkIGZvciBhdHRyaWJ1dGVzIG9yIERvY3VtZW50VHlwZSBlbnRpdGllc1xuICovXG5mdW5jdGlvbiBOYW1lZE5vZGVNYXAoKSB7XG59O1xuXG5mdW5jdGlvbiBfZmluZE5vZGVJbmRleChsaXN0LG5vZGUpe1xuXHR2YXIgaSA9IGxpc3QubGVuZ3RoO1xuXHR3aGlsZShpLS0pe1xuXHRcdGlmKGxpc3RbaV0gPT09IG5vZGUpe3JldHVybiBpfVxuXHR9XG59XG5cbmZ1bmN0aW9uIF9hZGROYW1lZE5vZGUoZWwsbGlzdCxuZXdBdHRyLG9sZEF0dHIpe1xuXHRpZihvbGRBdHRyKXtcblx0XHRsaXN0W19maW5kTm9kZUluZGV4KGxpc3Qsb2xkQXR0cildID0gbmV3QXR0cjtcblx0fWVsc2V7XG5cdFx0bGlzdFtsaXN0Lmxlbmd0aCsrXSA9IG5ld0F0dHI7XG5cdH1cblx0aWYoZWwpe1xuXHRcdG5ld0F0dHIub3duZXJFbGVtZW50ID0gZWw7XG5cdFx0dmFyIGRvYyA9IGVsLm93bmVyRG9jdW1lbnQ7XG5cdFx0aWYoZG9jKXtcblx0XHRcdG9sZEF0dHIgJiYgX29uUmVtb3ZlQXR0cmlidXRlKGRvYyxlbCxvbGRBdHRyKTtcblx0XHRcdF9vbkFkZEF0dHJpYnV0ZShkb2MsZWwsbmV3QXR0cik7XG5cdFx0fVxuXHR9XG59XG5mdW5jdGlvbiBfcmVtb3ZlTmFtZWROb2RlKGVsLGxpc3QsYXR0cil7XG5cdC8vY29uc29sZS5sb2coJ3JlbW92ZSBhdHRyOicrYXR0cilcblx0dmFyIGkgPSBfZmluZE5vZGVJbmRleChsaXN0LGF0dHIpO1xuXHRpZihpPj0wKXtcblx0XHR2YXIgbGFzdEluZGV4ID0gbGlzdC5sZW5ndGgtMVxuXHRcdHdoaWxlKGk8bGFzdEluZGV4KXtcblx0XHRcdGxpc3RbaV0gPSBsaXN0WysraV1cblx0XHR9XG5cdFx0bGlzdC5sZW5ndGggPSBsYXN0SW5kZXg7XG5cdFx0aWYoZWwpe1xuXHRcdFx0dmFyIGRvYyA9IGVsLm93bmVyRG9jdW1lbnQ7XG5cdFx0XHRpZihkb2Mpe1xuXHRcdFx0XHRfb25SZW1vdmVBdHRyaWJ1dGUoZG9jLGVsLGF0dHIpO1xuXHRcdFx0XHRhdHRyLm93bmVyRWxlbWVudCA9IG51bGw7XG5cdFx0XHR9XG5cdFx0fVxuXHR9ZWxzZXtcblx0XHR0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKE5PVF9GT1VORF9FUlIsbmV3IEVycm9yKGVsLnRhZ05hbWUrJ0AnK2F0dHIpKVxuXHR9XG59XG5OYW1lZE5vZGVNYXAucHJvdG90eXBlID0ge1xuXHRsZW5ndGg6MCxcblx0aXRlbTpOb2RlTGlzdC5wcm90b3R5cGUuaXRlbSxcblx0Z2V0TmFtZWRJdGVtOiBmdW5jdGlvbihrZXkpIHtcbi8vXHRcdGlmKGtleS5pbmRleE9mKCc6Jyk+MCB8fCBrZXkgPT0gJ3htbG5zJyl7XG4vL1x0XHRcdHJldHVybiBudWxsO1xuLy9cdFx0fVxuXHRcdC8vY29uc29sZS5sb2coKVxuXHRcdHZhciBpID0gdGhpcy5sZW5ndGg7XG5cdFx0d2hpbGUoaS0tKXtcblx0XHRcdHZhciBhdHRyID0gdGhpc1tpXTtcblx0XHRcdC8vY29uc29sZS5sb2coYXR0ci5ub2RlTmFtZSxrZXkpXG5cdFx0XHRpZihhdHRyLm5vZGVOYW1lID09IGtleSl7XG5cdFx0XHRcdHJldHVybiBhdHRyO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0c2V0TmFtZWRJdGVtOiBmdW5jdGlvbihhdHRyKSB7XG5cdFx0dmFyIGVsID0gYXR0ci5vd25lckVsZW1lbnQ7XG5cdFx0aWYoZWwgJiYgZWwhPXRoaXMuX293bmVyRWxlbWVudCl7XG5cdFx0XHR0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKElOVVNFX0FUVFJJQlVURV9FUlIpO1xuXHRcdH1cblx0XHR2YXIgb2xkQXR0ciA9IHRoaXMuZ2V0TmFtZWRJdGVtKGF0dHIubm9kZU5hbWUpO1xuXHRcdF9hZGROYW1lZE5vZGUodGhpcy5fb3duZXJFbGVtZW50LHRoaXMsYXR0cixvbGRBdHRyKTtcblx0XHRyZXR1cm4gb2xkQXR0cjtcblx0fSxcblx0LyogcmV0dXJucyBOb2RlICovXG5cdHNldE5hbWVkSXRlbU5TOiBmdW5jdGlvbihhdHRyKSB7Ly8gcmFpc2VzOiBXUk9OR19ET0NVTUVOVF9FUlIsTk9fTU9ESUZJQ0FUSU9OX0FMTE9XRURfRVJSLElOVVNFX0FUVFJJQlVURV9FUlJcblx0XHR2YXIgZWwgPSBhdHRyLm93bmVyRWxlbWVudCwgb2xkQXR0cjtcblx0XHRpZihlbCAmJiBlbCE9dGhpcy5fb3duZXJFbGVtZW50KXtcblx0XHRcdHRocm93IG5ldyBET01FeGNlcHRpb24oSU5VU0VfQVRUUklCVVRFX0VSUik7XG5cdFx0fVxuXHRcdG9sZEF0dHIgPSB0aGlzLmdldE5hbWVkSXRlbU5TKGF0dHIubmFtZXNwYWNlVVJJLGF0dHIubG9jYWxOYW1lKTtcblx0XHRfYWRkTmFtZWROb2RlKHRoaXMuX293bmVyRWxlbWVudCx0aGlzLGF0dHIsb2xkQXR0cik7XG5cdFx0cmV0dXJuIG9sZEF0dHI7XG5cdH0sXG5cblx0LyogcmV0dXJucyBOb2RlICovXG5cdHJlbW92ZU5hbWVkSXRlbTogZnVuY3Rpb24oa2V5KSB7XG5cdFx0dmFyIGF0dHIgPSB0aGlzLmdldE5hbWVkSXRlbShrZXkpO1xuXHRcdF9yZW1vdmVOYW1lZE5vZGUodGhpcy5fb3duZXJFbGVtZW50LHRoaXMsYXR0cik7XG5cdFx0cmV0dXJuIGF0dHI7XG5cblxuXHR9LC8vIHJhaXNlczogTk9UX0ZPVU5EX0VSUixOT19NT0RJRklDQVRJT05fQUxMT1dFRF9FUlJcblxuXHQvL2ZvciBsZXZlbDJcblx0cmVtb3ZlTmFtZWRJdGVtTlM6ZnVuY3Rpb24obmFtZXNwYWNlVVJJLGxvY2FsTmFtZSl7XG5cdFx0dmFyIGF0dHIgPSB0aGlzLmdldE5hbWVkSXRlbU5TKG5hbWVzcGFjZVVSSSxsb2NhbE5hbWUpO1xuXHRcdF9yZW1vdmVOYW1lZE5vZGUodGhpcy5fb3duZXJFbGVtZW50LHRoaXMsYXR0cik7XG5cdFx0cmV0dXJuIGF0dHI7XG5cdH0sXG5cdGdldE5hbWVkSXRlbU5TOiBmdW5jdGlvbihuYW1lc3BhY2VVUkksIGxvY2FsTmFtZSkge1xuXHRcdHZhciBpID0gdGhpcy5sZW5ndGg7XG5cdFx0d2hpbGUoaS0tKXtcblx0XHRcdHZhciBub2RlID0gdGhpc1tpXTtcblx0XHRcdGlmKG5vZGUubG9jYWxOYW1lID09IGxvY2FsTmFtZSAmJiBub2RlLm5hbWVzcGFjZVVSSSA9PSBuYW1lc3BhY2VVUkkpe1xuXHRcdFx0XHRyZXR1cm4gbm9kZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cbn07XG5cbi8qKlxuICogVGhlIERPTUltcGxlbWVudGF0aW9uIGludGVyZmFjZSByZXByZXNlbnRzIGFuIG9iamVjdCBwcm92aWRpbmcgbWV0aG9kc1xuICogd2hpY2ggYXJlIG5vdCBkZXBlbmRlbnQgb24gYW55IHBhcnRpY3VsYXIgZG9jdW1lbnQuXG4gKiBTdWNoIGFuIG9iamVjdCBpcyByZXR1cm5lZCBieSB0aGUgYERvY3VtZW50LmltcGxlbWVudGF0aW9uYCBwcm9wZXJ0eS5cbiAqXG4gKiBfX1RoZSBpbmRpdmlkdWFsIG1ldGhvZHMgZGVzY3JpYmUgdGhlIGRpZmZlcmVuY2VzIGNvbXBhcmVkIHRvIHRoZSBzcGVjcy5fX1xuICpcbiAqIEBjb25zdHJ1Y3RvclxuICpcbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0RPTUltcGxlbWVudGF0aW9uIE1ETlxuICogQHNlZSBodHRwczovL3d3dy53My5vcmcvVFIvUkVDLURPTS1MZXZlbC0xL2xldmVsLW9uZS1jb3JlLmh0bWwjSUQtMTAyMTYxNDkwIERPTSBMZXZlbCAxIENvcmUgKEluaXRpYWwpXG4gKiBAc2VlIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMi1Db3JlL2NvcmUuaHRtbCNJRC0xMDIxNjE0OTAgRE9NIExldmVsIDIgQ29yZVxuICogQHNlZSBodHRwczovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtQ29yZS9jb3JlLmh0bWwjSUQtMTAyMTYxNDkwIERPTSBMZXZlbCAzIENvcmVcbiAqIEBzZWUgaHR0cHM6Ly9kb20uc3BlYy53aGF0d2cub3JnLyNkb21pbXBsZW1lbnRhdGlvbiBET00gTGl2aW5nIFN0YW5kYXJkXG4gKi9cbmZ1bmN0aW9uIERPTUltcGxlbWVudGF0aW9uKCkge1xufVxuXG5ET01JbXBsZW1lbnRhdGlvbi5wcm90b3R5cGUgPSB7XG5cdC8qKlxuXHQgKiBUaGUgRE9NSW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSgpIG1ldGhvZCByZXR1cm5zIGEgQm9vbGVhbiBmbGFnIGluZGljYXRpbmcgaWYgYSBnaXZlbiBmZWF0dXJlIGlzIHN1cHBvcnRlZC5cblx0ICogVGhlIGRpZmZlcmVudCBpbXBsZW1lbnRhdGlvbnMgZmFpcmx5IGRpdmVyZ2VkIGluIHdoYXQga2luZCBvZiBmZWF0dXJlcyB3ZXJlIHJlcG9ydGVkLlxuXHQgKiBUaGUgbGF0ZXN0IHZlcnNpb24gb2YgdGhlIHNwZWMgc2V0dGxlZCB0byBmb3JjZSB0aGlzIG1ldGhvZCB0byBhbHdheXMgcmV0dXJuIHRydWUsIHdoZXJlIHRoZSBmdW5jdGlvbmFsaXR5IHdhcyBhY2N1cmF0ZSBhbmQgaW4gdXNlLlxuXHQgKlxuXHQgKiBAZGVwcmVjYXRlZCBJdCBpcyBkZXByZWNhdGVkIGFuZCBtb2Rlcm4gYnJvd3NlcnMgcmV0dXJuIHRydWUgaW4gYWxsIGNhc2VzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gZmVhdHVyZVxuXHQgKiBAcGFyYW0ge3N0cmluZ30gW3ZlcnNpb25dXG5cdCAqIEByZXR1cm5zIHtib29sZWFufSBhbHdheXMgdHJ1ZVxuXHQgKlxuXHQgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9ET01JbXBsZW1lbnRhdGlvbi9oYXNGZWF0dXJlIE1ETlxuXHQgKiBAc2VlIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9SRUMtRE9NLUxldmVsLTEvbGV2ZWwtb25lLWNvcmUuaHRtbCNJRC01Q0VEOTRENyBET00gTGV2ZWwgMSBDb3JlXG5cdCAqIEBzZWUgaHR0cHM6Ly9kb20uc3BlYy53aGF0d2cub3JnLyNkb20tZG9taW1wbGVtZW50YXRpb24taGFzZmVhdHVyZSBET00gTGl2aW5nIFN0YW5kYXJkXG5cdCAqL1xuXHRoYXNGZWF0dXJlOiBmdW5jdGlvbihmZWF0dXJlLCB2ZXJzaW9uKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblx0LyoqXG5cdCAqIENyZWF0ZXMgYW4gWE1MIERvY3VtZW50IG9iamVjdCBvZiB0aGUgc3BlY2lmaWVkIHR5cGUgd2l0aCBpdHMgZG9jdW1lbnQgZWxlbWVudC5cblx0ICpcblx0ICogX19JdCBiZWhhdmVzIHNsaWdodGx5IGRpZmZlcmVudCBmcm9tIHRoZSBkZXNjcmlwdGlvbiBpbiB0aGUgbGl2aW5nIHN0YW5kYXJkX186XG5cdCAqIC0gVGhlcmUgaXMgbm8gaW50ZXJmYWNlL2NsYXNzIGBYTUxEb2N1bWVudGAsIGl0IHJldHVybnMgYSBgRG9jdW1lbnRgIGluc3RhbmNlLlxuXHQgKiAtIGBjb250ZW50VHlwZWAsIGBlbmNvZGluZ2AsIGBtb2RlYCwgYG9yaWdpbmAsIGB1cmxgIGZpZWxkcyBhcmUgY3VycmVudGx5IG5vdCBkZWNsYXJlZC5cblx0ICogLSB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCB2YWxpZGF0aW5nIG5hbWVzIG9yIHF1YWxpZmllZCBuYW1lc1xuXHQgKiAgICh3aGVuIHBhcnNpbmcgWE1MIHN0cmluZ3MsIHRoZSBTQVggcGFyc2VyIHRha2VzIGNhcmUgb2YgdGhhdClcblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd8bnVsbH0gbmFtZXNwYWNlVVJJXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBxdWFsaWZpZWROYW1lXG5cdCAqIEBwYXJhbSB7RG9jdW1lbnRUeXBlPW51bGx9IGRvY3R5cGVcblx0ICogQHJldHVybnMge0RvY3VtZW50fVxuXHQgKlxuXHQgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9ET01JbXBsZW1lbnRhdGlvbi9jcmVhdGVEb2N1bWVudCBNRE5cblx0ICogQHNlZSBodHRwczovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTItQ29yZS9jb3JlLmh0bWwjTGV2ZWwtMi1Db3JlLURPTS1jcmVhdGVEb2N1bWVudCBET00gTGV2ZWwgMiBDb3JlIChpbml0aWFsKVxuXHQgKiBAc2VlIGh0dHBzOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jZG9tLWRvbWltcGxlbWVudGF0aW9uLWNyZWF0ZWRvY3VtZW50ICBET00gTGV2ZWwgMiBDb3JlXG5cdCAqXG5cdCAqIEBzZWUgaHR0cHM6Ly9kb20uc3BlYy53aGF0d2cub3JnLyN2YWxpZGF0ZS1hbmQtZXh0cmFjdCBET006IFZhbGlkYXRlIGFuZCBleHRyYWN0XG5cdCAqIEBzZWUgaHR0cHM6Ly93d3cudzMub3JnL1RSL3htbC8jTlQtTmFtZVN0YXJ0Q2hhciBYTUwgU3BlYzogTmFtZXNcblx0ICogQHNlZSBodHRwczovL3d3dy53My5vcmcvVFIveG1sLW5hbWVzLyNucy1xdWFsbmFtZXMgWE1MIE5hbWVzcGFjZXM6IFF1YWxpZmllZCBuYW1lc1xuXHQgKi9cblx0Y3JlYXRlRG9jdW1lbnQ6IGZ1bmN0aW9uKG5hbWVzcGFjZVVSSSwgIHF1YWxpZmllZE5hbWUsIGRvY3R5cGUpe1xuXHRcdHZhciBkb2MgPSBuZXcgRG9jdW1lbnQoKTtcblx0XHRkb2MuaW1wbGVtZW50YXRpb24gPSB0aGlzO1xuXHRcdGRvYy5jaGlsZE5vZGVzID0gbmV3IE5vZGVMaXN0KCk7XG5cdFx0ZG9jLmRvY3R5cGUgPSBkb2N0eXBlIHx8IG51bGw7XG5cdFx0aWYgKGRvY3R5cGUpe1xuXHRcdFx0ZG9jLmFwcGVuZENoaWxkKGRvY3R5cGUpO1xuXHRcdH1cblx0XHRpZiAocXVhbGlmaWVkTmFtZSl7XG5cdFx0XHR2YXIgcm9vdCA9IGRvYy5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlVVJJLCBxdWFsaWZpZWROYW1lKTtcblx0XHRcdGRvYy5hcHBlbmRDaGlsZChyb290KTtcblx0XHR9XG5cdFx0cmV0dXJuIGRvYztcblx0fSxcblx0LyoqXG5cdCAqIFJldHVybnMgYSBkb2N0eXBlLCB3aXRoIHRoZSBnaXZlbiBgcXVhbGlmaWVkTmFtZWAsIGBwdWJsaWNJZGAsIGFuZCBgc3lzdGVtSWRgLlxuXHQgKlxuXHQgKiBfX1RoaXMgYmVoYXZpb3IgaXMgc2xpZ2h0bHkgZGlmZmVyZW50IGZyb20gdGhlIGluIHRoZSBzcGVjc19fOlxuXHQgKiAtIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgbm90IHZhbGlkYXRpbmcgbmFtZXMgb3IgcXVhbGlmaWVkIG5hbWVzXG5cdCAqICAgKHdoZW4gcGFyc2luZyBYTUwgc3RyaW5ncywgdGhlIFNBWCBwYXJzZXIgdGFrZXMgY2FyZSBvZiB0aGF0KVxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gcXVhbGlmaWVkTmFtZVxuXHQgKiBAcGFyYW0ge3N0cmluZ30gW3B1YmxpY0lkXVxuXHQgKiBAcGFyYW0ge3N0cmluZ30gW3N5c3RlbUlkXVxuXHQgKiBAcmV0dXJucyB7RG9jdW1lbnRUeXBlfSB3aGljaCBjYW4gZWl0aGVyIGJlIHVzZWQgd2l0aCBgRE9NSW1wbGVtZW50YXRpb24uY3JlYXRlRG9jdW1lbnRgIHVwb24gZG9jdW1lbnQgY3JlYXRpb25cblx0ICogXHRcdFx0XHQgIG9yIGNhbiBiZSBwdXQgaW50byB0aGUgZG9jdW1lbnQgdmlhIG1ldGhvZHMgbGlrZSBgTm9kZS5pbnNlcnRCZWZvcmUoKWAgb3IgYE5vZGUucmVwbGFjZUNoaWxkKClgXG5cdCAqXG5cdCAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0RPTUltcGxlbWVudGF0aW9uL2NyZWF0ZURvY3VtZW50VHlwZSBNRE5cblx0ICogQHNlZSBodHRwczovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTItQ29yZS9jb3JlLmh0bWwjTGV2ZWwtMi1Db3JlLURPTS1jcmVhdGVEb2NUeXBlIERPTSBMZXZlbCAyIENvcmVcblx0ICogQHNlZSBodHRwczovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI2RvbS1kb21pbXBsZW1lbnRhdGlvbi1jcmVhdGVkb2N1bWVudHR5cGUgRE9NIExpdmluZyBTdGFuZGFyZFxuXHQgKlxuXHQgKiBAc2VlIGh0dHBzOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jdmFsaWRhdGUtYW5kLWV4dHJhY3QgRE9NOiBWYWxpZGF0ZSBhbmQgZXh0cmFjdFxuXHQgKiBAc2VlIGh0dHBzOi8vd3d3LnczLm9yZy9UUi94bWwvI05ULU5hbWVTdGFydENoYXIgWE1MIFNwZWM6IE5hbWVzXG5cdCAqIEBzZWUgaHR0cHM6Ly93d3cudzMub3JnL1RSL3htbC1uYW1lcy8jbnMtcXVhbG5hbWVzIFhNTCBOYW1lc3BhY2VzOiBRdWFsaWZpZWQgbmFtZXNcblx0ICovXG5cdGNyZWF0ZURvY3VtZW50VHlwZTogZnVuY3Rpb24ocXVhbGlmaWVkTmFtZSwgcHVibGljSWQsIHN5c3RlbUlkKXtcblx0XHR2YXIgbm9kZSA9IG5ldyBEb2N1bWVudFR5cGUoKTtcblx0XHRub2RlLm5hbWUgPSBxdWFsaWZpZWROYW1lO1xuXHRcdG5vZGUubm9kZU5hbWUgPSBxdWFsaWZpZWROYW1lO1xuXHRcdG5vZGUucHVibGljSWQgPSBwdWJsaWNJZCB8fCAnJztcblx0XHRub2RlLnN5c3RlbUlkID0gc3lzdGVtSWQgfHwgJyc7XG5cblx0XHRyZXR1cm4gbm9kZTtcblx0fVxufTtcblxuXG4vKipcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvMjAwMC9SRUMtRE9NLUxldmVsLTItQ29yZS0yMDAwMTExMy9jb3JlLmh0bWwjSUQtMTk1MDY0MTI0N1xuICovXG5cbmZ1bmN0aW9uIE5vZGUoKSB7XG59O1xuXG5Ob2RlLnByb3RvdHlwZSA9IHtcblx0Zmlyc3RDaGlsZCA6IG51bGwsXG5cdGxhc3RDaGlsZCA6IG51bGwsXG5cdHByZXZpb3VzU2libGluZyA6IG51bGwsXG5cdG5leHRTaWJsaW5nIDogbnVsbCxcblx0YXR0cmlidXRlcyA6IG51bGwsXG5cdHBhcmVudE5vZGUgOiBudWxsLFxuXHRjaGlsZE5vZGVzIDogbnVsbCxcblx0b3duZXJEb2N1bWVudCA6IG51bGwsXG5cdG5vZGVWYWx1ZSA6IG51bGwsXG5cdG5hbWVzcGFjZVVSSSA6IG51bGwsXG5cdHByZWZpeCA6IG51bGwsXG5cdGxvY2FsTmFtZSA6IG51bGwsXG5cdC8vIE1vZGlmaWVkIGluIERPTSBMZXZlbCAyOlxuXHRpbnNlcnRCZWZvcmU6ZnVuY3Rpb24obmV3Q2hpbGQsIHJlZkNoaWxkKXsvL3JhaXNlc1xuXHRcdHJldHVybiBfaW5zZXJ0QmVmb3JlKHRoaXMsbmV3Q2hpbGQscmVmQ2hpbGQpO1xuXHR9LFxuXHRyZXBsYWNlQ2hpbGQ6ZnVuY3Rpb24obmV3Q2hpbGQsIG9sZENoaWxkKXsvL3JhaXNlc1xuXHRcdF9pbnNlcnRCZWZvcmUodGhpcywgbmV3Q2hpbGQsb2xkQ2hpbGQsIGFzc2VydFByZVJlcGxhY2VtZW50VmFsaWRpdHlJbkRvY3VtZW50KTtcblx0XHRpZihvbGRDaGlsZCl7XG5cdFx0XHR0aGlzLnJlbW92ZUNoaWxkKG9sZENoaWxkKTtcblx0XHR9XG5cdH0sXG5cdHJlbW92ZUNoaWxkOmZ1bmN0aW9uKG9sZENoaWxkKXtcblx0XHRyZXR1cm4gX3JlbW92ZUNoaWxkKHRoaXMsb2xkQ2hpbGQpO1xuXHR9LFxuXHRhcHBlbmRDaGlsZDpmdW5jdGlvbihuZXdDaGlsZCl7XG5cdFx0cmV0dXJuIHRoaXMuaW5zZXJ0QmVmb3JlKG5ld0NoaWxkLG51bGwpO1xuXHR9LFxuXHRoYXNDaGlsZE5vZGVzOmZ1bmN0aW9uKCl7XG5cdFx0cmV0dXJuIHRoaXMuZmlyc3RDaGlsZCAhPSBudWxsO1xuXHR9LFxuXHRjbG9uZU5vZGU6ZnVuY3Rpb24oZGVlcCl7XG5cdFx0cmV0dXJuIGNsb25lTm9kZSh0aGlzLm93bmVyRG9jdW1lbnR8fHRoaXMsdGhpcyxkZWVwKTtcblx0fSxcblx0Ly8gTW9kaWZpZWQgaW4gRE9NIExldmVsIDI6XG5cdG5vcm1hbGl6ZTpmdW5jdGlvbigpe1xuXHRcdHZhciBjaGlsZCA9IHRoaXMuZmlyc3RDaGlsZDtcblx0XHR3aGlsZShjaGlsZCl7XG5cdFx0XHR2YXIgbmV4dCA9IGNoaWxkLm5leHRTaWJsaW5nO1xuXHRcdFx0aWYobmV4dCAmJiBuZXh0Lm5vZGVUeXBlID09IFRFWFRfTk9ERSAmJiBjaGlsZC5ub2RlVHlwZSA9PSBURVhUX05PREUpe1xuXHRcdFx0XHR0aGlzLnJlbW92ZUNoaWxkKG5leHQpO1xuXHRcdFx0XHRjaGlsZC5hcHBlbmREYXRhKG5leHQuZGF0YSk7XG5cdFx0XHR9ZWxzZXtcblx0XHRcdFx0Y2hpbGQubm9ybWFsaXplKCk7XG5cdFx0XHRcdGNoaWxkID0gbmV4dDtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG4gIFx0Ly8gSW50cm9kdWNlZCBpbiBET00gTGV2ZWwgMjpcblx0aXNTdXBwb3J0ZWQ6ZnVuY3Rpb24oZmVhdHVyZSwgdmVyc2lvbil7XG5cdFx0cmV0dXJuIHRoaXMub3duZXJEb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlKGZlYXR1cmUsdmVyc2lvbik7XG5cdH0sXG4gICAgLy8gSW50cm9kdWNlZCBpbiBET00gTGV2ZWwgMjpcbiAgICBoYXNBdHRyaWJ1dGVzOmZ1bmN0aW9uKCl7XG4gICAgXHRyZXR1cm4gdGhpcy5hdHRyaWJ1dGVzLmxlbmd0aD4wO1xuICAgIH0sXG5cdC8qKlxuXHQgKiBMb29rIHVwIHRoZSBwcmVmaXggYXNzb2NpYXRlZCB0byB0aGUgZ2l2ZW4gbmFtZXNwYWNlIFVSSSwgc3RhcnRpbmcgZnJvbSB0aGlzIG5vZGUuXG5cdCAqICoqVGhlIGRlZmF1bHQgbmFtZXNwYWNlIGRlY2xhcmF0aW9ucyBhcmUgaWdub3JlZCBieSB0aGlzIG1ldGhvZC4qKlxuXHQgKiBTZWUgTmFtZXNwYWNlIFByZWZpeCBMb29rdXAgZm9yIGRldGFpbHMgb24gdGhlIGFsZ29yaXRobSB1c2VkIGJ5IHRoaXMgbWV0aG9kLlxuXHQgKlxuXHQgKiBfTm90ZTogVGhlIGltcGxlbWVudGF0aW9uIHNlZW1zIHRvIGJlIGluY29tcGxldGUgd2hlbiBjb21wYXJlZCB0byB0aGUgYWxnb3JpdGhtIGRlc2NyaWJlZCBpbiB0aGUgc3BlY3MuX1xuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZyB8IG51bGx9IG5hbWVzcGFjZVVSSVxuXHQgKiBAcmV0dXJucyB7c3RyaW5nIHwgbnVsbH1cblx0ICogQHNlZSBodHRwczovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtQ29yZS9jb3JlLmh0bWwjTm9kZTMtbG9va3VwTmFtZXNwYWNlUHJlZml4XG5cdCAqIEBzZWUgaHR0cHM6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUNvcmUvbmFtZXNwYWNlcy1hbGdvcml0aG1zLmh0bWwjbG9va3VwTmFtZXNwYWNlUHJlZml4QWxnb1xuXHQgKiBAc2VlIGh0dHBzOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jZG9tLW5vZGUtbG9va3VwcHJlZml4XG5cdCAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3htbGRvbS94bWxkb20vaXNzdWVzLzMyMlxuXHQgKi9cbiAgICBsb29rdXBQcmVmaXg6ZnVuY3Rpb24obmFtZXNwYWNlVVJJKXtcbiAgICBcdHZhciBlbCA9IHRoaXM7XG4gICAgXHR3aGlsZShlbCl7XG4gICAgXHRcdHZhciBtYXAgPSBlbC5fbnNNYXA7XG4gICAgXHRcdC8vY29uc29sZS5kaXIobWFwKVxuICAgIFx0XHRpZihtYXApe1xuICAgIFx0XHRcdGZvcih2YXIgbiBpbiBtYXApe1xuXHRcdFx0XHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtYXAsIG4pICYmIG1hcFtuXSA9PT0gbmFtZXNwYWNlVVJJKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBuO1xuXHRcdFx0XHRcdFx0fVxuICAgIFx0XHRcdH1cbiAgICBcdFx0fVxuICAgIFx0XHRlbCA9IGVsLm5vZGVUeXBlID09IEFUVFJJQlVURV9OT0RFP2VsLm93bmVyRG9jdW1lbnQgOiBlbC5wYXJlbnROb2RlO1xuICAgIFx0fVxuICAgIFx0cmV0dXJuIG51bGw7XG4gICAgfSxcbiAgICAvLyBJbnRyb2R1Y2VkIGluIERPTSBMZXZlbCAzOlxuICAgIGxvb2t1cE5hbWVzcGFjZVVSSTpmdW5jdGlvbihwcmVmaXgpe1xuICAgIFx0dmFyIGVsID0gdGhpcztcbiAgICBcdHdoaWxlKGVsKXtcbiAgICBcdFx0dmFyIG1hcCA9IGVsLl9uc01hcDtcbiAgICBcdFx0Ly9jb25zb2xlLmRpcihtYXApXG4gICAgXHRcdGlmKG1hcCl7XG4gICAgXHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1hcCwgcHJlZml4KSl7XG4gICAgXHRcdFx0XHRyZXR1cm4gbWFwW3ByZWZpeF0gO1xuICAgIFx0XHRcdH1cbiAgICBcdFx0fVxuICAgIFx0XHRlbCA9IGVsLm5vZGVUeXBlID09IEFUVFJJQlVURV9OT0RFP2VsLm93bmVyRG9jdW1lbnQgOiBlbC5wYXJlbnROb2RlO1xuICAgIFx0fVxuICAgIFx0cmV0dXJuIG51bGw7XG4gICAgfSxcbiAgICAvLyBJbnRyb2R1Y2VkIGluIERPTSBMZXZlbCAzOlxuICAgIGlzRGVmYXVsdE5hbWVzcGFjZTpmdW5jdGlvbihuYW1lc3BhY2VVUkkpe1xuICAgIFx0dmFyIHByZWZpeCA9IHRoaXMubG9va3VwUHJlZml4KG5hbWVzcGFjZVVSSSk7XG4gICAgXHRyZXR1cm4gcHJlZml4ID09IG51bGw7XG4gICAgfVxufTtcblxuXG5mdW5jdGlvbiBfeG1sRW5jb2RlcihjKXtcblx0cmV0dXJuIGMgPT0gJzwnICYmICcmbHQ7JyB8fFxuICAgICAgICAgYyA9PSAnPicgJiYgJyZndDsnIHx8XG4gICAgICAgICBjID09ICcmJyAmJiAnJmFtcDsnIHx8XG4gICAgICAgICBjID09ICdcIicgJiYgJyZxdW90OycgfHxcbiAgICAgICAgICcmIycrYy5jaGFyQ29kZUF0KCkrJzsnXG59XG5cblxuY29weShOb2RlVHlwZSxOb2RlKTtcbmNvcHkoTm9kZVR5cGUsTm9kZS5wcm90b3R5cGUpO1xuXG4vKipcbiAqIEBwYXJhbSBjYWxsYmFjayByZXR1cm4gdHJ1ZSBmb3IgY29udGludWUsZmFsc2UgZm9yIGJyZWFrXG4gKiBAcmV0dXJuIGJvb2xlYW4gdHJ1ZTogYnJlYWsgdmlzaXQ7XG4gKi9cbmZ1bmN0aW9uIF92aXNpdE5vZGUobm9kZSxjYWxsYmFjayl7XG5cdGlmKGNhbGxiYWNrKG5vZGUpKXtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXHRpZihub2RlID0gbm9kZS5maXJzdENoaWxkKXtcblx0XHRkb3tcblx0XHRcdGlmKF92aXNpdE5vZGUobm9kZSxjYWxsYmFjaykpe3JldHVybiB0cnVlfVxuICAgICAgICB9d2hpbGUobm9kZT1ub2RlLm5leHRTaWJsaW5nKVxuICAgIH1cbn1cblxuXG5cbmZ1bmN0aW9uIERvY3VtZW50KCl7XG5cdHRoaXMub3duZXJEb2N1bWVudCA9IHRoaXM7XG59XG5cbmZ1bmN0aW9uIF9vbkFkZEF0dHJpYnV0ZShkb2MsZWwsbmV3QXR0cil7XG5cdGRvYyAmJiBkb2MuX2luYysrO1xuXHR2YXIgbnMgPSBuZXdBdHRyLm5hbWVzcGFjZVVSSSA7XG5cdGlmKG5zID09PSBOQU1FU1BBQ0UuWE1MTlMpe1xuXHRcdC8vdXBkYXRlIG5hbWVzcGFjZVxuXHRcdGVsLl9uc01hcFtuZXdBdHRyLnByZWZpeD9uZXdBdHRyLmxvY2FsTmFtZTonJ10gPSBuZXdBdHRyLnZhbHVlXG5cdH1cbn1cblxuZnVuY3Rpb24gX29uUmVtb3ZlQXR0cmlidXRlKGRvYyxlbCxuZXdBdHRyLHJlbW92ZSl7XG5cdGRvYyAmJiBkb2MuX2luYysrO1xuXHR2YXIgbnMgPSBuZXdBdHRyLm5hbWVzcGFjZVVSSSA7XG5cdGlmKG5zID09PSBOQU1FU1BBQ0UuWE1MTlMpe1xuXHRcdC8vdXBkYXRlIG5hbWVzcGFjZVxuXHRcdGRlbGV0ZSBlbC5fbnNNYXBbbmV3QXR0ci5wcmVmaXg/bmV3QXR0ci5sb2NhbE5hbWU6JyddXG5cdH1cbn1cblxuLyoqXG4gKiBVcGRhdGVzIGBlbC5jaGlsZE5vZGVzYCwgdXBkYXRpbmcgdGhlIGluZGV4ZWQgaXRlbXMgYW5kIGl0J3MgYGxlbmd0aGAuXG4gKiBQYXNzaW5nIGBuZXdDaGlsZGAgbWVhbnMgaXQgd2lsbCBiZSBhcHBlbmRlZC5cbiAqIE90aGVyd2lzZSBpdCdzIGFzc3VtZWQgdGhhdCBhbiBpdGVtIGhhcyBiZWVuIHJlbW92ZWQsXG4gKiBhbmQgYGVsLmZpcnN0Tm9kZWAgYW5kIGl0J3MgYC5uZXh0U2libGluZ2AgYXJlIHVzZWRcbiAqIHRvIHdhbGsgdGhlIGN1cnJlbnQgbGlzdCBvZiBjaGlsZCBub2Rlcy5cbiAqXG4gKiBAcGFyYW0ge0RvY3VtZW50fSBkb2NcbiAqIEBwYXJhbSB7Tm9kZX0gZWxcbiAqIEBwYXJhbSB7Tm9kZX0gW25ld0NoaWxkXVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gX29uVXBkYXRlQ2hpbGQgKGRvYywgZWwsIG5ld0NoaWxkKSB7XG5cdGlmKGRvYyAmJiBkb2MuX2luYyl7XG5cdFx0ZG9jLl9pbmMrKztcblx0XHQvL3VwZGF0ZSBjaGlsZE5vZGVzXG5cdFx0dmFyIGNzID0gZWwuY2hpbGROb2Rlcztcblx0XHRpZiAobmV3Q2hpbGQpIHtcblx0XHRcdGNzW2NzLmxlbmd0aCsrXSA9IG5ld0NoaWxkO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgY2hpbGQgPSBlbC5maXJzdENoaWxkO1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0d2hpbGUgKGNoaWxkKSB7XG5cdFx0XHRcdGNzW2krK10gPSBjaGlsZDtcblx0XHRcdFx0Y2hpbGQgPSBjaGlsZC5uZXh0U2libGluZztcblx0XHRcdH1cblx0XHRcdGNzLmxlbmd0aCA9IGk7XG5cdFx0XHRkZWxldGUgY3NbY3MubGVuZ3RoXTtcblx0XHR9XG5cdH1cbn1cblxuLyoqXG4gKiBSZW1vdmVzIHRoZSBjb25uZWN0aW9ucyBiZXR3ZWVuIGBwYXJlbnROb2RlYCBhbmQgYGNoaWxkYFxuICogYW5kIGFueSBleGlzdGluZyBgY2hpbGQucHJldmlvdXNTaWJsaW5nYCBvciBgY2hpbGQubmV4dFNpYmxpbmdgLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3htbGRvbS94bWxkb20vaXNzdWVzLzEzNVxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20veG1sZG9tL3htbGRvbS9pc3N1ZXMvMTQ1XG4gKlxuICogQHBhcmFtIHtOb2RlfSBwYXJlbnROb2RlXG4gKiBAcGFyYW0ge05vZGV9IGNoaWxkXG4gKiBAcmV0dXJucyB7Tm9kZX0gdGhlIGNoaWxkIHRoYXQgd2FzIHJlbW92ZWQuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBfcmVtb3ZlQ2hpbGQgKHBhcmVudE5vZGUsIGNoaWxkKSB7XG5cdHZhciBwcmV2aW91cyA9IGNoaWxkLnByZXZpb3VzU2libGluZztcblx0dmFyIG5leHQgPSBjaGlsZC5uZXh0U2libGluZztcblx0aWYgKHByZXZpb3VzKSB7XG5cdFx0cHJldmlvdXMubmV4dFNpYmxpbmcgPSBuZXh0O1xuXHR9IGVsc2Uge1xuXHRcdHBhcmVudE5vZGUuZmlyc3RDaGlsZCA9IG5leHQ7XG5cdH1cblx0aWYgKG5leHQpIHtcblx0XHRuZXh0LnByZXZpb3VzU2libGluZyA9IHByZXZpb3VzO1xuXHR9IGVsc2Uge1xuXHRcdHBhcmVudE5vZGUubGFzdENoaWxkID0gcHJldmlvdXM7XG5cdH1cblx0Y2hpbGQucGFyZW50Tm9kZSA9IG51bGw7XG5cdGNoaWxkLnByZXZpb3VzU2libGluZyA9IG51bGw7XG5cdGNoaWxkLm5leHRTaWJsaW5nID0gbnVsbDtcblx0X29uVXBkYXRlQ2hpbGQocGFyZW50Tm9kZS5vd25lckRvY3VtZW50LCBwYXJlbnROb2RlKTtcblx0cmV0dXJuIGNoaWxkO1xufVxuXG4vKipcbiAqIFJldHVybnMgYHRydWVgIGlmIGBub2RlYCBjYW4gYmUgYSBwYXJlbnQgZm9yIGluc2VydGlvbi5cbiAqIEBwYXJhbSB7Tm9kZX0gbm9kZVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGhhc1ZhbGlkUGFyZW50Tm9kZVR5cGUobm9kZSkge1xuXHRyZXR1cm4gKFxuXHRcdG5vZGUgJiZcblx0XHQobm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5ET0NVTUVOVF9OT0RFIHx8IG5vZGUubm9kZVR5cGUgPT09IE5vZGUuRE9DVU1FTlRfRlJBR01FTlRfTk9ERSB8fCBub2RlLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSlcblx0KTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGB0cnVlYCBpZiBgbm9kZWAgY2FuIGJlIGluc2VydGVkIGFjY29yZGluZyB0byBpdCdzIGBub2RlVHlwZWAuXG4gKiBAcGFyYW0ge05vZGV9IG5vZGVcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBoYXNJbnNlcnRhYmxlTm9kZVR5cGUobm9kZSkge1xuXHRyZXR1cm4gKFxuXHRcdG5vZGUgJiZcblx0XHQoaXNFbGVtZW50Tm9kZShub2RlKSB8fFxuXHRcdFx0aXNUZXh0Tm9kZShub2RlKSB8fFxuXHRcdFx0aXNEb2NUeXBlTm9kZShub2RlKSB8fFxuXHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5ET0NVTUVOVF9GUkFHTUVOVF9OT0RFIHx8XG5cdFx0XHRub2RlLm5vZGVUeXBlID09PSBOb2RlLkNPTU1FTlRfTk9ERSB8fFxuXHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5QUk9DRVNTSU5HX0lOU1RSVUNUSU9OX05PREUpXG5cdCk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGBub2RlYCBpcyBhIERPQ1RZUEUgbm9kZVxuICogQHBhcmFtIHtOb2RlfSBub2RlXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNEb2NUeXBlTm9kZShub2RlKSB7XG5cdHJldHVybiBub2RlICYmIG5vZGUubm9kZVR5cGUgPT09IE5vZGUuRE9DVU1FTlRfVFlQRV9OT0RFO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgbm9kZSBpcyBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge05vZGV9IG5vZGVcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc0VsZW1lbnROb2RlKG5vZGUpIHtcblx0cmV0dXJuIG5vZGUgJiYgbm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREU7XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBgbm9kZWAgaXMgYSB0ZXh0IG5vZGVcbiAqIEBwYXJhbSB7Tm9kZX0gbm9kZVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzVGV4dE5vZGUobm9kZSkge1xuXHRyZXR1cm4gbm9kZSAmJiBub2RlLm5vZGVUeXBlID09PSBOb2RlLlRFWFRfTk9ERTtcbn1cblxuLyoqXG4gKiBDaGVjayBpZiBlbiBlbGVtZW50IG5vZGUgY2FuIGJlIGluc2VydGVkIGJlZm9yZSBgY2hpbGRgLCBvciBhdCB0aGUgZW5kIGlmIGNoaWxkIGlzIGZhbHN5LFxuICogYWNjb3JkaW5nIHRvIHRoZSBwcmVzZW5jZSBhbmQgcG9zaXRpb24gb2YgYSBkb2N0eXBlIG5vZGUgb24gdGhlIHNhbWUgbGV2ZWwuXG4gKlxuICogQHBhcmFtIHtEb2N1bWVudH0gZG9jIFRoZSBkb2N1bWVudCBub2RlXG4gKiBAcGFyYW0ge05vZGV9IGNoaWxkIHRoZSBub2RlIHRoYXQgd291bGQgYmVjb21lIHRoZSBuZXh0U2libGluZyBpZiB0aGUgZWxlbWVudCB3b3VsZCBiZSBpbnNlcnRlZFxuICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiBhbiBlbGVtZW50IGNhbiBiZSBpbnNlcnRlZCBiZWZvcmUgY2hpbGRcbiAqIEBwcml2YXRlXG4gKiBodHRwczovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI2NvbmNlcHQtbm9kZS1lbnN1cmUtcHJlLWluc2VydGlvbi12YWxpZGl0eVxuICovXG5mdW5jdGlvbiBpc0VsZW1lbnRJbnNlcnRpb25Qb3NzaWJsZShkb2MsIGNoaWxkKSB7XG5cdHZhciBwYXJlbnRDaGlsZE5vZGVzID0gZG9jLmNoaWxkTm9kZXMgfHwgW107XG5cdGlmIChmaW5kKHBhcmVudENoaWxkTm9kZXMsIGlzRWxlbWVudE5vZGUpIHx8IGlzRG9jVHlwZU5vZGUoY2hpbGQpKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdHZhciBkb2NUeXBlTm9kZSA9IGZpbmQocGFyZW50Q2hpbGROb2RlcywgaXNEb2NUeXBlTm9kZSk7XG5cdHJldHVybiAhKGNoaWxkICYmIGRvY1R5cGVOb2RlICYmIHBhcmVudENoaWxkTm9kZXMuaW5kZXhPZihkb2NUeXBlTm9kZSkgPiBwYXJlbnRDaGlsZE5vZGVzLmluZGV4T2YoY2hpbGQpKTtcbn1cblxuLyoqXG4gKiBDaGVjayBpZiBlbiBlbGVtZW50IG5vZGUgY2FuIGJlIGluc2VydGVkIGJlZm9yZSBgY2hpbGRgLCBvciBhdCB0aGUgZW5kIGlmIGNoaWxkIGlzIGZhbHN5LFxuICogYWNjb3JkaW5nIHRvIHRoZSBwcmVzZW5jZSBhbmQgcG9zaXRpb24gb2YgYSBkb2N0eXBlIG5vZGUgb24gdGhlIHNhbWUgbGV2ZWwuXG4gKlxuICogQHBhcmFtIHtOb2RlfSBkb2MgVGhlIGRvY3VtZW50IG5vZGVcbiAqIEBwYXJhbSB7Tm9kZX0gY2hpbGQgdGhlIG5vZGUgdGhhdCB3b3VsZCBiZWNvbWUgdGhlIG5leHRTaWJsaW5nIGlmIHRoZSBlbGVtZW50IHdvdWxkIGJlIGluc2VydGVkXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIGFuIGVsZW1lbnQgY2FuIGJlIGluc2VydGVkIGJlZm9yZSBjaGlsZFxuICogQHByaXZhdGVcbiAqIGh0dHBzOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jY29uY2VwdC1ub2RlLWVuc3VyZS1wcmUtaW5zZXJ0aW9uLXZhbGlkaXR5XG4gKi9cbmZ1bmN0aW9uIGlzRWxlbWVudFJlcGxhY2VtZW50UG9zc2libGUoZG9jLCBjaGlsZCkge1xuXHR2YXIgcGFyZW50Q2hpbGROb2RlcyA9IGRvYy5jaGlsZE5vZGVzIHx8IFtdO1xuXG5cdGZ1bmN0aW9uIGhhc0VsZW1lbnRDaGlsZFRoYXRJc05vdENoaWxkKG5vZGUpIHtcblx0XHRyZXR1cm4gaXNFbGVtZW50Tm9kZShub2RlKSAmJiBub2RlICE9PSBjaGlsZDtcblx0fVxuXG5cdGlmIChmaW5kKHBhcmVudENoaWxkTm9kZXMsIGhhc0VsZW1lbnRDaGlsZFRoYXRJc05vdENoaWxkKSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHR2YXIgZG9jVHlwZU5vZGUgPSBmaW5kKHBhcmVudENoaWxkTm9kZXMsIGlzRG9jVHlwZU5vZGUpO1xuXHRyZXR1cm4gIShjaGlsZCAmJiBkb2NUeXBlTm9kZSAmJiBwYXJlbnRDaGlsZE5vZGVzLmluZGV4T2YoZG9jVHlwZU5vZGUpID4gcGFyZW50Q2hpbGROb2Rlcy5pbmRleE9mKGNoaWxkKSk7XG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqIFN0ZXBzIDEtNSBvZiB0aGUgY2hlY2tzIGJlZm9yZSBpbnNlcnRpbmcgYW5kIGJlZm9yZSByZXBsYWNpbmcgYSBjaGlsZCBhcmUgdGhlIHNhbWUuXG4gKlxuICogQHBhcmFtIHtOb2RlfSBwYXJlbnQgdGhlIHBhcmVudCBub2RlIHRvIGluc2VydCBgbm9kZWAgaW50b1xuICogQHBhcmFtIHtOb2RlfSBub2RlIHRoZSBub2RlIHRvIGluc2VydFxuICogQHBhcmFtIHtOb2RlPX0gY2hpbGQgdGhlIG5vZGUgdGhhdCBzaG91bGQgYmVjb21lIHRoZSBgbmV4dFNpYmxpbmdgIG9mIGBub2RlYFxuICogQHJldHVybnMge05vZGV9XG4gKiBAdGhyb3dzIERPTUV4Y2VwdGlvbiBmb3Igc2V2ZXJhbCBub2RlIGNvbWJpbmF0aW9ucyB0aGF0IHdvdWxkIGNyZWF0ZSBhIERPTSB0aGF0IGlzIG5vdCB3ZWxsLWZvcm1lZC5cbiAqIEB0aHJvd3MgRE9NRXhjZXB0aW9uIGlmIGBjaGlsZGAgaXMgcHJvdmlkZWQgYnV0IGlzIG5vdCBhIGNoaWxkIG9mIGBwYXJlbnRgLlxuICogQHNlZSBodHRwczovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI2NvbmNlcHQtbm9kZS1lbnN1cmUtcHJlLWluc2VydGlvbi12YWxpZGl0eVxuICogQHNlZSBodHRwczovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI2NvbmNlcHQtbm9kZS1yZXBsYWNlXG4gKi9cbmZ1bmN0aW9uIGFzc2VydFByZUluc2VydGlvblZhbGlkaXR5MXRvNShwYXJlbnQsIG5vZGUsIGNoaWxkKSB7XG5cdC8vIDEuIElmIGBwYXJlbnRgIGlzIG5vdCBhIERvY3VtZW50LCBEb2N1bWVudEZyYWdtZW50LCBvciBFbGVtZW50IG5vZGUsIHRoZW4gdGhyb3cgYSBcIkhpZXJhcmNoeVJlcXVlc3RFcnJvclwiIERPTUV4Y2VwdGlvbi5cblx0aWYgKCFoYXNWYWxpZFBhcmVudE5vZGVUeXBlKHBhcmVudCkpIHtcblx0XHR0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKEhJRVJBUkNIWV9SRVFVRVNUX0VSUiwgJ1VuZXhwZWN0ZWQgcGFyZW50IG5vZGUgdHlwZSAnICsgcGFyZW50Lm5vZGVUeXBlKTtcblx0fVxuXHQvLyAyLiBJZiBgbm9kZWAgaXMgYSBob3N0LWluY2x1ZGluZyBpbmNsdXNpdmUgYW5jZXN0b3Igb2YgYHBhcmVudGAsIHRoZW4gdGhyb3cgYSBcIkhpZXJhcmNoeVJlcXVlc3RFcnJvclwiIERPTUV4Y2VwdGlvbi5cblx0Ly8gbm90IGltcGxlbWVudGVkIVxuXHQvLyAzLiBJZiBgY2hpbGRgIGlzIG5vbi1udWxsIGFuZCBpdHMgcGFyZW50IGlzIG5vdCBgcGFyZW50YCwgdGhlbiB0aHJvdyBhIFwiTm90Rm91bmRFcnJvclwiIERPTUV4Y2VwdGlvbi5cblx0aWYgKGNoaWxkICYmIGNoaWxkLnBhcmVudE5vZGUgIT09IHBhcmVudCkge1xuXHRcdHRocm93IG5ldyBET01FeGNlcHRpb24oTk9UX0ZPVU5EX0VSUiwgJ2NoaWxkIG5vdCBpbiBwYXJlbnQnKTtcblx0fVxuXHRpZiAoXG5cdFx0Ly8gNC4gSWYgYG5vZGVgIGlzIG5vdCBhIERvY3VtZW50RnJhZ21lbnQsIERvY3VtZW50VHlwZSwgRWxlbWVudCwgb3IgQ2hhcmFjdGVyRGF0YSBub2RlLCB0aGVuIHRocm93IGEgXCJIaWVyYXJjaHlSZXF1ZXN0RXJyb3JcIiBET01FeGNlcHRpb24uXG5cdFx0IWhhc0luc2VydGFibGVOb2RlVHlwZShub2RlKSB8fFxuXHRcdC8vIDUuIElmIGVpdGhlciBgbm9kZWAgaXMgYSBUZXh0IG5vZGUgYW5kIGBwYXJlbnRgIGlzIGEgZG9jdW1lbnQsXG5cdFx0Ly8gdGhlIHNheCBwYXJzZXIgY3VycmVudGx5IGFkZHMgdG9wIGxldmVsIHRleHQgbm9kZXMsIHRoaXMgd2lsbCBiZSBmaXhlZCBpbiAwLjkuMFxuXHRcdC8vIHx8IChub2RlLm5vZGVUeXBlID09PSBOb2RlLlRFWFRfTk9ERSAmJiBwYXJlbnQubm9kZVR5cGUgPT09IE5vZGUuRE9DVU1FTlRfTk9ERSlcblx0XHQvLyBvciBgbm9kZWAgaXMgYSBkb2N0eXBlIGFuZCBgcGFyZW50YCBpcyBub3QgYSBkb2N1bWVudCwgdGhlbiB0aHJvdyBhIFwiSGllcmFyY2h5UmVxdWVzdEVycm9yXCIgRE9NRXhjZXB0aW9uLlxuXHRcdChpc0RvY1R5cGVOb2RlKG5vZGUpICYmIHBhcmVudC5ub2RlVHlwZSAhPT0gTm9kZS5ET0NVTUVOVF9OT0RFKVxuXHQpIHtcblx0XHR0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKFxuXHRcdFx0SElFUkFSQ0hZX1JFUVVFU1RfRVJSLFxuXHRcdFx0J1VuZXhwZWN0ZWQgbm9kZSB0eXBlICcgKyBub2RlLm5vZGVUeXBlICsgJyBmb3IgcGFyZW50IG5vZGUgdHlwZSAnICsgcGFyZW50Lm5vZGVUeXBlXG5cdFx0KTtcblx0fVxufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKiBTdGVwIDYgb2YgdGhlIGNoZWNrcyBiZWZvcmUgaW5zZXJ0aW5nIGFuZCBiZWZvcmUgcmVwbGFjaW5nIGEgY2hpbGQgYXJlIGRpZmZlcmVudC5cbiAqXG4gKiBAcGFyYW0ge0RvY3VtZW50fSBwYXJlbnQgdGhlIHBhcmVudCBub2RlIHRvIGluc2VydCBgbm9kZWAgaW50b1xuICogQHBhcmFtIHtOb2RlfSBub2RlIHRoZSBub2RlIHRvIGluc2VydFxuICogQHBhcmFtIHtOb2RlIHwgdW5kZWZpbmVkfSBjaGlsZCB0aGUgbm9kZSB0aGF0IHNob3VsZCBiZWNvbWUgdGhlIGBuZXh0U2libGluZ2Agb2YgYG5vZGVgXG4gKiBAcmV0dXJucyB7Tm9kZX1cbiAqIEB0aHJvd3MgRE9NRXhjZXB0aW9uIGZvciBzZXZlcmFsIG5vZGUgY29tYmluYXRpb25zIHRoYXQgd291bGQgY3JlYXRlIGEgRE9NIHRoYXQgaXMgbm90IHdlbGwtZm9ybWVkLlxuICogQHRocm93cyBET01FeGNlcHRpb24gaWYgYGNoaWxkYCBpcyBwcm92aWRlZCBidXQgaXMgbm90IGEgY2hpbGQgb2YgYHBhcmVudGAuXG4gKiBAc2VlIGh0dHBzOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jY29uY2VwdC1ub2RlLWVuc3VyZS1wcmUtaW5zZXJ0aW9uLXZhbGlkaXR5XG4gKiBAc2VlIGh0dHBzOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jY29uY2VwdC1ub2RlLXJlcGxhY2VcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0UHJlSW5zZXJ0aW9uVmFsaWRpdHlJbkRvY3VtZW50KHBhcmVudCwgbm9kZSwgY2hpbGQpIHtcblx0dmFyIHBhcmVudENoaWxkTm9kZXMgPSBwYXJlbnQuY2hpbGROb2RlcyB8fCBbXTtcblx0dmFyIG5vZGVDaGlsZE5vZGVzID0gbm9kZS5jaGlsZE5vZGVzIHx8IFtdO1xuXG5cdC8vIERvY3VtZW50RnJhZ21lbnRcblx0aWYgKG5vZGUubm9kZVR5cGUgPT09IE5vZGUuRE9DVU1FTlRfRlJBR01FTlRfTk9ERSkge1xuXHRcdHZhciBub2RlQ2hpbGRFbGVtZW50cyA9IG5vZGVDaGlsZE5vZGVzLmZpbHRlcihpc0VsZW1lbnROb2RlKTtcblx0XHQvLyBJZiBub2RlIGhhcyBtb3JlIHRoYW4gb25lIGVsZW1lbnQgY2hpbGQgb3IgaGFzIGEgVGV4dCBub2RlIGNoaWxkLlxuXHRcdGlmIChub2RlQ2hpbGRFbGVtZW50cy5sZW5ndGggPiAxIHx8IGZpbmQobm9kZUNoaWxkTm9kZXMsIGlzVGV4dE5vZGUpKSB7XG5cdFx0XHR0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKEhJRVJBUkNIWV9SRVFVRVNUX0VSUiwgJ01vcmUgdGhhbiBvbmUgZWxlbWVudCBvciB0ZXh0IGluIGZyYWdtZW50Jyk7XG5cdFx0fVxuXHRcdC8vIE90aGVyd2lzZSwgaWYgYG5vZGVgIGhhcyBvbmUgZWxlbWVudCBjaGlsZCBhbmQgZWl0aGVyIGBwYXJlbnRgIGhhcyBhbiBlbGVtZW50IGNoaWxkLFxuXHRcdC8vIGBjaGlsZGAgaXMgYSBkb2N0eXBlLCBvciBgY2hpbGRgIGlzIG5vbi1udWxsIGFuZCBhIGRvY3R5cGUgaXMgZm9sbG93aW5nIGBjaGlsZGAuXG5cdFx0aWYgKG5vZGVDaGlsZEVsZW1lbnRzLmxlbmd0aCA9PT0gMSAmJiAhaXNFbGVtZW50SW5zZXJ0aW9uUG9zc2libGUocGFyZW50LCBjaGlsZCkpIHtcblx0XHRcdHRocm93IG5ldyBET01FeGNlcHRpb24oSElFUkFSQ0hZX1JFUVVFU1RfRVJSLCAnRWxlbWVudCBpbiBmcmFnbWVudCBjYW4gbm90IGJlIGluc2VydGVkIGJlZm9yZSBkb2N0eXBlJyk7XG5cdFx0fVxuXHR9XG5cdC8vIEVsZW1lbnRcblx0aWYgKGlzRWxlbWVudE5vZGUobm9kZSkpIHtcblx0XHQvLyBgcGFyZW50YCBoYXMgYW4gZWxlbWVudCBjaGlsZCwgYGNoaWxkYCBpcyBhIGRvY3R5cGUsXG5cdFx0Ly8gb3IgYGNoaWxkYCBpcyBub24tbnVsbCBhbmQgYSBkb2N0eXBlIGlzIGZvbGxvd2luZyBgY2hpbGRgLlxuXHRcdGlmICghaXNFbGVtZW50SW5zZXJ0aW9uUG9zc2libGUocGFyZW50LCBjaGlsZCkpIHtcblx0XHRcdHRocm93IG5ldyBET01FeGNlcHRpb24oSElFUkFSQ0hZX1JFUVVFU1RfRVJSLCAnT25seSBvbmUgZWxlbWVudCBjYW4gYmUgYWRkZWQgYW5kIG9ubHkgYWZ0ZXIgZG9jdHlwZScpO1xuXHRcdH1cblx0fVxuXHQvLyBEb2N1bWVudFR5cGVcblx0aWYgKGlzRG9jVHlwZU5vZGUobm9kZSkpIHtcblx0XHQvLyBgcGFyZW50YCBoYXMgYSBkb2N0eXBlIGNoaWxkLFxuXHRcdGlmIChmaW5kKHBhcmVudENoaWxkTm9kZXMsIGlzRG9jVHlwZU5vZGUpKSB7XG5cdFx0XHR0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKEhJRVJBUkNIWV9SRVFVRVNUX0VSUiwgJ09ubHkgb25lIGRvY3R5cGUgaXMgYWxsb3dlZCcpO1xuXHRcdH1cblx0XHR2YXIgcGFyZW50RWxlbWVudENoaWxkID0gZmluZChwYXJlbnRDaGlsZE5vZGVzLCBpc0VsZW1lbnROb2RlKTtcblx0XHQvLyBgY2hpbGRgIGlzIG5vbi1udWxsIGFuZCBhbiBlbGVtZW50IGlzIHByZWNlZGluZyBgY2hpbGRgLFxuXHRcdGlmIChjaGlsZCAmJiBwYXJlbnRDaGlsZE5vZGVzLmluZGV4T2YocGFyZW50RWxlbWVudENoaWxkKSA8IHBhcmVudENoaWxkTm9kZXMuaW5kZXhPZihjaGlsZCkpIHtcblx0XHRcdHRocm93IG5ldyBET01FeGNlcHRpb24oSElFUkFSQ0hZX1JFUVVFU1RfRVJSLCAnRG9jdHlwZSBjYW4gb25seSBiZSBpbnNlcnRlZCBiZWZvcmUgYW4gZWxlbWVudCcpO1xuXHRcdH1cblx0XHQvLyBvciBgY2hpbGRgIGlzIG51bGwgYW5kIGBwYXJlbnRgIGhhcyBhbiBlbGVtZW50IGNoaWxkLlxuXHRcdGlmICghY2hpbGQgJiYgcGFyZW50RWxlbWVudENoaWxkKSB7XG5cdFx0XHR0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKEhJRVJBUkNIWV9SRVFVRVNUX0VSUiwgJ0RvY3R5cGUgY2FuIG5vdCBiZSBhcHBlbmRlZCBzaW5jZSBlbGVtZW50IGlzIHByZXNlbnQnKTtcblx0XHR9XG5cdH1cbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogU3RlcCA2IG9mIHRoZSBjaGVja3MgYmVmb3JlIGluc2VydGluZyBhbmQgYmVmb3JlIHJlcGxhY2luZyBhIGNoaWxkIGFyZSBkaWZmZXJlbnQuXG4gKlxuICogQHBhcmFtIHtEb2N1bWVudH0gcGFyZW50IHRoZSBwYXJlbnQgbm9kZSB0byBpbnNlcnQgYG5vZGVgIGludG9cbiAqIEBwYXJhbSB7Tm9kZX0gbm9kZSB0aGUgbm9kZSB0byBpbnNlcnRcbiAqIEBwYXJhbSB7Tm9kZSB8IHVuZGVmaW5lZH0gY2hpbGQgdGhlIG5vZGUgdGhhdCBzaG91bGQgYmVjb21lIHRoZSBgbmV4dFNpYmxpbmdgIG9mIGBub2RlYFxuICogQHJldHVybnMge05vZGV9XG4gKiBAdGhyb3dzIERPTUV4Y2VwdGlvbiBmb3Igc2V2ZXJhbCBub2RlIGNvbWJpbmF0aW9ucyB0aGF0IHdvdWxkIGNyZWF0ZSBhIERPTSB0aGF0IGlzIG5vdCB3ZWxsLWZvcm1lZC5cbiAqIEB0aHJvd3MgRE9NRXhjZXB0aW9uIGlmIGBjaGlsZGAgaXMgcHJvdmlkZWQgYnV0IGlzIG5vdCBhIGNoaWxkIG9mIGBwYXJlbnRgLlxuICogQHNlZSBodHRwczovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI2NvbmNlcHQtbm9kZS1lbnN1cmUtcHJlLWluc2VydGlvbi12YWxpZGl0eVxuICogQHNlZSBodHRwczovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI2NvbmNlcHQtbm9kZS1yZXBsYWNlXG4gKi9cbmZ1bmN0aW9uIGFzc2VydFByZVJlcGxhY2VtZW50VmFsaWRpdHlJbkRvY3VtZW50KHBhcmVudCwgbm9kZSwgY2hpbGQpIHtcblx0dmFyIHBhcmVudENoaWxkTm9kZXMgPSBwYXJlbnQuY2hpbGROb2RlcyB8fCBbXTtcblx0dmFyIG5vZGVDaGlsZE5vZGVzID0gbm9kZS5jaGlsZE5vZGVzIHx8IFtdO1xuXG5cdC8vIERvY3VtZW50RnJhZ21lbnRcblx0aWYgKG5vZGUubm9kZVR5cGUgPT09IE5vZGUuRE9DVU1FTlRfRlJBR01FTlRfTk9ERSkge1xuXHRcdHZhciBub2RlQ2hpbGRFbGVtZW50cyA9IG5vZGVDaGlsZE5vZGVzLmZpbHRlcihpc0VsZW1lbnROb2RlKTtcblx0XHQvLyBJZiBgbm9kZWAgaGFzIG1vcmUgdGhhbiBvbmUgZWxlbWVudCBjaGlsZCBvciBoYXMgYSBUZXh0IG5vZGUgY2hpbGQuXG5cdFx0aWYgKG5vZGVDaGlsZEVsZW1lbnRzLmxlbmd0aCA+IDEgfHwgZmluZChub2RlQ2hpbGROb2RlcywgaXNUZXh0Tm9kZSkpIHtcblx0XHRcdHRocm93IG5ldyBET01FeGNlcHRpb24oSElFUkFSQ0hZX1JFUVVFU1RfRVJSLCAnTW9yZSB0aGFuIG9uZSBlbGVtZW50IG9yIHRleHQgaW4gZnJhZ21lbnQnKTtcblx0XHR9XG5cdFx0Ly8gT3RoZXJ3aXNlLCBpZiBgbm9kZWAgaGFzIG9uZSBlbGVtZW50IGNoaWxkIGFuZCBlaXRoZXIgYHBhcmVudGAgaGFzIGFuIGVsZW1lbnQgY2hpbGQgdGhhdCBpcyBub3QgYGNoaWxkYCBvciBhIGRvY3R5cGUgaXMgZm9sbG93aW5nIGBjaGlsZGAuXG5cdFx0aWYgKG5vZGVDaGlsZEVsZW1lbnRzLmxlbmd0aCA9PT0gMSAmJiAhaXNFbGVtZW50UmVwbGFjZW1lbnRQb3NzaWJsZShwYXJlbnQsIGNoaWxkKSkge1xuXHRcdFx0dGhyb3cgbmV3IERPTUV4Y2VwdGlvbihISUVSQVJDSFlfUkVRVUVTVF9FUlIsICdFbGVtZW50IGluIGZyYWdtZW50IGNhbiBub3QgYmUgaW5zZXJ0ZWQgYmVmb3JlIGRvY3R5cGUnKTtcblx0XHR9XG5cdH1cblx0Ly8gRWxlbWVudFxuXHRpZiAoaXNFbGVtZW50Tm9kZShub2RlKSkge1xuXHRcdC8vIGBwYXJlbnRgIGhhcyBhbiBlbGVtZW50IGNoaWxkIHRoYXQgaXMgbm90IGBjaGlsZGAgb3IgYSBkb2N0eXBlIGlzIGZvbGxvd2luZyBgY2hpbGRgLlxuXHRcdGlmICghaXNFbGVtZW50UmVwbGFjZW1lbnRQb3NzaWJsZShwYXJlbnQsIGNoaWxkKSkge1xuXHRcdFx0dGhyb3cgbmV3IERPTUV4Y2VwdGlvbihISUVSQVJDSFlfUkVRVUVTVF9FUlIsICdPbmx5IG9uZSBlbGVtZW50IGNhbiBiZSBhZGRlZCBhbmQgb25seSBhZnRlciBkb2N0eXBlJyk7XG5cdFx0fVxuXHR9XG5cdC8vIERvY3VtZW50VHlwZVxuXHRpZiAoaXNEb2NUeXBlTm9kZShub2RlKSkge1xuXHRcdGZ1bmN0aW9uIGhhc0RvY3R5cGVDaGlsZFRoYXRJc05vdENoaWxkKG5vZGUpIHtcblx0XHRcdHJldHVybiBpc0RvY1R5cGVOb2RlKG5vZGUpICYmIG5vZGUgIT09IGNoaWxkO1xuXHRcdH1cblxuXHRcdC8vIGBwYXJlbnRgIGhhcyBhIGRvY3R5cGUgY2hpbGQgdGhhdCBpcyBub3QgYGNoaWxkYCxcblx0XHRpZiAoZmluZChwYXJlbnRDaGlsZE5vZGVzLCBoYXNEb2N0eXBlQ2hpbGRUaGF0SXNOb3RDaGlsZCkpIHtcblx0XHRcdHRocm93IG5ldyBET01FeGNlcHRpb24oSElFUkFSQ0hZX1JFUVVFU1RfRVJSLCAnT25seSBvbmUgZG9jdHlwZSBpcyBhbGxvd2VkJyk7XG5cdFx0fVxuXHRcdHZhciBwYXJlbnRFbGVtZW50Q2hpbGQgPSBmaW5kKHBhcmVudENoaWxkTm9kZXMsIGlzRWxlbWVudE5vZGUpO1xuXHRcdC8vIG9yIGFuIGVsZW1lbnQgaXMgcHJlY2VkaW5nIGBjaGlsZGAuXG5cdFx0aWYgKGNoaWxkICYmIHBhcmVudENoaWxkTm9kZXMuaW5kZXhPZihwYXJlbnRFbGVtZW50Q2hpbGQpIDwgcGFyZW50Q2hpbGROb2Rlcy5pbmRleE9mKGNoaWxkKSkge1xuXHRcdFx0dGhyb3cgbmV3IERPTUV4Y2VwdGlvbihISUVSQVJDSFlfUkVRVUVTVF9FUlIsICdEb2N0eXBlIGNhbiBvbmx5IGJlIGluc2VydGVkIGJlZm9yZSBhbiBlbGVtZW50Jyk7XG5cdFx0fVxuXHR9XG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Tm9kZX0gcGFyZW50IHRoZSBwYXJlbnQgbm9kZSB0byBpbnNlcnQgYG5vZGVgIGludG9cbiAqIEBwYXJhbSB7Tm9kZX0gbm9kZSB0aGUgbm9kZSB0byBpbnNlcnRcbiAqIEBwYXJhbSB7Tm9kZT19IGNoaWxkIHRoZSBub2RlIHRoYXQgc2hvdWxkIGJlY29tZSB0aGUgYG5leHRTaWJsaW5nYCBvZiBgbm9kZWBcbiAqIEByZXR1cm5zIHtOb2RlfVxuICogQHRocm93cyBET01FeGNlcHRpb24gZm9yIHNldmVyYWwgbm9kZSBjb21iaW5hdGlvbnMgdGhhdCB3b3VsZCBjcmVhdGUgYSBET00gdGhhdCBpcyBub3Qgd2VsbC1mb3JtZWQuXG4gKiBAdGhyb3dzIERPTUV4Y2VwdGlvbiBpZiBgY2hpbGRgIGlzIHByb3ZpZGVkIGJ1dCBpcyBub3QgYSBjaGlsZCBvZiBgcGFyZW50YC5cbiAqIEBzZWUgaHR0cHM6Ly9kb20uc3BlYy53aGF0d2cub3JnLyNjb25jZXB0LW5vZGUtZW5zdXJlLXByZS1pbnNlcnRpb24tdmFsaWRpdHlcbiAqL1xuZnVuY3Rpb24gX2luc2VydEJlZm9yZShwYXJlbnQsIG5vZGUsIGNoaWxkLCBfaW5Eb2N1bWVudEFzc2VydGlvbikge1xuXHQvLyBUbyBlbnN1cmUgcHJlLWluc2VydGlvbiB2YWxpZGl0eSBvZiBhIG5vZGUgaW50byBhIHBhcmVudCBiZWZvcmUgYSBjaGlsZCwgcnVuIHRoZXNlIHN0ZXBzOlxuXHRhc3NlcnRQcmVJbnNlcnRpb25WYWxpZGl0eTF0bzUocGFyZW50LCBub2RlLCBjaGlsZCk7XG5cblx0Ly8gSWYgcGFyZW50IGlzIGEgZG9jdW1lbnQsIGFuZCBhbnkgb2YgdGhlIHN0YXRlbWVudHMgYmVsb3csIHN3aXRjaGVkIG9uIHRoZSBpbnRlcmZhY2Ugbm9kZSBpbXBsZW1lbnRzLFxuXHQvLyBhcmUgdHJ1ZSwgdGhlbiB0aHJvdyBhIFwiSGllcmFyY2h5UmVxdWVzdEVycm9yXCIgRE9NRXhjZXB0aW9uLlxuXHRpZiAocGFyZW50Lm5vZGVUeXBlID09PSBOb2RlLkRPQ1VNRU5UX05PREUpIHtcblx0XHQoX2luRG9jdW1lbnRBc3NlcnRpb24gfHwgYXNzZXJ0UHJlSW5zZXJ0aW9uVmFsaWRpdHlJbkRvY3VtZW50KShwYXJlbnQsIG5vZGUsIGNoaWxkKTtcblx0fVxuXG5cdHZhciBjcCA9IG5vZGUucGFyZW50Tm9kZTtcblx0aWYoY3Ape1xuXHRcdGNwLnJlbW92ZUNoaWxkKG5vZGUpOy8vcmVtb3ZlIGFuZCB1cGRhdGVcblx0fVxuXHRpZihub2RlLm5vZGVUeXBlID09PSBET0NVTUVOVF9GUkFHTUVOVF9OT0RFKXtcblx0XHR2YXIgbmV3Rmlyc3QgPSBub2RlLmZpcnN0Q2hpbGQ7XG5cdFx0aWYgKG5ld0ZpcnN0ID09IG51bGwpIHtcblx0XHRcdHJldHVybiBub2RlO1xuXHRcdH1cblx0XHR2YXIgbmV3TGFzdCA9IG5vZGUubGFzdENoaWxkO1xuXHR9ZWxzZXtcblx0XHRuZXdGaXJzdCA9IG5ld0xhc3QgPSBub2RlO1xuXHR9XG5cdHZhciBwcmUgPSBjaGlsZCA/IGNoaWxkLnByZXZpb3VzU2libGluZyA6IHBhcmVudC5sYXN0Q2hpbGQ7XG5cblx0bmV3Rmlyc3QucHJldmlvdXNTaWJsaW5nID0gcHJlO1xuXHRuZXdMYXN0Lm5leHRTaWJsaW5nID0gY2hpbGQ7XG5cblxuXHRpZihwcmUpe1xuXHRcdHByZS5uZXh0U2libGluZyA9IG5ld0ZpcnN0O1xuXHR9ZWxzZXtcblx0XHRwYXJlbnQuZmlyc3RDaGlsZCA9IG5ld0ZpcnN0O1xuXHR9XG5cdGlmKGNoaWxkID09IG51bGwpe1xuXHRcdHBhcmVudC5sYXN0Q2hpbGQgPSBuZXdMYXN0O1xuXHR9ZWxzZXtcblx0XHRjaGlsZC5wcmV2aW91c1NpYmxpbmcgPSBuZXdMYXN0O1xuXHR9XG5cdGRve1xuXHRcdG5ld0ZpcnN0LnBhcmVudE5vZGUgPSBwYXJlbnQ7XG5cdH13aGlsZShuZXdGaXJzdCAhPT0gbmV3TGFzdCAmJiAobmV3Rmlyc3Q9IG5ld0ZpcnN0Lm5leHRTaWJsaW5nKSlcblx0X29uVXBkYXRlQ2hpbGQocGFyZW50Lm93bmVyRG9jdW1lbnR8fHBhcmVudCwgcGFyZW50KTtcblx0Ly9jb25zb2xlLmxvZyhwYXJlbnQubGFzdENoaWxkLm5leHRTaWJsaW5nID09IG51bGwpXG5cdGlmIChub2RlLm5vZGVUeXBlID09IERPQ1VNRU5UX0ZSQUdNRU5UX05PREUpIHtcblx0XHRub2RlLmZpcnN0Q2hpbGQgPSBub2RlLmxhc3RDaGlsZCA9IG51bGw7XG5cdH1cblx0cmV0dXJuIG5vZGU7XG59XG5cbi8qKlxuICogQXBwZW5kcyBgbmV3Q2hpbGRgIHRvIGBwYXJlbnROb2RlYC5cbiAqIElmIGBuZXdDaGlsZGAgaXMgYWxyZWFkeSBjb25uZWN0ZWQgdG8gYSBgcGFyZW50Tm9kZWAgaXQgaXMgZmlyc3QgcmVtb3ZlZCBmcm9tIGl0LlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3htbGRvbS94bWxkb20vaXNzdWVzLzEzNVxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20veG1sZG9tL3htbGRvbS9pc3N1ZXMvMTQ1XG4gKiBAcGFyYW0ge05vZGV9IHBhcmVudE5vZGVcbiAqIEBwYXJhbSB7Tm9kZX0gbmV3Q2hpbGRcbiAqIEByZXR1cm5zIHtOb2RlfVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gX2FwcGVuZFNpbmdsZUNoaWxkIChwYXJlbnROb2RlLCBuZXdDaGlsZCkge1xuXHRpZiAobmV3Q2hpbGQucGFyZW50Tm9kZSkge1xuXHRcdG5ld0NoaWxkLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobmV3Q2hpbGQpO1xuXHR9XG5cdG5ld0NoaWxkLnBhcmVudE5vZGUgPSBwYXJlbnROb2RlO1xuXHRuZXdDaGlsZC5wcmV2aW91c1NpYmxpbmcgPSBwYXJlbnROb2RlLmxhc3RDaGlsZDtcblx0bmV3Q2hpbGQubmV4dFNpYmxpbmcgPSBudWxsO1xuXHRpZiAobmV3Q2hpbGQucHJldmlvdXNTaWJsaW5nKSB7XG5cdFx0bmV3Q2hpbGQucHJldmlvdXNTaWJsaW5nLm5leHRTaWJsaW5nID0gbmV3Q2hpbGQ7XG5cdH0gZWxzZSB7XG5cdFx0cGFyZW50Tm9kZS5maXJzdENoaWxkID0gbmV3Q2hpbGQ7XG5cdH1cblx0cGFyZW50Tm9kZS5sYXN0Q2hpbGQgPSBuZXdDaGlsZDtcblx0X29uVXBkYXRlQ2hpbGQocGFyZW50Tm9kZS5vd25lckRvY3VtZW50LCBwYXJlbnROb2RlLCBuZXdDaGlsZCk7XG5cdHJldHVybiBuZXdDaGlsZDtcbn1cblxuRG9jdW1lbnQucHJvdG90eXBlID0ge1xuXHQvL2ltcGxlbWVudGF0aW9uIDogbnVsbCxcblx0bm9kZU5hbWUgOiAgJyNkb2N1bWVudCcsXG5cdG5vZGVUeXBlIDogIERPQ1VNRU5UX05PREUsXG5cdC8qKlxuXHQgKiBUaGUgRG9jdW1lbnRUeXBlIG5vZGUgb2YgdGhlIGRvY3VtZW50LlxuXHQgKlxuXHQgKiBAcmVhZG9ubHlcblx0ICogQHR5cGUgRG9jdW1lbnRUeXBlXG5cdCAqL1xuXHRkb2N0eXBlIDogIG51bGwsXG5cdGRvY3VtZW50RWxlbWVudCA6ICBudWxsLFxuXHRfaW5jIDogMSxcblxuXHRpbnNlcnRCZWZvcmUgOiAgZnVuY3Rpb24obmV3Q2hpbGQsIHJlZkNoaWxkKXsvL3JhaXNlc1xuXHRcdGlmKG5ld0NoaWxkLm5vZGVUeXBlID09IERPQ1VNRU5UX0ZSQUdNRU5UX05PREUpe1xuXHRcdFx0dmFyIGNoaWxkID0gbmV3Q2hpbGQuZmlyc3RDaGlsZDtcblx0XHRcdHdoaWxlKGNoaWxkKXtcblx0XHRcdFx0dmFyIG5leHQgPSBjaGlsZC5uZXh0U2libGluZztcblx0XHRcdFx0dGhpcy5pbnNlcnRCZWZvcmUoY2hpbGQscmVmQ2hpbGQpO1xuXHRcdFx0XHRjaGlsZCA9IG5leHQ7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbmV3Q2hpbGQ7XG5cdFx0fVxuXHRcdF9pbnNlcnRCZWZvcmUodGhpcywgbmV3Q2hpbGQsIHJlZkNoaWxkKTtcblx0XHRuZXdDaGlsZC5vd25lckRvY3VtZW50ID0gdGhpcztcblx0XHRpZiAodGhpcy5kb2N1bWVudEVsZW1lbnQgPT09IG51bGwgJiYgbmV3Q2hpbGQubm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERSkge1xuXHRcdFx0dGhpcy5kb2N1bWVudEVsZW1lbnQgPSBuZXdDaGlsZDtcblx0XHR9XG5cblx0XHRyZXR1cm4gbmV3Q2hpbGQ7XG5cdH0sXG5cdHJlbW92ZUNoaWxkIDogIGZ1bmN0aW9uKG9sZENoaWxkKXtcblx0XHRpZih0aGlzLmRvY3VtZW50RWxlbWVudCA9PSBvbGRDaGlsZCl7XG5cdFx0XHR0aGlzLmRvY3VtZW50RWxlbWVudCA9IG51bGw7XG5cdFx0fVxuXHRcdHJldHVybiBfcmVtb3ZlQ2hpbGQodGhpcyxvbGRDaGlsZCk7XG5cdH0sXG5cdHJlcGxhY2VDaGlsZDogZnVuY3Rpb24gKG5ld0NoaWxkLCBvbGRDaGlsZCkge1xuXHRcdC8vcmFpc2VzXG5cdFx0X2luc2VydEJlZm9yZSh0aGlzLCBuZXdDaGlsZCwgb2xkQ2hpbGQsIGFzc2VydFByZVJlcGxhY2VtZW50VmFsaWRpdHlJbkRvY3VtZW50KTtcblx0XHRuZXdDaGlsZC5vd25lckRvY3VtZW50ID0gdGhpcztcblx0XHRpZiAob2xkQ2hpbGQpIHtcblx0XHRcdHRoaXMucmVtb3ZlQ2hpbGQob2xkQ2hpbGQpO1xuXHRcdH1cblx0XHRpZiAoaXNFbGVtZW50Tm9kZShuZXdDaGlsZCkpIHtcblx0XHRcdHRoaXMuZG9jdW1lbnRFbGVtZW50ID0gbmV3Q2hpbGQ7XG5cdFx0fVxuXHR9LFxuXHQvLyBJbnRyb2R1Y2VkIGluIERPTSBMZXZlbCAyOlxuXHRpbXBvcnROb2RlIDogZnVuY3Rpb24oaW1wb3J0ZWROb2RlLGRlZXApe1xuXHRcdHJldHVybiBpbXBvcnROb2RlKHRoaXMsaW1wb3J0ZWROb2RlLGRlZXApO1xuXHR9LFxuXHQvLyBJbnRyb2R1Y2VkIGluIERPTSBMZXZlbCAyOlxuXHRnZXRFbGVtZW50QnlJZCA6XHRmdW5jdGlvbihpZCl7XG5cdFx0dmFyIHJ0diA9IG51bGw7XG5cdFx0X3Zpc2l0Tm9kZSh0aGlzLmRvY3VtZW50RWxlbWVudCxmdW5jdGlvbihub2RlKXtcblx0XHRcdGlmKG5vZGUubm9kZVR5cGUgPT0gRUxFTUVOVF9OT0RFKXtcblx0XHRcdFx0aWYobm9kZS5nZXRBdHRyaWJ1dGUoJ2lkJykgPT0gaWQpe1xuXHRcdFx0XHRcdHJ0diA9IG5vZGU7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KVxuXHRcdHJldHVybiBydHY7XG5cdH0sXG5cblx0LyoqXG5cdCAqIFRoZSBgZ2V0RWxlbWVudHNCeUNsYXNzTmFtZWAgbWV0aG9kIG9mIGBEb2N1bWVudGAgaW50ZXJmYWNlIHJldHVybnMgYW4gYXJyYXktbGlrZSBvYmplY3Rcblx0ICogb2YgYWxsIGNoaWxkIGVsZW1lbnRzIHdoaWNoIGhhdmUgKiphbGwqKiBvZiB0aGUgZ2l2ZW4gY2xhc3MgbmFtZShzKS5cblx0ICpcblx0ICogUmV0dXJucyBhbiBlbXB0eSBsaXN0IGlmIGBjbGFzc2VOYW1lc2AgaXMgYW4gZW1wdHkgc3RyaW5nIG9yIG9ubHkgY29udGFpbnMgSFRNTCB3aGl0ZSBzcGFjZSBjaGFyYWN0ZXJzLlxuXHQgKlxuXHQgKlxuXHQgKiBXYXJuaW5nOiBUaGlzIGlzIGEgbGl2ZSBMaXZlTm9kZUxpc3QuXG5cdCAqIENoYW5nZXMgaW4gdGhlIERPTSB3aWxsIHJlZmxlY3QgaW4gdGhlIGFycmF5IGFzIHRoZSBjaGFuZ2VzIG9jY3VyLlxuXHQgKiBJZiBhbiBlbGVtZW50IHNlbGVjdGVkIGJ5IHRoaXMgYXJyYXkgbm8gbG9uZ2VyIHF1YWxpZmllcyBmb3IgdGhlIHNlbGVjdG9yLFxuXHQgKiBpdCB3aWxsIGF1dG9tYXRpY2FsbHkgYmUgcmVtb3ZlZC4gQmUgYXdhcmUgb2YgdGhpcyBmb3IgaXRlcmF0aW9uIHB1cnBvc2VzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NOYW1lcyBpcyBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIGNsYXNzIG5hbWUocykgdG8gbWF0Y2g7IG11bHRpcGxlIGNsYXNzIG5hbWVzIGFyZSBzZXBhcmF0ZWQgYnkgKEFTQ0lJLSl3aGl0ZXNwYWNlXG5cdCAqXG5cdCAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0RvY3VtZW50L2dldEVsZW1lbnRzQnlDbGFzc05hbWVcblx0ICogQHNlZSBodHRwczovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI2NvbmNlcHQtZ2V0ZWxlbWVudHNieWNsYXNzbmFtZVxuXHQgKi9cblx0Z2V0RWxlbWVudHNCeUNsYXNzTmFtZTogZnVuY3Rpb24oY2xhc3NOYW1lcykge1xuXHRcdHZhciBjbGFzc05hbWVzU2V0ID0gdG9PcmRlcmVkU2V0KGNsYXNzTmFtZXMpXG5cdFx0cmV0dXJuIG5ldyBMaXZlTm9kZUxpc3QodGhpcywgZnVuY3Rpb24oYmFzZSkge1xuXHRcdFx0dmFyIGxzID0gW107XG5cdFx0XHRpZiAoY2xhc3NOYW1lc1NldC5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdF92aXNpdE5vZGUoYmFzZS5kb2N1bWVudEVsZW1lbnQsIGZ1bmN0aW9uKG5vZGUpIHtcblx0XHRcdFx0XHRpZihub2RlICE9PSBiYXNlICYmIG5vZGUubm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERSkge1xuXHRcdFx0XHRcdFx0dmFyIG5vZGVDbGFzc05hbWVzID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJylcblx0XHRcdFx0XHRcdC8vIGNhbiBiZSBudWxsIGlmIHRoZSBhdHRyaWJ1dGUgZG9lcyBub3QgZXhpc3Rcblx0XHRcdFx0XHRcdGlmIChub2RlQ2xhc3NOYW1lcykge1xuXHRcdFx0XHRcdFx0XHQvLyBiZWZvcmUgc3BsaXR0aW5nIGFuZCBpdGVyYXRpbmcganVzdCBjb21wYXJlIHRoZW0gZm9yIHRoZSBtb3N0IGNvbW1vbiBjYXNlXG5cdFx0XHRcdFx0XHRcdHZhciBtYXRjaGVzID0gY2xhc3NOYW1lcyA9PT0gbm9kZUNsYXNzTmFtZXM7XG5cdFx0XHRcdFx0XHRcdGlmICghbWF0Y2hlcykge1xuXHRcdFx0XHRcdFx0XHRcdHZhciBub2RlQ2xhc3NOYW1lc1NldCA9IHRvT3JkZXJlZFNldChub2RlQ2xhc3NOYW1lcylcblx0XHRcdFx0XHRcdFx0XHRtYXRjaGVzID0gY2xhc3NOYW1lc1NldC5ldmVyeShhcnJheUluY2x1ZGVzKG5vZGVDbGFzc05hbWVzU2V0KSlcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRpZihtYXRjaGVzKSB7XG5cdFx0XHRcdFx0XHRcdFx0bHMucHVzaChub2RlKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbHM7XG5cdFx0fSk7XG5cdH0sXG5cblx0Ly9kb2N1bWVudCBmYWN0b3J5IG1ldGhvZDpcblx0Y3JlYXRlRWxlbWVudCA6XHRmdW5jdGlvbih0YWdOYW1lKXtcblx0XHR2YXIgbm9kZSA9IG5ldyBFbGVtZW50KCk7XG5cdFx0bm9kZS5vd25lckRvY3VtZW50ID0gdGhpcztcblx0XHRub2RlLm5vZGVOYW1lID0gdGFnTmFtZTtcblx0XHRub2RlLnRhZ05hbWUgPSB0YWdOYW1lO1xuXHRcdG5vZGUubG9jYWxOYW1lID0gdGFnTmFtZTtcblx0XHRub2RlLmNoaWxkTm9kZXMgPSBuZXcgTm9kZUxpc3QoKTtcblx0XHR2YXIgYXR0cnNcdD0gbm9kZS5hdHRyaWJ1dGVzID0gbmV3IE5hbWVkTm9kZU1hcCgpO1xuXHRcdGF0dHJzLl9vd25lckVsZW1lbnQgPSBub2RlO1xuXHRcdHJldHVybiBub2RlO1xuXHR9LFxuXHRjcmVhdGVEb2N1bWVudEZyYWdtZW50IDpcdGZ1bmN0aW9uKCl7XG5cdFx0dmFyIG5vZGUgPSBuZXcgRG9jdW1lbnRGcmFnbWVudCgpO1xuXHRcdG5vZGUub3duZXJEb2N1bWVudCA9IHRoaXM7XG5cdFx0bm9kZS5jaGlsZE5vZGVzID0gbmV3IE5vZGVMaXN0KCk7XG5cdFx0cmV0dXJuIG5vZGU7XG5cdH0sXG5cdGNyZWF0ZVRleHROb2RlIDpcdGZ1bmN0aW9uKGRhdGEpe1xuXHRcdHZhciBub2RlID0gbmV3IFRleHQoKTtcblx0XHRub2RlLm93bmVyRG9jdW1lbnQgPSB0aGlzO1xuXHRcdG5vZGUuYXBwZW5kRGF0YShkYXRhKVxuXHRcdHJldHVybiBub2RlO1xuXHR9LFxuXHRjcmVhdGVDb21tZW50IDpcdGZ1bmN0aW9uKGRhdGEpe1xuXHRcdHZhciBub2RlID0gbmV3IENvbW1lbnQoKTtcblx0XHRub2RlLm93bmVyRG9jdW1lbnQgPSB0aGlzO1xuXHRcdG5vZGUuYXBwZW5kRGF0YShkYXRhKVxuXHRcdHJldHVybiBub2RlO1xuXHR9LFxuXHRjcmVhdGVDREFUQVNlY3Rpb24gOlx0ZnVuY3Rpb24oZGF0YSl7XG5cdFx0dmFyIG5vZGUgPSBuZXcgQ0RBVEFTZWN0aW9uKCk7XG5cdFx0bm9kZS5vd25lckRvY3VtZW50ID0gdGhpcztcblx0XHRub2RlLmFwcGVuZERhdGEoZGF0YSlcblx0XHRyZXR1cm4gbm9kZTtcblx0fSxcblx0Y3JlYXRlUHJvY2Vzc2luZ0luc3RydWN0aW9uIDpcdGZ1bmN0aW9uKHRhcmdldCxkYXRhKXtcblx0XHR2YXIgbm9kZSA9IG5ldyBQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24oKTtcblx0XHRub2RlLm93bmVyRG9jdW1lbnQgPSB0aGlzO1xuXHRcdG5vZGUudGFnTmFtZSA9IG5vZGUubm9kZU5hbWUgPSBub2RlLnRhcmdldCA9IHRhcmdldDtcblx0XHRub2RlLm5vZGVWYWx1ZSA9IG5vZGUuZGF0YSA9IGRhdGE7XG5cdFx0cmV0dXJuIG5vZGU7XG5cdH0sXG5cdGNyZWF0ZUF0dHJpYnV0ZSA6XHRmdW5jdGlvbihuYW1lKXtcblx0XHR2YXIgbm9kZSA9IG5ldyBBdHRyKCk7XG5cdFx0bm9kZS5vd25lckRvY3VtZW50XHQ9IHRoaXM7XG5cdFx0bm9kZS5uYW1lID0gbmFtZTtcblx0XHRub2RlLm5vZGVOYW1lXHQ9IG5hbWU7XG5cdFx0bm9kZS5sb2NhbE5hbWUgPSBuYW1lO1xuXHRcdG5vZGUuc3BlY2lmaWVkID0gdHJ1ZTtcblx0XHRyZXR1cm4gbm9kZTtcblx0fSxcblx0Y3JlYXRlRW50aXR5UmVmZXJlbmNlIDpcdGZ1bmN0aW9uKG5hbWUpe1xuXHRcdHZhciBub2RlID0gbmV3IEVudGl0eVJlZmVyZW5jZSgpO1xuXHRcdG5vZGUub3duZXJEb2N1bWVudFx0PSB0aGlzO1xuXHRcdG5vZGUubm9kZU5hbWVcdD0gbmFtZTtcblx0XHRyZXR1cm4gbm9kZTtcblx0fSxcblx0Ly8gSW50cm9kdWNlZCBpbiBET00gTGV2ZWwgMjpcblx0Y3JlYXRlRWxlbWVudE5TIDpcdGZ1bmN0aW9uKG5hbWVzcGFjZVVSSSxxdWFsaWZpZWROYW1lKXtcblx0XHR2YXIgbm9kZSA9IG5ldyBFbGVtZW50KCk7XG5cdFx0dmFyIHBsID0gcXVhbGlmaWVkTmFtZS5zcGxpdCgnOicpO1xuXHRcdHZhciBhdHRyc1x0PSBub2RlLmF0dHJpYnV0ZXMgPSBuZXcgTmFtZWROb2RlTWFwKCk7XG5cdFx0bm9kZS5jaGlsZE5vZGVzID0gbmV3IE5vZGVMaXN0KCk7XG5cdFx0bm9kZS5vd25lckRvY3VtZW50ID0gdGhpcztcblx0XHRub2RlLm5vZGVOYW1lID0gcXVhbGlmaWVkTmFtZTtcblx0XHRub2RlLnRhZ05hbWUgPSBxdWFsaWZpZWROYW1lO1xuXHRcdG5vZGUubmFtZXNwYWNlVVJJID0gbmFtZXNwYWNlVVJJO1xuXHRcdGlmKHBsLmxlbmd0aCA9PSAyKXtcblx0XHRcdG5vZGUucHJlZml4ID0gcGxbMF07XG5cdFx0XHRub2RlLmxvY2FsTmFtZSA9IHBsWzFdO1xuXHRcdH1lbHNle1xuXHRcdFx0Ly9lbC5wcmVmaXggPSBudWxsO1xuXHRcdFx0bm9kZS5sb2NhbE5hbWUgPSBxdWFsaWZpZWROYW1lO1xuXHRcdH1cblx0XHRhdHRycy5fb3duZXJFbGVtZW50ID0gbm9kZTtcblx0XHRyZXR1cm4gbm9kZTtcblx0fSxcblx0Ly8gSW50cm9kdWNlZCBpbiBET00gTGV2ZWwgMjpcblx0Y3JlYXRlQXR0cmlidXRlTlMgOlx0ZnVuY3Rpb24obmFtZXNwYWNlVVJJLHF1YWxpZmllZE5hbWUpe1xuXHRcdHZhciBub2RlID0gbmV3IEF0dHIoKTtcblx0XHR2YXIgcGwgPSBxdWFsaWZpZWROYW1lLnNwbGl0KCc6Jyk7XG5cdFx0bm9kZS5vd25lckRvY3VtZW50ID0gdGhpcztcblx0XHRub2RlLm5vZGVOYW1lID0gcXVhbGlmaWVkTmFtZTtcblx0XHRub2RlLm5hbWUgPSBxdWFsaWZpZWROYW1lO1xuXHRcdG5vZGUubmFtZXNwYWNlVVJJID0gbmFtZXNwYWNlVVJJO1xuXHRcdG5vZGUuc3BlY2lmaWVkID0gdHJ1ZTtcblx0XHRpZihwbC5sZW5ndGggPT0gMil7XG5cdFx0XHRub2RlLnByZWZpeCA9IHBsWzBdO1xuXHRcdFx0bm9kZS5sb2NhbE5hbWUgPSBwbFsxXTtcblx0XHR9ZWxzZXtcblx0XHRcdC8vZWwucHJlZml4ID0gbnVsbDtcblx0XHRcdG5vZGUubG9jYWxOYW1lID0gcXVhbGlmaWVkTmFtZTtcblx0XHR9XG5cdFx0cmV0dXJuIG5vZGU7XG5cdH1cbn07XG5fZXh0ZW5kcyhEb2N1bWVudCxOb2RlKTtcblxuXG5mdW5jdGlvbiBFbGVtZW50KCkge1xuXHR0aGlzLl9uc01hcCA9IHt9O1xufTtcbkVsZW1lbnQucHJvdG90eXBlID0ge1xuXHRub2RlVHlwZSA6IEVMRU1FTlRfTk9ERSxcblx0aGFzQXR0cmlidXRlIDogZnVuY3Rpb24obmFtZSl7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlTm9kZShuYW1lKSE9bnVsbDtcblx0fSxcblx0Z2V0QXR0cmlidXRlIDogZnVuY3Rpb24obmFtZSl7XG5cdFx0dmFyIGF0dHIgPSB0aGlzLmdldEF0dHJpYnV0ZU5vZGUobmFtZSk7XG5cdFx0cmV0dXJuIGF0dHIgJiYgYXR0ci52YWx1ZSB8fCAnJztcblx0fSxcblx0Z2V0QXR0cmlidXRlTm9kZSA6IGZ1bmN0aW9uKG5hbWUpe1xuXHRcdHJldHVybiB0aGlzLmF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKG5hbWUpO1xuXHR9LFxuXHRzZXRBdHRyaWJ1dGUgOiBmdW5jdGlvbihuYW1lLCB2YWx1ZSl7XG5cdFx0dmFyIGF0dHIgPSB0aGlzLm93bmVyRG9jdW1lbnQuY3JlYXRlQXR0cmlidXRlKG5hbWUpO1xuXHRcdGF0dHIudmFsdWUgPSBhdHRyLm5vZGVWYWx1ZSA9IFwiXCIgKyB2YWx1ZTtcblx0XHR0aGlzLnNldEF0dHJpYnV0ZU5vZGUoYXR0cilcblx0fSxcblx0cmVtb3ZlQXR0cmlidXRlIDogZnVuY3Rpb24obmFtZSl7XG5cdFx0dmFyIGF0dHIgPSB0aGlzLmdldEF0dHJpYnV0ZU5vZGUobmFtZSlcblx0XHRhdHRyICYmIHRoaXMucmVtb3ZlQXR0cmlidXRlTm9kZShhdHRyKTtcblx0fSxcblxuXHQvL2ZvdXIgcmVhbCBvcGVhcnRpb24gbWV0aG9kXG5cdGFwcGVuZENoaWxkOmZ1bmN0aW9uKG5ld0NoaWxkKXtcblx0XHRpZihuZXdDaGlsZC5ub2RlVHlwZSA9PT0gRE9DVU1FTlRfRlJBR01FTlRfTk9ERSl7XG5cdFx0XHRyZXR1cm4gdGhpcy5pbnNlcnRCZWZvcmUobmV3Q2hpbGQsbnVsbCk7XG5cdFx0fWVsc2V7XG5cdFx0XHRyZXR1cm4gX2FwcGVuZFNpbmdsZUNoaWxkKHRoaXMsbmV3Q2hpbGQpO1xuXHRcdH1cblx0fSxcblx0c2V0QXR0cmlidXRlTm9kZSA6IGZ1bmN0aW9uKG5ld0F0dHIpe1xuXHRcdHJldHVybiB0aGlzLmF0dHJpYnV0ZXMuc2V0TmFtZWRJdGVtKG5ld0F0dHIpO1xuXHR9LFxuXHRzZXRBdHRyaWJ1dGVOb2RlTlMgOiBmdW5jdGlvbihuZXdBdHRyKXtcblx0XHRyZXR1cm4gdGhpcy5hdHRyaWJ1dGVzLnNldE5hbWVkSXRlbU5TKG5ld0F0dHIpO1xuXHR9LFxuXHRyZW1vdmVBdHRyaWJ1dGVOb2RlIDogZnVuY3Rpb24ob2xkQXR0cil7XG5cdFx0Ly9jb25zb2xlLmxvZyh0aGlzID09IG9sZEF0dHIub3duZXJFbGVtZW50KVxuXHRcdHJldHVybiB0aGlzLmF0dHJpYnV0ZXMucmVtb3ZlTmFtZWRJdGVtKG9sZEF0dHIubm9kZU5hbWUpO1xuXHR9LFxuXHQvL2dldCByZWFsIGF0dHJpYnV0ZSBuYW1lLGFuZCByZW1vdmUgaXQgYnkgcmVtb3ZlQXR0cmlidXRlTm9kZVxuXHRyZW1vdmVBdHRyaWJ1dGVOUyA6IGZ1bmN0aW9uKG5hbWVzcGFjZVVSSSwgbG9jYWxOYW1lKXtcblx0XHR2YXIgb2xkID0gdGhpcy5nZXRBdHRyaWJ1dGVOb2RlTlMobmFtZXNwYWNlVVJJLCBsb2NhbE5hbWUpO1xuXHRcdG9sZCAmJiB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5vZGUob2xkKTtcblx0fSxcblxuXHRoYXNBdHRyaWJ1dGVOUyA6IGZ1bmN0aW9uKG5hbWVzcGFjZVVSSSwgbG9jYWxOYW1lKXtcblx0XHRyZXR1cm4gdGhpcy5nZXRBdHRyaWJ1dGVOb2RlTlMobmFtZXNwYWNlVVJJLCBsb2NhbE5hbWUpIT1udWxsO1xuXHR9LFxuXHRnZXRBdHRyaWJ1dGVOUyA6IGZ1bmN0aW9uKG5hbWVzcGFjZVVSSSwgbG9jYWxOYW1lKXtcblx0XHR2YXIgYXR0ciA9IHRoaXMuZ2V0QXR0cmlidXRlTm9kZU5TKG5hbWVzcGFjZVVSSSwgbG9jYWxOYW1lKTtcblx0XHRyZXR1cm4gYXR0ciAmJiBhdHRyLnZhbHVlIHx8ICcnO1xuXHR9LFxuXHRzZXRBdHRyaWJ1dGVOUyA6IGZ1bmN0aW9uKG5hbWVzcGFjZVVSSSwgcXVhbGlmaWVkTmFtZSwgdmFsdWUpe1xuXHRcdHZhciBhdHRyID0gdGhpcy5vd25lckRvY3VtZW50LmNyZWF0ZUF0dHJpYnV0ZU5TKG5hbWVzcGFjZVVSSSwgcXVhbGlmaWVkTmFtZSk7XG5cdFx0YXR0ci52YWx1ZSA9IGF0dHIubm9kZVZhbHVlID0gXCJcIiArIHZhbHVlO1xuXHRcdHRoaXMuc2V0QXR0cmlidXRlTm9kZShhdHRyKVxuXHR9LFxuXHRnZXRBdHRyaWJ1dGVOb2RlTlMgOiBmdW5jdGlvbihuYW1lc3BhY2VVUkksIGxvY2FsTmFtZSl7XG5cdFx0cmV0dXJuIHRoaXMuYXR0cmlidXRlcy5nZXROYW1lZEl0ZW1OUyhuYW1lc3BhY2VVUkksIGxvY2FsTmFtZSk7XG5cdH0sXG5cblx0Z2V0RWxlbWVudHNCeVRhZ05hbWUgOiBmdW5jdGlvbih0YWdOYW1lKXtcblx0XHRyZXR1cm4gbmV3IExpdmVOb2RlTGlzdCh0aGlzLGZ1bmN0aW9uKGJhc2Upe1xuXHRcdFx0dmFyIGxzID0gW107XG5cdFx0XHRfdmlzaXROb2RlKGJhc2UsZnVuY3Rpb24obm9kZSl7XG5cdFx0XHRcdGlmKG5vZGUgIT09IGJhc2UgJiYgbm9kZS5ub2RlVHlwZSA9PSBFTEVNRU5UX05PREUgJiYgKHRhZ05hbWUgPT09ICcqJyB8fCBub2RlLnRhZ05hbWUgPT0gdGFnTmFtZSkpe1xuXHRcdFx0XHRcdGxzLnB1c2gobm9kZSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuIGxzO1xuXHRcdH0pO1xuXHR9LFxuXHRnZXRFbGVtZW50c0J5VGFnTmFtZU5TIDogZnVuY3Rpb24obmFtZXNwYWNlVVJJLCBsb2NhbE5hbWUpe1xuXHRcdHJldHVybiBuZXcgTGl2ZU5vZGVMaXN0KHRoaXMsZnVuY3Rpb24oYmFzZSl7XG5cdFx0XHR2YXIgbHMgPSBbXTtcblx0XHRcdF92aXNpdE5vZGUoYmFzZSxmdW5jdGlvbihub2RlKXtcblx0XHRcdFx0aWYobm9kZSAhPT0gYmFzZSAmJiBub2RlLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREUgJiYgKG5hbWVzcGFjZVVSSSA9PT0gJyonIHx8IG5vZGUubmFtZXNwYWNlVVJJID09PSBuYW1lc3BhY2VVUkkpICYmIChsb2NhbE5hbWUgPT09ICcqJyB8fCBub2RlLmxvY2FsTmFtZSA9PSBsb2NhbE5hbWUpKXtcblx0XHRcdFx0XHRscy5wdXNoKG5vZGUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdHJldHVybiBscztcblxuXHRcdH0pO1xuXHR9XG59O1xuRG9jdW1lbnQucHJvdG90eXBlLmdldEVsZW1lbnRzQnlUYWdOYW1lID0gRWxlbWVudC5wcm90b3R5cGUuZ2V0RWxlbWVudHNCeVRhZ05hbWU7XG5Eb2N1bWVudC5wcm90b3R5cGUuZ2V0RWxlbWVudHNCeVRhZ05hbWVOUyA9IEVsZW1lbnQucHJvdG90eXBlLmdldEVsZW1lbnRzQnlUYWdOYW1lTlM7XG5cblxuX2V4dGVuZHMoRWxlbWVudCxOb2RlKTtcbmZ1bmN0aW9uIEF0dHIoKSB7XG59O1xuQXR0ci5wcm90b3R5cGUubm9kZVR5cGUgPSBBVFRSSUJVVEVfTk9ERTtcbl9leHRlbmRzKEF0dHIsTm9kZSk7XG5cblxuZnVuY3Rpb24gQ2hhcmFjdGVyRGF0YSgpIHtcbn07XG5DaGFyYWN0ZXJEYXRhLnByb3RvdHlwZSA9IHtcblx0ZGF0YSA6ICcnLFxuXHRzdWJzdHJpbmdEYXRhIDogZnVuY3Rpb24ob2Zmc2V0LCBjb3VudCkge1xuXHRcdHJldHVybiB0aGlzLmRhdGEuc3Vic3RyaW5nKG9mZnNldCwgb2Zmc2V0K2NvdW50KTtcblx0fSxcblx0YXBwZW5kRGF0YTogZnVuY3Rpb24odGV4dCkge1xuXHRcdHRleHQgPSB0aGlzLmRhdGErdGV4dDtcblx0XHR0aGlzLm5vZGVWYWx1ZSA9IHRoaXMuZGF0YSA9IHRleHQ7XG5cdFx0dGhpcy5sZW5ndGggPSB0ZXh0Lmxlbmd0aDtcblx0fSxcblx0aW5zZXJ0RGF0YTogZnVuY3Rpb24ob2Zmc2V0LHRleHQpIHtcblx0XHR0aGlzLnJlcGxhY2VEYXRhKG9mZnNldCwwLHRleHQpO1xuXG5cdH0sXG5cdGFwcGVuZENoaWxkOmZ1bmN0aW9uKG5ld0NoaWxkKXtcblx0XHR0aHJvdyBuZXcgRXJyb3IoRXhjZXB0aW9uTWVzc2FnZVtISUVSQVJDSFlfUkVRVUVTVF9FUlJdKVxuXHR9LFxuXHRkZWxldGVEYXRhOiBmdW5jdGlvbihvZmZzZXQsIGNvdW50KSB7XG5cdFx0dGhpcy5yZXBsYWNlRGF0YShvZmZzZXQsY291bnQsXCJcIik7XG5cdH0sXG5cdHJlcGxhY2VEYXRhOiBmdW5jdGlvbihvZmZzZXQsIGNvdW50LCB0ZXh0KSB7XG5cdFx0dmFyIHN0YXJ0ID0gdGhpcy5kYXRhLnN1YnN0cmluZygwLG9mZnNldCk7XG5cdFx0dmFyIGVuZCA9IHRoaXMuZGF0YS5zdWJzdHJpbmcob2Zmc2V0K2NvdW50KTtcblx0XHR0ZXh0ID0gc3RhcnQgKyB0ZXh0ICsgZW5kO1xuXHRcdHRoaXMubm9kZVZhbHVlID0gdGhpcy5kYXRhID0gdGV4dDtcblx0XHR0aGlzLmxlbmd0aCA9IHRleHQubGVuZ3RoO1xuXHR9XG59XG5fZXh0ZW5kcyhDaGFyYWN0ZXJEYXRhLE5vZGUpO1xuZnVuY3Rpb24gVGV4dCgpIHtcbn07XG5UZXh0LnByb3RvdHlwZSA9IHtcblx0bm9kZU5hbWUgOiBcIiN0ZXh0XCIsXG5cdG5vZGVUeXBlIDogVEVYVF9OT0RFLFxuXHRzcGxpdFRleHQgOiBmdW5jdGlvbihvZmZzZXQpIHtcblx0XHR2YXIgdGV4dCA9IHRoaXMuZGF0YTtcblx0XHR2YXIgbmV3VGV4dCA9IHRleHQuc3Vic3RyaW5nKG9mZnNldCk7XG5cdFx0dGV4dCA9IHRleHQuc3Vic3RyaW5nKDAsIG9mZnNldCk7XG5cdFx0dGhpcy5kYXRhID0gdGhpcy5ub2RlVmFsdWUgPSB0ZXh0O1xuXHRcdHRoaXMubGVuZ3RoID0gdGV4dC5sZW5ndGg7XG5cdFx0dmFyIG5ld05vZGUgPSB0aGlzLm93bmVyRG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUobmV3VGV4dCk7XG5cdFx0aWYodGhpcy5wYXJlbnROb2RlKXtcblx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobmV3Tm9kZSwgdGhpcy5uZXh0U2libGluZyk7XG5cdFx0fVxuXHRcdHJldHVybiBuZXdOb2RlO1xuXHR9XG59XG5fZXh0ZW5kcyhUZXh0LENoYXJhY3RlckRhdGEpO1xuZnVuY3Rpb24gQ29tbWVudCgpIHtcbn07XG5Db21tZW50LnByb3RvdHlwZSA9IHtcblx0bm9kZU5hbWUgOiBcIiNjb21tZW50XCIsXG5cdG5vZGVUeXBlIDogQ09NTUVOVF9OT0RFXG59XG5fZXh0ZW5kcyhDb21tZW50LENoYXJhY3RlckRhdGEpO1xuXG5mdW5jdGlvbiBDREFUQVNlY3Rpb24oKSB7XG59O1xuQ0RBVEFTZWN0aW9uLnByb3RvdHlwZSA9IHtcblx0bm9kZU5hbWUgOiBcIiNjZGF0YS1zZWN0aW9uXCIsXG5cdG5vZGVUeXBlIDogQ0RBVEFfU0VDVElPTl9OT0RFXG59XG5fZXh0ZW5kcyhDREFUQVNlY3Rpb24sQ2hhcmFjdGVyRGF0YSk7XG5cblxuZnVuY3Rpb24gRG9jdW1lbnRUeXBlKCkge1xufTtcbkRvY3VtZW50VHlwZS5wcm90b3R5cGUubm9kZVR5cGUgPSBET0NVTUVOVF9UWVBFX05PREU7XG5fZXh0ZW5kcyhEb2N1bWVudFR5cGUsTm9kZSk7XG5cbmZ1bmN0aW9uIE5vdGF0aW9uKCkge1xufTtcbk5vdGF0aW9uLnByb3RvdHlwZS5ub2RlVHlwZSA9IE5PVEFUSU9OX05PREU7XG5fZXh0ZW5kcyhOb3RhdGlvbixOb2RlKTtcblxuZnVuY3Rpb24gRW50aXR5KCkge1xufTtcbkVudGl0eS5wcm90b3R5cGUubm9kZVR5cGUgPSBFTlRJVFlfTk9ERTtcbl9leHRlbmRzKEVudGl0eSxOb2RlKTtcblxuZnVuY3Rpb24gRW50aXR5UmVmZXJlbmNlKCkge1xufTtcbkVudGl0eVJlZmVyZW5jZS5wcm90b3R5cGUubm9kZVR5cGUgPSBFTlRJVFlfUkVGRVJFTkNFX05PREU7XG5fZXh0ZW5kcyhFbnRpdHlSZWZlcmVuY2UsTm9kZSk7XG5cbmZ1bmN0aW9uIERvY3VtZW50RnJhZ21lbnQoKSB7XG59O1xuRG9jdW1lbnRGcmFnbWVudC5wcm90b3R5cGUubm9kZU5hbWUgPVx0XCIjZG9jdW1lbnQtZnJhZ21lbnRcIjtcbkRvY3VtZW50RnJhZ21lbnQucHJvdG90eXBlLm5vZGVUeXBlID1cdERPQ1VNRU5UX0ZSQUdNRU5UX05PREU7XG5fZXh0ZW5kcyhEb2N1bWVudEZyYWdtZW50LE5vZGUpO1xuXG5cbmZ1bmN0aW9uIFByb2Nlc3NpbmdJbnN0cnVjdGlvbigpIHtcbn1cblByb2Nlc3NpbmdJbnN0cnVjdGlvbi5wcm90b3R5cGUubm9kZVR5cGUgPSBQUk9DRVNTSU5HX0lOU1RSVUNUSU9OX05PREU7XG5fZXh0ZW5kcyhQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24sTm9kZSk7XG5mdW5jdGlvbiBYTUxTZXJpYWxpemVyKCl7fVxuWE1MU2VyaWFsaXplci5wcm90b3R5cGUuc2VyaWFsaXplVG9TdHJpbmcgPSBmdW5jdGlvbihub2RlLGlzSHRtbCxub2RlRmlsdGVyKXtcblx0cmV0dXJuIG5vZGVTZXJpYWxpemVUb1N0cmluZy5jYWxsKG5vZGUsaXNIdG1sLG5vZGVGaWx0ZXIpO1xufVxuTm9kZS5wcm90b3R5cGUudG9TdHJpbmcgPSBub2RlU2VyaWFsaXplVG9TdHJpbmc7XG5mdW5jdGlvbiBub2RlU2VyaWFsaXplVG9TdHJpbmcoaXNIdG1sLG5vZGVGaWx0ZXIpe1xuXHR2YXIgYnVmID0gW107XG5cdHZhciByZWZOb2RlID0gdGhpcy5ub2RlVHlwZSA9PSA5ICYmIHRoaXMuZG9jdW1lbnRFbGVtZW50IHx8IHRoaXM7XG5cdHZhciBwcmVmaXggPSByZWZOb2RlLnByZWZpeDtcblx0dmFyIHVyaSA9IHJlZk5vZGUubmFtZXNwYWNlVVJJO1xuXG5cdGlmKHVyaSAmJiBwcmVmaXggPT0gbnVsbCl7XG5cdFx0Ly9jb25zb2xlLmxvZyhwcmVmaXgpXG5cdFx0dmFyIHByZWZpeCA9IHJlZk5vZGUubG9va3VwUHJlZml4KHVyaSk7XG5cdFx0aWYocHJlZml4ID09IG51bGwpe1xuXHRcdFx0Ly9pc0hUTUwgPSB0cnVlO1xuXHRcdFx0dmFyIHZpc2libGVOYW1lc3BhY2VzPVtcblx0XHRcdHtuYW1lc3BhY2U6dXJpLHByZWZpeDpudWxsfVxuXHRcdFx0Ly97bmFtZXNwYWNlOnVyaSxwcmVmaXg6Jyd9XG5cdFx0XHRdXG5cdFx0fVxuXHR9XG5cdHNlcmlhbGl6ZVRvU3RyaW5nKHRoaXMsYnVmLGlzSHRtbCxub2RlRmlsdGVyLHZpc2libGVOYW1lc3BhY2VzKTtcblx0Ly9jb25zb2xlLmxvZygnIyMjJyx0aGlzLm5vZGVUeXBlLHVyaSxwcmVmaXgsYnVmLmpvaW4oJycpKVxuXHRyZXR1cm4gYnVmLmpvaW4oJycpO1xufVxuXG5mdW5jdGlvbiBuZWVkTmFtZXNwYWNlRGVmaW5lKG5vZGUsIGlzSFRNTCwgdmlzaWJsZU5hbWVzcGFjZXMpIHtcblx0dmFyIHByZWZpeCA9IG5vZGUucHJlZml4IHx8ICcnO1xuXHR2YXIgdXJpID0gbm9kZS5uYW1lc3BhY2VVUkk7XG5cdC8vIEFjY29yZGluZyB0byBbTmFtZXNwYWNlcyBpbiBYTUwgMS4wXShodHRwczovL3d3dy53My5vcmcvVFIvUkVDLXhtbC1uYW1lcy8jbnMtdXNpbmcpICxcblx0Ly8gYW5kIG1vcmUgc3BlY2lmaWNhbGx5IGh0dHBzOi8vd3d3LnczLm9yZy9UUi9SRUMteG1sLW5hbWVzLyNuc2MtTm9QcmVmaXhVbmRlY2wgOlxuXHQvLyA+IEluIGEgbmFtZXNwYWNlIGRlY2xhcmF0aW9uIGZvciBhIHByZWZpeCBbLi4uXSwgdGhlIGF0dHJpYnV0ZSB2YWx1ZSBNVVNUIE5PVCBiZSBlbXB0eS5cblx0Ly8gaW4gYSBzaW1pbGFyIG1hbm5lciBbTmFtZXNwYWNlcyBpbiBYTUwgMS4xXShodHRwczovL3d3dy53My5vcmcvVFIveG1sLW5hbWVzMTEvI25zLXVzaW5nKVxuXHQvLyBhbmQgbW9yZSBzcGVjaWZpY2FsbHkgaHR0cHM6Ly93d3cudzMub3JnL1RSL3htbC1uYW1lczExLyNuc2MtTlNEZWNsYXJlZCA6XG5cdC8vID4gWy4uLl0gRnVydGhlcm1vcmUsIHRoZSBhdHRyaWJ1dGUgdmFsdWUgWy4uLl0gbXVzdCBub3QgYmUgYW4gZW1wdHkgc3RyaW5nLlxuXHQvLyBzbyBzZXJpYWxpemluZyBlbXB0eSBuYW1lc3BhY2UgdmFsdWUgbGlrZSB4bWxuczpkcz1cIlwiIHdvdWxkIHByb2R1Y2UgYW4gaW52YWxpZCBYTUwgZG9jdW1lbnQuXG5cdGlmICghdXJpKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdGlmIChwcmVmaXggPT09IFwieG1sXCIgJiYgdXJpID09PSBOQU1FU1BBQ0UuWE1MIHx8IHVyaSA9PT0gTkFNRVNQQUNFLlhNTE5TKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0dmFyIGkgPSB2aXNpYmxlTmFtZXNwYWNlcy5sZW5ndGhcblx0d2hpbGUgKGktLSkge1xuXHRcdHZhciBucyA9IHZpc2libGVOYW1lc3BhY2VzW2ldO1xuXHRcdC8vIGdldCBuYW1lc3BhY2UgcHJlZml4XG5cdFx0aWYgKG5zLnByZWZpeCA9PT0gcHJlZml4KSB7XG5cdFx0XHRyZXR1cm4gbnMubmFtZXNwYWNlICE9PSB1cmk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiB0cnVlO1xufVxuLyoqXG4gKiBXZWxsLWZvcm1lZCBjb25zdHJhaW50OiBObyA8IGluIEF0dHJpYnV0ZSBWYWx1ZXNcbiAqID4gVGhlIHJlcGxhY2VtZW50IHRleHQgb2YgYW55IGVudGl0eSByZWZlcnJlZCB0byBkaXJlY3RseSBvciBpbmRpcmVjdGx5XG4gKiA+IGluIGFuIGF0dHJpYnV0ZSB2YWx1ZSBtdXN0IG5vdCBjb250YWluIGEgPC5cbiAqIEBzZWUgaHR0cHM6Ly93d3cudzMub3JnL1RSL3htbDExLyNDbGVhbkF0dHJWYWxzXG4gKiBAc2VlIGh0dHBzOi8vd3d3LnczLm9yZy9UUi94bWwxMS8jTlQtQXR0VmFsdWVcbiAqXG4gKiBMaXRlcmFsIHdoaXRlc3BhY2Ugb3RoZXIgdGhhbiBzcGFjZSB0aGF0IGFwcGVhciBpbiBhdHRyaWJ1dGUgdmFsdWVzXG4gKiBhcmUgc2VyaWFsaXplZCBhcyB0aGVpciBlbnRpdHkgcmVmZXJlbmNlcywgc28gdGhleSB3aWxsIGJlIHByZXNlcnZlZC5cbiAqIChJbiBjb250cmFzdCB0byB3aGl0ZXNwYWNlIGxpdGVyYWxzIGluIHRoZSBpbnB1dCB3aGljaCBhcmUgbm9ybWFsaXplZCB0byBzcGFjZXMpXG4gKiBAc2VlIGh0dHBzOi8vd3d3LnczLm9yZy9UUi94bWwxMS8jQVZOb3JtYWxpemVcbiAqIEBzZWUgaHR0cHM6Ly93M2MuZ2l0aHViLmlvL0RPTS1QYXJzaW5nLyNzZXJpYWxpemluZy1hbi1lbGVtZW50LXMtYXR0cmlidXRlc1xuICovXG5mdW5jdGlvbiBhZGRTZXJpYWxpemVkQXR0cmlidXRlKGJ1ZiwgcXVhbGlmaWVkTmFtZSwgdmFsdWUpIHtcblx0YnVmLnB1c2goJyAnLCBxdWFsaWZpZWROYW1lLCAnPVwiJywgdmFsdWUucmVwbGFjZSgvWzw+JlwiXFx0XFxuXFxyXS9nLCBfeG1sRW5jb2RlciksICdcIicpXG59XG5cbmZ1bmN0aW9uIHNlcmlhbGl6ZVRvU3RyaW5nKG5vZGUsYnVmLGlzSFRNTCxub2RlRmlsdGVyLHZpc2libGVOYW1lc3BhY2VzKXtcblx0aWYgKCF2aXNpYmxlTmFtZXNwYWNlcykge1xuXHRcdHZpc2libGVOYW1lc3BhY2VzID0gW107XG5cdH1cblxuXHRpZihub2RlRmlsdGVyKXtcblx0XHRub2RlID0gbm9kZUZpbHRlcihub2RlKTtcblx0XHRpZihub2RlKXtcblx0XHRcdGlmKHR5cGVvZiBub2RlID09ICdzdHJpbmcnKXtcblx0XHRcdFx0YnVmLnB1c2gobm9kZSk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHR9ZWxzZXtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0Ly9idWYuc29ydC5hcHBseShhdHRycywgYXR0cmlidXRlU29ydGVyKTtcblx0fVxuXG5cdHN3aXRjaChub2RlLm5vZGVUeXBlKXtcblx0Y2FzZSBFTEVNRU5UX05PREU6XG5cdFx0dmFyIGF0dHJzID0gbm9kZS5hdHRyaWJ1dGVzO1xuXHRcdHZhciBsZW4gPSBhdHRycy5sZW5ndGg7XG5cdFx0dmFyIGNoaWxkID0gbm9kZS5maXJzdENoaWxkO1xuXHRcdHZhciBub2RlTmFtZSA9IG5vZGUudGFnTmFtZTtcblxuXHRcdGlzSFRNTCA9IE5BTUVTUEFDRS5pc0hUTUwobm9kZS5uYW1lc3BhY2VVUkkpIHx8IGlzSFRNTFxuXG5cdFx0dmFyIHByZWZpeGVkTm9kZU5hbWUgPSBub2RlTmFtZVxuXHRcdGlmICghaXNIVE1MICYmICFub2RlLnByZWZpeCAmJiBub2RlLm5hbWVzcGFjZVVSSSkge1xuXHRcdFx0dmFyIGRlZmF1bHROU1xuXHRcdFx0Ly8gbG9va3VwIGN1cnJlbnQgZGVmYXVsdCBucyBmcm9tIGB4bWxuc2AgYXR0cmlidXRlXG5cdFx0XHRmb3IgKHZhciBhaSA9IDA7IGFpIDwgYXR0cnMubGVuZ3RoOyBhaSsrKSB7XG5cdFx0XHRcdGlmIChhdHRycy5pdGVtKGFpKS5uYW1lID09PSAneG1sbnMnKSB7XG5cdFx0XHRcdFx0ZGVmYXVsdE5TID0gYXR0cnMuaXRlbShhaSkudmFsdWVcblx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoIWRlZmF1bHROUykge1xuXHRcdFx0XHQvLyBsb29rdXAgY3VycmVudCBkZWZhdWx0IG5zIGluIHZpc2libGVOYW1lc3BhY2VzXG5cdFx0XHRcdGZvciAodmFyIG5zaSA9IHZpc2libGVOYW1lc3BhY2VzLmxlbmd0aCAtIDE7IG5zaSA+PSAwOyBuc2ktLSkge1xuXHRcdFx0XHRcdHZhciBuYW1lc3BhY2UgPSB2aXNpYmxlTmFtZXNwYWNlc1tuc2ldXG5cdFx0XHRcdFx0aWYgKG5hbWVzcGFjZS5wcmVmaXggPT09ICcnICYmIG5hbWVzcGFjZS5uYW1lc3BhY2UgPT09IG5vZGUubmFtZXNwYWNlVVJJKSB7XG5cdFx0XHRcdFx0XHRkZWZhdWx0TlMgPSBuYW1lc3BhY2UubmFtZXNwYWNlXG5cdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKGRlZmF1bHROUyAhPT0gbm9kZS5uYW1lc3BhY2VVUkkpIHtcblx0XHRcdFx0Zm9yICh2YXIgbnNpID0gdmlzaWJsZU5hbWVzcGFjZXMubGVuZ3RoIC0gMTsgbnNpID49IDA7IG5zaS0tKSB7XG5cdFx0XHRcdFx0dmFyIG5hbWVzcGFjZSA9IHZpc2libGVOYW1lc3BhY2VzW25zaV1cblx0XHRcdFx0XHRpZiAobmFtZXNwYWNlLm5hbWVzcGFjZSA9PT0gbm9kZS5uYW1lc3BhY2VVUkkpIHtcblx0XHRcdFx0XHRcdGlmIChuYW1lc3BhY2UucHJlZml4KSB7XG5cdFx0XHRcdFx0XHRcdHByZWZpeGVkTm9kZU5hbWUgPSBuYW1lc3BhY2UucHJlZml4ICsgJzonICsgbm9kZU5hbWVcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0YnVmLnB1c2goJzwnLCBwcmVmaXhlZE5vZGVOYW1lKTtcblxuXHRcdGZvcih2YXIgaT0wO2k8bGVuO2krKyl7XG5cdFx0XHQvLyBhZGQgbmFtZXNwYWNlcyBmb3IgYXR0cmlidXRlc1xuXHRcdFx0dmFyIGF0dHIgPSBhdHRycy5pdGVtKGkpO1xuXHRcdFx0aWYgKGF0dHIucHJlZml4ID09ICd4bWxucycpIHtcblx0XHRcdFx0dmlzaWJsZU5hbWVzcGFjZXMucHVzaCh7IHByZWZpeDogYXR0ci5sb2NhbE5hbWUsIG5hbWVzcGFjZTogYXR0ci52YWx1ZSB9KTtcblx0XHRcdH1lbHNlIGlmKGF0dHIubm9kZU5hbWUgPT0gJ3htbG5zJyl7XG5cdFx0XHRcdHZpc2libGVOYW1lc3BhY2VzLnB1c2goeyBwcmVmaXg6ICcnLCBuYW1lc3BhY2U6IGF0dHIudmFsdWUgfSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Zm9yKHZhciBpPTA7aTxsZW47aSsrKXtcblx0XHRcdHZhciBhdHRyID0gYXR0cnMuaXRlbShpKTtcblx0XHRcdGlmIChuZWVkTmFtZXNwYWNlRGVmaW5lKGF0dHIsaXNIVE1MLCB2aXNpYmxlTmFtZXNwYWNlcykpIHtcblx0XHRcdFx0dmFyIHByZWZpeCA9IGF0dHIucHJlZml4fHwnJztcblx0XHRcdFx0dmFyIHVyaSA9IGF0dHIubmFtZXNwYWNlVVJJO1xuXHRcdFx0XHRhZGRTZXJpYWxpemVkQXR0cmlidXRlKGJ1ZiwgcHJlZml4ID8gJ3htbG5zOicgKyBwcmVmaXggOiBcInhtbG5zXCIsIHVyaSk7XG5cdFx0XHRcdHZpc2libGVOYW1lc3BhY2VzLnB1c2goeyBwcmVmaXg6IHByZWZpeCwgbmFtZXNwYWNlOnVyaSB9KTtcblx0XHRcdH1cblx0XHRcdHNlcmlhbGl6ZVRvU3RyaW5nKGF0dHIsYnVmLGlzSFRNTCxub2RlRmlsdGVyLHZpc2libGVOYW1lc3BhY2VzKTtcblx0XHR9XG5cblx0XHQvLyBhZGQgbmFtZXNwYWNlIGZvciBjdXJyZW50IG5vZGVcblx0XHRpZiAobm9kZU5hbWUgPT09IHByZWZpeGVkTm9kZU5hbWUgJiYgbmVlZE5hbWVzcGFjZURlZmluZShub2RlLCBpc0hUTUwsIHZpc2libGVOYW1lc3BhY2VzKSkge1xuXHRcdFx0dmFyIHByZWZpeCA9IG5vZGUucHJlZml4fHwnJztcblx0XHRcdHZhciB1cmkgPSBub2RlLm5hbWVzcGFjZVVSSTtcblx0XHRcdGFkZFNlcmlhbGl6ZWRBdHRyaWJ1dGUoYnVmLCBwcmVmaXggPyAneG1sbnM6JyArIHByZWZpeCA6IFwieG1sbnNcIiwgdXJpKTtcblx0XHRcdHZpc2libGVOYW1lc3BhY2VzLnB1c2goeyBwcmVmaXg6IHByZWZpeCwgbmFtZXNwYWNlOnVyaSB9KTtcblx0XHR9XG5cblx0XHRpZihjaGlsZCB8fCBpc0hUTUwgJiYgIS9eKD86bWV0YXxsaW5rfGltZ3xicnxocnxpbnB1dCkkL2kudGVzdChub2RlTmFtZSkpe1xuXHRcdFx0YnVmLnB1c2goJz4nKTtcblx0XHRcdC8vaWYgaXMgY2RhdGEgY2hpbGQgbm9kZVxuXHRcdFx0aWYoaXNIVE1MICYmIC9ec2NyaXB0JC9pLnRlc3Qobm9kZU5hbWUpKXtcblx0XHRcdFx0d2hpbGUoY2hpbGQpe1xuXHRcdFx0XHRcdGlmKGNoaWxkLmRhdGEpe1xuXHRcdFx0XHRcdFx0YnVmLnB1c2goY2hpbGQuZGF0YSk7XG5cdFx0XHRcdFx0fWVsc2V7XG5cdFx0XHRcdFx0XHRzZXJpYWxpemVUb1N0cmluZyhjaGlsZCwgYnVmLCBpc0hUTUwsIG5vZGVGaWx0ZXIsIHZpc2libGVOYW1lc3BhY2VzLnNsaWNlKCkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjaGlsZCA9IGNoaWxkLm5leHRTaWJsaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9ZWxzZVxuXHRcdFx0e1xuXHRcdFx0XHR3aGlsZShjaGlsZCl7XG5cdFx0XHRcdFx0c2VyaWFsaXplVG9TdHJpbmcoY2hpbGQsIGJ1ZiwgaXNIVE1MLCBub2RlRmlsdGVyLCB2aXNpYmxlTmFtZXNwYWNlcy5zbGljZSgpKTtcblx0XHRcdFx0XHRjaGlsZCA9IGNoaWxkLm5leHRTaWJsaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRidWYucHVzaCgnPC8nLHByZWZpeGVkTm9kZU5hbWUsJz4nKTtcblx0XHR9ZWxzZXtcblx0XHRcdGJ1Zi5wdXNoKCcvPicpO1xuXHRcdH1cblx0XHQvLyByZW1vdmUgYWRkZWQgdmlzaWJsZSBuYW1lc3BhY2VzXG5cdFx0Ly92aXNpYmxlTmFtZXNwYWNlcy5sZW5ndGggPSBzdGFydFZpc2libGVOYW1lc3BhY2VzO1xuXHRcdHJldHVybjtcblx0Y2FzZSBET0NVTUVOVF9OT0RFOlxuXHRjYXNlIERPQ1VNRU5UX0ZSQUdNRU5UX05PREU6XG5cdFx0dmFyIGNoaWxkID0gbm9kZS5maXJzdENoaWxkO1xuXHRcdHdoaWxlKGNoaWxkKXtcblx0XHRcdHNlcmlhbGl6ZVRvU3RyaW5nKGNoaWxkLCBidWYsIGlzSFRNTCwgbm9kZUZpbHRlciwgdmlzaWJsZU5hbWVzcGFjZXMuc2xpY2UoKSk7XG5cdFx0XHRjaGlsZCA9IGNoaWxkLm5leHRTaWJsaW5nO1xuXHRcdH1cblx0XHRyZXR1cm47XG5cdGNhc2UgQVRUUklCVVRFX05PREU6XG5cdFx0cmV0dXJuIGFkZFNlcmlhbGl6ZWRBdHRyaWJ1dGUoYnVmLCBub2RlLm5hbWUsIG5vZGUudmFsdWUpO1xuXHRjYXNlIFRFWFRfTk9ERTpcblx0XHQvKipcblx0XHQgKiBUaGUgYW1wZXJzYW5kIGNoYXJhY3RlciAoJikgYW5kIHRoZSBsZWZ0IGFuZ2xlIGJyYWNrZXQgKDwpIG11c3Qgbm90IGFwcGVhciBpbiB0aGVpciBsaXRlcmFsIGZvcm0sXG5cdFx0ICogZXhjZXB0IHdoZW4gdXNlZCBhcyBtYXJrdXAgZGVsaW1pdGVycywgb3Igd2l0aGluIGEgY29tbWVudCwgYSBwcm9jZXNzaW5nIGluc3RydWN0aW9uLCBvciBhIENEQVRBIHNlY3Rpb24uXG5cdFx0ICogSWYgdGhleSBhcmUgbmVlZGVkIGVsc2V3aGVyZSwgdGhleSBtdXN0IGJlIGVzY2FwZWQgdXNpbmcgZWl0aGVyIG51bWVyaWMgY2hhcmFjdGVyIHJlZmVyZW5jZXMgb3IgdGhlIHN0cmluZ3Ncblx0XHQgKiBgJmFtcDtgIGFuZCBgJmx0O2AgcmVzcGVjdGl2ZWx5LlxuXHRcdCAqIFRoZSByaWdodCBhbmdsZSBicmFja2V0ICg+KSBtYXkgYmUgcmVwcmVzZW50ZWQgdXNpbmcgdGhlIHN0cmluZyBcIiAmZ3Q7IFwiLCBhbmQgbXVzdCwgZm9yIGNvbXBhdGliaWxpdHksXG5cdFx0ICogYmUgZXNjYXBlZCB1c2luZyBlaXRoZXIgYCZndDtgIG9yIGEgY2hhcmFjdGVyIHJlZmVyZW5jZSB3aGVuIGl0IGFwcGVhcnMgaW4gdGhlIHN0cmluZyBgXV0+YCBpbiBjb250ZW50LFxuXHRcdCAqIHdoZW4gdGhhdCBzdHJpbmcgaXMgbm90IG1hcmtpbmcgdGhlIGVuZCBvZiBhIENEQVRBIHNlY3Rpb24uXG5cdFx0ICpcblx0XHQgKiBJbiB0aGUgY29udGVudCBvZiBlbGVtZW50cywgY2hhcmFjdGVyIGRhdGEgaXMgYW55IHN0cmluZyBvZiBjaGFyYWN0ZXJzXG5cdFx0ICogd2hpY2ggZG9lcyBub3QgY29udGFpbiB0aGUgc3RhcnQtZGVsaW1pdGVyIG9mIGFueSBtYXJrdXBcblx0XHQgKiBhbmQgZG9lcyBub3QgaW5jbHVkZSB0aGUgQ0RBVEEtc2VjdGlvbi1jbG9zZSBkZWxpbWl0ZXIsIGBdXT5gLlxuXHRcdCAqXG5cdFx0ICogQHNlZSBodHRwczovL3d3dy53My5vcmcvVFIveG1sLyNOVC1DaGFyRGF0YVxuXHRcdCAqIEBzZWUgaHR0cHM6Ly93M2MuZ2l0aHViLmlvL0RPTS1QYXJzaW5nLyN4bWwtc2VyaWFsaXppbmctYS10ZXh0LW5vZGVcblx0XHQgKi9cblx0XHRyZXR1cm4gYnVmLnB1c2gobm9kZS5kYXRhXG5cdFx0XHQucmVwbGFjZSgvWzwmPl0vZyxfeG1sRW5jb2Rlcilcblx0XHQpO1xuXHRjYXNlIENEQVRBX1NFQ1RJT05fTk9ERTpcblx0XHRyZXR1cm4gYnVmLnB1c2goICc8IVtDREFUQVsnLG5vZGUuZGF0YSwnXV0+Jyk7XG5cdGNhc2UgQ09NTUVOVF9OT0RFOlxuXHRcdHJldHVybiBidWYucHVzaCggXCI8IS0tXCIsbm9kZS5kYXRhLFwiLS0+XCIpO1xuXHRjYXNlIERPQ1VNRU5UX1RZUEVfTk9ERTpcblx0XHR2YXIgcHViaWQgPSBub2RlLnB1YmxpY0lkO1xuXHRcdHZhciBzeXNpZCA9IG5vZGUuc3lzdGVtSWQ7XG5cdFx0YnVmLnB1c2goJzwhRE9DVFlQRSAnLG5vZGUubmFtZSk7XG5cdFx0aWYocHViaWQpe1xuXHRcdFx0YnVmLnB1c2goJyBQVUJMSUMgJywgcHViaWQpO1xuXHRcdFx0aWYgKHN5c2lkICYmIHN5c2lkIT0nLicpIHtcblx0XHRcdFx0YnVmLnB1c2goJyAnLCBzeXNpZCk7XG5cdFx0XHR9XG5cdFx0XHRidWYucHVzaCgnPicpO1xuXHRcdH1lbHNlIGlmKHN5c2lkICYmIHN5c2lkIT0nLicpe1xuXHRcdFx0YnVmLnB1c2goJyBTWVNURU0gJywgc3lzaWQsICc+Jyk7XG5cdFx0fWVsc2V7XG5cdFx0XHR2YXIgc3ViID0gbm9kZS5pbnRlcm5hbFN1YnNldDtcblx0XHRcdGlmKHN1Yil7XG5cdFx0XHRcdGJ1Zi5wdXNoKFwiIFtcIixzdWIsXCJdXCIpO1xuXHRcdFx0fVxuXHRcdFx0YnVmLnB1c2goXCI+XCIpO1xuXHRcdH1cblx0XHRyZXR1cm47XG5cdGNhc2UgUFJPQ0VTU0lOR19JTlNUUlVDVElPTl9OT0RFOlxuXHRcdHJldHVybiBidWYucHVzaCggXCI8P1wiLG5vZGUudGFyZ2V0LFwiIFwiLG5vZGUuZGF0YSxcIj8+XCIpO1xuXHRjYXNlIEVOVElUWV9SRUZFUkVOQ0VfTk9ERTpcblx0XHRyZXR1cm4gYnVmLnB1c2goICcmJyxub2RlLm5vZGVOYW1lLCc7Jyk7XG5cdC8vY2FzZSBFTlRJVFlfTk9ERTpcblx0Ly9jYXNlIE5PVEFUSU9OX05PREU6XG5cdGRlZmF1bHQ6XG5cdFx0YnVmLnB1c2goJz8/Jyxub2RlLm5vZGVOYW1lKTtcblx0fVxufVxuZnVuY3Rpb24gaW1wb3J0Tm9kZShkb2Msbm9kZSxkZWVwKXtcblx0dmFyIG5vZGUyO1xuXHRzd2l0Y2ggKG5vZGUubm9kZVR5cGUpIHtcblx0Y2FzZSBFTEVNRU5UX05PREU6XG5cdFx0bm9kZTIgPSBub2RlLmNsb25lTm9kZShmYWxzZSk7XG5cdFx0bm9kZTIub3duZXJEb2N1bWVudCA9IGRvYztcblx0XHQvL3ZhciBhdHRycyA9IG5vZGUyLmF0dHJpYnV0ZXM7XG5cdFx0Ly92YXIgbGVuID0gYXR0cnMubGVuZ3RoO1xuXHRcdC8vZm9yKHZhciBpPTA7aTxsZW47aSsrKXtcblx0XHRcdC8vbm9kZTIuc2V0QXR0cmlidXRlTm9kZU5TKGltcG9ydE5vZGUoZG9jLGF0dHJzLml0ZW0oaSksZGVlcCkpO1xuXHRcdC8vfVxuXHRjYXNlIERPQ1VNRU5UX0ZSQUdNRU5UX05PREU6XG5cdFx0YnJlYWs7XG5cdGNhc2UgQVRUUklCVVRFX05PREU6XG5cdFx0ZGVlcCA9IHRydWU7XG5cdFx0YnJlYWs7XG5cdC8vY2FzZSBFTlRJVFlfUkVGRVJFTkNFX05PREU6XG5cdC8vY2FzZSBQUk9DRVNTSU5HX0lOU1RSVUNUSU9OX05PREU6XG5cdC8vLy9jYXNlIFRFWFRfTk9ERTpcblx0Ly9jYXNlIENEQVRBX1NFQ1RJT05fTk9ERTpcblx0Ly9jYXNlIENPTU1FTlRfTk9ERTpcblx0Ly9cdGRlZXAgPSBmYWxzZTtcblx0Ly9cdGJyZWFrO1xuXHQvL2Nhc2UgRE9DVU1FTlRfTk9ERTpcblx0Ly9jYXNlIERPQ1VNRU5UX1RZUEVfTk9ERTpcblx0Ly9jYW5ub3QgYmUgaW1wb3J0ZWQuXG5cdC8vY2FzZSBFTlRJVFlfTk9ERTpcblx0Ly9jYXNlIE5PVEFUSU9OX05PREXvvJpcblx0Ly9jYW4gbm90IGhpdCBpbiBsZXZlbDNcblx0Ly9kZWZhdWx0OnRocm93IGU7XG5cdH1cblx0aWYoIW5vZGUyKXtcblx0XHRub2RlMiA9IG5vZGUuY2xvbmVOb2RlKGZhbHNlKTsvL2ZhbHNlXG5cdH1cblx0bm9kZTIub3duZXJEb2N1bWVudCA9IGRvYztcblx0bm9kZTIucGFyZW50Tm9kZSA9IG51bGw7XG5cdGlmKGRlZXApe1xuXHRcdHZhciBjaGlsZCA9IG5vZGUuZmlyc3RDaGlsZDtcblx0XHR3aGlsZShjaGlsZCl7XG5cdFx0XHRub2RlMi5hcHBlbmRDaGlsZChpbXBvcnROb2RlKGRvYyxjaGlsZCxkZWVwKSk7XG5cdFx0XHRjaGlsZCA9IGNoaWxkLm5leHRTaWJsaW5nO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gbm9kZTI7XG59XG4vL1xuLy92YXIgX3JlbGF0aW9uTWFwID0ge2ZpcnN0Q2hpbGQ6MSxsYXN0Q2hpbGQ6MSxwcmV2aW91c1NpYmxpbmc6MSxuZXh0U2libGluZzoxLFxuLy9cdFx0XHRcdFx0YXR0cmlidXRlczoxLGNoaWxkTm9kZXM6MSxwYXJlbnROb2RlOjEsZG9jdW1lbnRFbGVtZW50OjEsZG9jdHlwZSx9O1xuZnVuY3Rpb24gY2xvbmVOb2RlKGRvYyxub2RlLGRlZXApe1xuXHR2YXIgbm9kZTIgPSBuZXcgbm9kZS5jb25zdHJ1Y3RvcigpO1xuXHRmb3IgKHZhciBuIGluIG5vZGUpIHtcblx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG5vZGUsIG4pKSB7XG5cdFx0XHR2YXIgdiA9IG5vZGVbbl07XG5cdFx0XHRpZiAodHlwZW9mIHYgIT0gXCJvYmplY3RcIikge1xuXHRcdFx0XHRpZiAodiAhPSBub2RlMltuXSkge1xuXHRcdFx0XHRcdG5vZGUyW25dID0gdjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRpZihub2RlLmNoaWxkTm9kZXMpe1xuXHRcdG5vZGUyLmNoaWxkTm9kZXMgPSBuZXcgTm9kZUxpc3QoKTtcblx0fVxuXHRub2RlMi5vd25lckRvY3VtZW50ID0gZG9jO1xuXHRzd2l0Y2ggKG5vZGUyLm5vZGVUeXBlKSB7XG5cdGNhc2UgRUxFTUVOVF9OT0RFOlxuXHRcdHZhciBhdHRyc1x0PSBub2RlLmF0dHJpYnV0ZXM7XG5cdFx0dmFyIGF0dHJzMlx0PSBub2RlMi5hdHRyaWJ1dGVzID0gbmV3IE5hbWVkTm9kZU1hcCgpO1xuXHRcdHZhciBsZW4gPSBhdHRycy5sZW5ndGhcblx0XHRhdHRyczIuX293bmVyRWxlbWVudCA9IG5vZGUyO1xuXHRcdGZvcih2YXIgaT0wO2k8bGVuO2krKyl7XG5cdFx0XHRub2RlMi5zZXRBdHRyaWJ1dGVOb2RlKGNsb25lTm9kZShkb2MsYXR0cnMuaXRlbShpKSx0cnVlKSk7XG5cdFx0fVxuXHRcdGJyZWFrOztcblx0Y2FzZSBBVFRSSUJVVEVfTk9ERTpcblx0XHRkZWVwID0gdHJ1ZTtcblx0fVxuXHRpZihkZWVwKXtcblx0XHR2YXIgY2hpbGQgPSBub2RlLmZpcnN0Q2hpbGQ7XG5cdFx0d2hpbGUoY2hpbGQpe1xuXHRcdFx0bm9kZTIuYXBwZW5kQ2hpbGQoY2xvbmVOb2RlKGRvYyxjaGlsZCxkZWVwKSk7XG5cdFx0XHRjaGlsZCA9IGNoaWxkLm5leHRTaWJsaW5nO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gbm9kZTI7XG59XG5cbmZ1bmN0aW9uIF9fc2V0X18ob2JqZWN0LGtleSx2YWx1ZSl7XG5cdG9iamVjdFtrZXldID0gdmFsdWVcbn1cbi8vZG8gZHluYW1pY1xudHJ5e1xuXHRpZihPYmplY3QuZGVmaW5lUHJvcGVydHkpe1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShMaXZlTm9kZUxpc3QucHJvdG90eXBlLCdsZW5ndGgnLHtcblx0XHRcdGdldDpmdW5jdGlvbigpe1xuXHRcdFx0XHRfdXBkYXRlTGl2ZUxpc3QodGhpcyk7XG5cdFx0XHRcdHJldHVybiB0aGlzLiQkbGVuZ3RoO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KE5vZGUucHJvdG90eXBlLCd0ZXh0Q29udGVudCcse1xuXHRcdFx0Z2V0OmZ1bmN0aW9uKCl7XG5cdFx0XHRcdHJldHVybiBnZXRUZXh0Q29udGVudCh0aGlzKTtcblx0XHRcdH0sXG5cblx0XHRcdHNldDpmdW5jdGlvbihkYXRhKXtcblx0XHRcdFx0c3dpdGNoKHRoaXMubm9kZVR5cGUpe1xuXHRcdFx0XHRjYXNlIEVMRU1FTlRfTk9ERTpcblx0XHRcdFx0Y2FzZSBET0NVTUVOVF9GUkFHTUVOVF9OT0RFOlxuXHRcdFx0XHRcdHdoaWxlKHRoaXMuZmlyc3RDaGlsZCl7XG5cdFx0XHRcdFx0XHR0aGlzLnJlbW92ZUNoaWxkKHRoaXMuZmlyc3RDaGlsZCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmKGRhdGEgfHwgU3RyaW5nKGRhdGEpKXtcblx0XHRcdFx0XHRcdHRoaXMuYXBwZW5kQ2hpbGQodGhpcy5vd25lckRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGRhdGEpKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHR0aGlzLmRhdGEgPSBkYXRhO1xuXHRcdFx0XHRcdHRoaXMudmFsdWUgPSBkYXRhO1xuXHRcdFx0XHRcdHRoaXMubm9kZVZhbHVlID0gZGF0YTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pXG5cblx0XHRmdW5jdGlvbiBnZXRUZXh0Q29udGVudChub2RlKXtcblx0XHRcdHN3aXRjaChub2RlLm5vZGVUeXBlKXtcblx0XHRcdGNhc2UgRUxFTUVOVF9OT0RFOlxuXHRcdFx0Y2FzZSBET0NVTUVOVF9GUkFHTUVOVF9OT0RFOlxuXHRcdFx0XHR2YXIgYnVmID0gW107XG5cdFx0XHRcdG5vZGUgPSBub2RlLmZpcnN0Q2hpbGQ7XG5cdFx0XHRcdHdoaWxlKG5vZGUpe1xuXHRcdFx0XHRcdGlmKG5vZGUubm9kZVR5cGUhPT03ICYmIG5vZGUubm9kZVR5cGUgIT09OCl7XG5cdFx0XHRcdFx0XHRidWYucHVzaChnZXRUZXh0Q29udGVudChub2RlKSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG5vZGUgPSBub2RlLm5leHRTaWJsaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBidWYuam9pbignJyk7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRyZXR1cm4gbm9kZS5ub2RlVmFsdWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0X19zZXRfXyA9IGZ1bmN0aW9uKG9iamVjdCxrZXksdmFsdWUpe1xuXHRcdFx0Ly9jb25zb2xlLmxvZyh2YWx1ZSlcblx0XHRcdG9iamVjdFsnJCQnK2tleV0gPSB2YWx1ZVxuXHRcdH1cblx0fVxufWNhdGNoKGUpey8vaWU4XG59XG5cbi8vaWYodHlwZW9mIHJlcXVpcmUgPT0gJ2Z1bmN0aW9uJyl7XG5cdGV4cG9ydHMuRG9jdW1lbnRUeXBlID0gRG9jdW1lbnRUeXBlO1xuXHRleHBvcnRzLkRPTUV4Y2VwdGlvbiA9IERPTUV4Y2VwdGlvbjtcblx0ZXhwb3J0cy5ET01JbXBsZW1lbnRhdGlvbiA9IERPTUltcGxlbWVudGF0aW9uO1xuXHRleHBvcnRzLkVsZW1lbnQgPSBFbGVtZW50O1xuXHRleHBvcnRzLk5vZGUgPSBOb2RlO1xuXHRleHBvcnRzLk5vZGVMaXN0ID0gTm9kZUxpc3Q7XG5cdGV4cG9ydHMuWE1MU2VyaWFsaXplciA9IFhNTFNlcmlhbGl6ZXI7XG4vL31cbiJdLCJuYW1lcyI6WyJjb252ZW50aW9ucyIsInJlcXVpcmUiLCJmaW5kIiwiTkFNRVNQQUNFIiwibm90RW1wdHlTdHJpbmciLCJpbnB1dCIsInNwbGl0T25BU0NJSVdoaXRlc3BhY2UiLCJzcGxpdCIsImZpbHRlciIsIm9yZGVyZWRTZXRSZWR1Y2VyIiwiY3VycmVudCIsImVsZW1lbnQiLCJoYXNPd25Qcm9wZXJ0eSIsInRvT3JkZXJlZFNldCIsImxpc3QiLCJPYmplY3QiLCJrZXlzIiwicmVkdWNlIiwiYXJyYXlJbmNsdWRlcyIsImluZGV4T2YiLCJjb3B5Iiwic3JjIiwiZGVzdCIsInAiLCJwcm90b3R5cGUiLCJjYWxsIiwiX2V4dGVuZHMiLCJDbGFzcyIsIlN1cGVyIiwicHQiLCJ0IiwiY29uc3RydWN0b3IiLCJjb25zb2xlIiwiZXJyb3IiLCJOb2RlVHlwZSIsIkVMRU1FTlRfTk9ERSIsIkFUVFJJQlVURV9OT0RFIiwiVEVYVF9OT0RFIiwiQ0RBVEFfU0VDVElPTl9OT0RFIiwiRU5USVRZX1JFRkVSRU5DRV9OT0RFIiwiRU5USVRZX05PREUiLCJQUk9DRVNTSU5HX0lOU1RSVUNUSU9OX05PREUiLCJDT01NRU5UX05PREUiLCJET0NVTUVOVF9OT0RFIiwiRE9DVU1FTlRfVFlQRV9OT0RFIiwiRE9DVU1FTlRfRlJBR01FTlRfTk9ERSIsIk5PVEFUSU9OX05PREUiLCJFeGNlcHRpb25Db2RlIiwiRXhjZXB0aW9uTWVzc2FnZSIsIklOREVYX1NJWkVfRVJSIiwiRE9NU1RSSU5HX1NJWkVfRVJSIiwiSElFUkFSQ0hZX1JFUVVFU1RfRVJSIiwiV1JPTkdfRE9DVU1FTlRfRVJSIiwiSU5WQUxJRF9DSEFSQUNURVJfRVJSIiwiTk9fREFUQV9BTExPV0VEX0VSUiIsIk5PX01PRElGSUNBVElPTl9BTExPV0VEX0VSUiIsIk5PVF9GT1VORF9FUlIiLCJOT1RfU1VQUE9SVEVEX0VSUiIsIklOVVNFX0FUVFJJQlVURV9FUlIiLCJJTlZBTElEX1NUQVRFX0VSUiIsIlNZTlRBWF9FUlIiLCJJTlZBTElEX01PRElGSUNBVElPTl9FUlIiLCJOQU1FU1BBQ0VfRVJSIiwiSU5WQUxJRF9BQ0NFU1NfRVJSIiwiRE9NRXhjZXB0aW9uIiwiY29kZSIsIm1lc3NhZ2UiLCJFcnJvciIsImNhcHR1cmVTdGFja1RyYWNlIiwiTm9kZUxpc3QiLCJsZW5ndGgiLCJpdGVtIiwiaW5kZXgiLCJ0b1N0cmluZyIsImlzSFRNTCIsIm5vZGVGaWx0ZXIiLCJidWYiLCJpIiwic2VyaWFsaXplVG9TdHJpbmciLCJqb2luIiwicHJlZGljYXRlIiwiQXJyYXkiLCJMaXZlTm9kZUxpc3QiLCJub2RlIiwicmVmcmVzaCIsIl9ub2RlIiwiX3JlZnJlc2giLCJfdXBkYXRlTGl2ZUxpc3QiLCJpbmMiLCJfaW5jIiwib3duZXJEb2N1bWVudCIsImxzIiwiX19zZXRfXyIsIiQkbGVuZ3RoIiwiTmFtZWROb2RlTWFwIiwiX2ZpbmROb2RlSW5kZXgiLCJfYWRkTmFtZWROb2RlIiwiZWwiLCJuZXdBdHRyIiwib2xkQXR0ciIsIm93bmVyRWxlbWVudCIsImRvYyIsIl9vblJlbW92ZUF0dHJpYnV0ZSIsIl9vbkFkZEF0dHJpYnV0ZSIsIl9yZW1vdmVOYW1lZE5vZGUiLCJhdHRyIiwibGFzdEluZGV4IiwidGFnTmFtZSIsImdldE5hbWVkSXRlbSIsImtleSIsIm5vZGVOYW1lIiwic2V0TmFtZWRJdGVtIiwiX293bmVyRWxlbWVudCIsInNldE5hbWVkSXRlbU5TIiwiZ2V0TmFtZWRJdGVtTlMiLCJuYW1lc3BhY2VVUkkiLCJsb2NhbE5hbWUiLCJyZW1vdmVOYW1lZEl0ZW0iLCJyZW1vdmVOYW1lZEl0ZW1OUyIsIkRPTUltcGxlbWVudGF0aW9uIiwiaGFzRmVhdHVyZSIsImZlYXR1cmUiLCJ2ZXJzaW9uIiwiY3JlYXRlRG9jdW1lbnQiLCJxdWFsaWZpZWROYW1lIiwiZG9jdHlwZSIsIkRvY3VtZW50IiwiaW1wbGVtZW50YXRpb24iLCJjaGlsZE5vZGVzIiwiYXBwZW5kQ2hpbGQiLCJyb290IiwiY3JlYXRlRWxlbWVudE5TIiwiY3JlYXRlRG9jdW1lbnRUeXBlIiwicHVibGljSWQiLCJzeXN0ZW1JZCIsIkRvY3VtZW50VHlwZSIsIm5hbWUiLCJOb2RlIiwiZmlyc3RDaGlsZCIsImxhc3RDaGlsZCIsInByZXZpb3VzU2libGluZyIsIm5leHRTaWJsaW5nIiwiYXR0cmlidXRlcyIsInBhcmVudE5vZGUiLCJub2RlVmFsdWUiLCJwcmVmaXgiLCJpbnNlcnRCZWZvcmUiLCJuZXdDaGlsZCIsInJlZkNoaWxkIiwiX2luc2VydEJlZm9yZSIsInJlcGxhY2VDaGlsZCIsIm9sZENoaWxkIiwiYXNzZXJ0UHJlUmVwbGFjZW1lbnRWYWxpZGl0eUluRG9jdW1lbnQiLCJyZW1vdmVDaGlsZCIsIl9yZW1vdmVDaGlsZCIsImhhc0NoaWxkTm9kZXMiLCJjbG9uZU5vZGUiLCJkZWVwIiwibm9ybWFsaXplIiwiY2hpbGQiLCJuZXh0Iiwibm9kZVR5cGUiLCJhcHBlbmREYXRhIiwiZGF0YSIsImlzU3VwcG9ydGVkIiwiaGFzQXR0cmlidXRlcyIsImxvb2t1cFByZWZpeCIsIm1hcCIsIl9uc01hcCIsIm4iLCJsb29rdXBOYW1lc3BhY2VVUkkiLCJpc0RlZmF1bHROYW1lc3BhY2UiLCJfeG1sRW5jb2RlciIsImMiLCJjaGFyQ29kZUF0IiwiX3Zpc2l0Tm9kZSIsImNhbGxiYWNrIiwibnMiLCJYTUxOUyIsInZhbHVlIiwicmVtb3ZlIiwiX29uVXBkYXRlQ2hpbGQiLCJjcyIsInByZXZpb3VzIiwiaGFzVmFsaWRQYXJlbnROb2RlVHlwZSIsImhhc0luc2VydGFibGVOb2RlVHlwZSIsImlzRWxlbWVudE5vZGUiLCJpc1RleHROb2RlIiwiaXNEb2NUeXBlTm9kZSIsImlzRWxlbWVudEluc2VydGlvblBvc3NpYmxlIiwicGFyZW50Q2hpbGROb2RlcyIsImRvY1R5cGVOb2RlIiwiaXNFbGVtZW50UmVwbGFjZW1lbnRQb3NzaWJsZSIsImhhc0VsZW1lbnRDaGlsZFRoYXRJc05vdENoaWxkIiwiYXNzZXJ0UHJlSW5zZXJ0aW9uVmFsaWRpdHkxdG81IiwicGFyZW50IiwiYXNzZXJ0UHJlSW5zZXJ0aW9uVmFsaWRpdHlJbkRvY3VtZW50Iiwibm9kZUNoaWxkTm9kZXMiLCJub2RlQ2hpbGRFbGVtZW50cyIsInBhcmVudEVsZW1lbnRDaGlsZCIsImhhc0RvY3R5cGVDaGlsZFRoYXRJc05vdENoaWxkIiwiX2luRG9jdW1lbnRBc3NlcnRpb24iLCJjcCIsIm5ld0ZpcnN0IiwibmV3TGFzdCIsInByZSIsIl9hcHBlbmRTaW5nbGVDaGlsZCIsImRvY3VtZW50RWxlbWVudCIsImltcG9ydE5vZGUiLCJpbXBvcnRlZE5vZGUiLCJnZXRFbGVtZW50QnlJZCIsImlkIiwicnR2IiwiZ2V0QXR0cmlidXRlIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImNsYXNzTmFtZXMiLCJjbGFzc05hbWVzU2V0IiwiYmFzZSIsIm5vZGVDbGFzc05hbWVzIiwibWF0Y2hlcyIsIm5vZGVDbGFzc05hbWVzU2V0IiwiZXZlcnkiLCJwdXNoIiwiY3JlYXRlRWxlbWVudCIsIkVsZW1lbnQiLCJhdHRycyIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJEb2N1bWVudEZyYWdtZW50IiwiY3JlYXRlVGV4dE5vZGUiLCJUZXh0IiwiY3JlYXRlQ29tbWVudCIsIkNvbW1lbnQiLCJjcmVhdGVDREFUQVNlY3Rpb24iLCJDREFUQVNlY3Rpb24iLCJjcmVhdGVQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24iLCJ0YXJnZXQiLCJQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24iLCJjcmVhdGVBdHRyaWJ1dGUiLCJBdHRyIiwic3BlY2lmaWVkIiwiY3JlYXRlRW50aXR5UmVmZXJlbmNlIiwiRW50aXR5UmVmZXJlbmNlIiwicGwiLCJjcmVhdGVBdHRyaWJ1dGVOUyIsImhhc0F0dHJpYnV0ZSIsImdldEF0dHJpYnV0ZU5vZGUiLCJzZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGVOb2RlIiwicmVtb3ZlQXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlTm9kZSIsInNldEF0dHJpYnV0ZU5vZGVOUyIsInJlbW92ZUF0dHJpYnV0ZU5TIiwib2xkIiwiZ2V0QXR0cmlidXRlTm9kZU5TIiwiaGFzQXR0cmlidXRlTlMiLCJnZXRBdHRyaWJ1dGVOUyIsInNldEF0dHJpYnV0ZU5TIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJnZXRFbGVtZW50c0J5VGFnTmFtZU5TIiwiQ2hhcmFjdGVyRGF0YSIsInN1YnN0cmluZ0RhdGEiLCJvZmZzZXQiLCJjb3VudCIsInN1YnN0cmluZyIsInRleHQiLCJpbnNlcnREYXRhIiwicmVwbGFjZURhdGEiLCJkZWxldGVEYXRhIiwic3RhcnQiLCJlbmQiLCJzcGxpdFRleHQiLCJuZXdUZXh0IiwibmV3Tm9kZSIsIk5vdGF0aW9uIiwiRW50aXR5IiwiWE1MU2VyaWFsaXplciIsImlzSHRtbCIsIm5vZGVTZXJpYWxpemVUb1N0cmluZyIsInJlZk5vZGUiLCJ1cmkiLCJ2aXNpYmxlTmFtZXNwYWNlcyIsIm5hbWVzcGFjZSIsIm5lZWROYW1lc3BhY2VEZWZpbmUiLCJYTUwiLCJhZGRTZXJpYWxpemVkQXR0cmlidXRlIiwicmVwbGFjZSIsImxlbiIsInByZWZpeGVkTm9kZU5hbWUiLCJkZWZhdWx0TlMiLCJhaSIsIm5zaSIsInRlc3QiLCJzbGljZSIsInB1YmlkIiwic3lzaWQiLCJzdWIiLCJpbnRlcm5hbFN1YnNldCIsIm5vZGUyIiwidiIsImF0dHJzMiIsIm9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0IiwiZ2V0VGV4dENvbnRlbnQiLCJzZXQiLCJTdHJpbmciLCJlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmldom/xmldom/lib/dom.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmldom/xmldom/lib/entities.js":
/*!*****************************************************!*\
  !*** ./node_modules/@xmldom/xmldom/lib/entities.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nvar freeze = (__webpack_require__(/*! ./conventions */ \"(ssr)/./node_modules/@xmldom/xmldom/lib/conventions.js\").freeze);\n/**\n * The entities that are predefined in every XML document.\n *\n * @see https://www.w3.org/TR/2006/REC-xml11-20060816/#sec-predefined-ent W3C XML 1.1\n * @see https://www.w3.org/TR/2008/REC-xml-20081126/#sec-predefined-ent W3C XML 1.0\n * @see https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references#Predefined_entities_in_XML Wikipedia\n */ exports.XML_ENTITIES = freeze({\n    amp: \"&\",\n    apos: \"'\",\n    gt: \">\",\n    lt: \"<\",\n    quot: '\"'\n});\n/**\n * A map of all entities that are detected in an HTML document.\n * They contain all entries from `XML_ENTITIES`.\n *\n * @see XML_ENTITIES\n * @see DOMParser.parseFromString\n * @see DOMImplementation.prototype.createHTMLDocument\n * @see https://html.spec.whatwg.org/#named-character-references WHATWG HTML(5) Spec\n * @see https://html.spec.whatwg.org/entities.json JSON\n * @see https://www.w3.org/TR/xml-entity-names/ W3C XML Entity Names\n * @see https://www.w3.org/TR/html4/sgml/entities.html W3C HTML4/SGML\n * @see https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references#Character_entity_references_in_HTML Wikipedia (HTML)\n * @see https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references#Entities_representing_special_characters_in_XHTML Wikpedia (XHTML)\n */ exports.HTML_ENTITIES = freeze({\n    Aacute: \"\\xc1\",\n    aacute: \"\\xe1\",\n    Abreve: \"Ă\",\n    abreve: \"ă\",\n    ac: \"∾\",\n    acd: \"∿\",\n    acE: \"∾̳\",\n    Acirc: \"\\xc2\",\n    acirc: \"\\xe2\",\n    acute: \"\\xb4\",\n    Acy: \"А\",\n    acy: \"а\",\n    AElig: \"\\xc6\",\n    aelig: \"\\xe6\",\n    af: \"⁡\",\n    Afr: \"\\uD835\\uDD04\",\n    afr: \"\\uD835\\uDD1E\",\n    Agrave: \"\\xc0\",\n    agrave: \"\\xe0\",\n    alefsym: \"ℵ\",\n    aleph: \"ℵ\",\n    Alpha: \"Α\",\n    alpha: \"α\",\n    Amacr: \"Ā\",\n    amacr: \"ā\",\n    amalg: \"⨿\",\n    AMP: \"&\",\n    amp: \"&\",\n    And: \"⩓\",\n    and: \"∧\",\n    andand: \"⩕\",\n    andd: \"⩜\",\n    andslope: \"⩘\",\n    andv: \"⩚\",\n    ang: \"∠\",\n    ange: \"⦤\",\n    angle: \"∠\",\n    angmsd: \"∡\",\n    angmsdaa: \"⦨\",\n    angmsdab: \"⦩\",\n    angmsdac: \"⦪\",\n    angmsdad: \"⦫\",\n    angmsdae: \"⦬\",\n    angmsdaf: \"⦭\",\n    angmsdag: \"⦮\",\n    angmsdah: \"⦯\",\n    angrt: \"∟\",\n    angrtvb: \"⊾\",\n    angrtvbd: \"⦝\",\n    angsph: \"∢\",\n    angst: \"\\xc5\",\n    angzarr: \"⍼\",\n    Aogon: \"Ą\",\n    aogon: \"ą\",\n    Aopf: \"\\uD835\\uDD38\",\n    aopf: \"\\uD835\\uDD52\",\n    ap: \"≈\",\n    apacir: \"⩯\",\n    apE: \"⩰\",\n    ape: \"≊\",\n    apid: \"≋\",\n    apos: \"'\",\n    ApplyFunction: \"⁡\",\n    approx: \"≈\",\n    approxeq: \"≊\",\n    Aring: \"\\xc5\",\n    aring: \"\\xe5\",\n    Ascr: \"\\uD835\\uDC9C\",\n    ascr: \"\\uD835\\uDCB6\",\n    Assign: \"≔\",\n    ast: \"*\",\n    asymp: \"≈\",\n    asympeq: \"≍\",\n    Atilde: \"\\xc3\",\n    atilde: \"\\xe3\",\n    Auml: \"\\xc4\",\n    auml: \"\\xe4\",\n    awconint: \"∳\",\n    awint: \"⨑\",\n    backcong: \"≌\",\n    backepsilon: \"϶\",\n    backprime: \"‵\",\n    backsim: \"∽\",\n    backsimeq: \"⋍\",\n    Backslash: \"∖\",\n    Barv: \"⫧\",\n    barvee: \"⊽\",\n    Barwed: \"⌆\",\n    barwed: \"⌅\",\n    barwedge: \"⌅\",\n    bbrk: \"⎵\",\n    bbrktbrk: \"⎶\",\n    bcong: \"≌\",\n    Bcy: \"Б\",\n    bcy: \"б\",\n    bdquo: \"„\",\n    becaus: \"∵\",\n    Because: \"∵\",\n    because: \"∵\",\n    bemptyv: \"⦰\",\n    bepsi: \"϶\",\n    bernou: \"ℬ\",\n    Bernoullis: \"ℬ\",\n    Beta: \"Β\",\n    beta: \"β\",\n    beth: \"ℶ\",\n    between: \"≬\",\n    Bfr: \"\\uD835\\uDD05\",\n    bfr: \"\\uD835\\uDD1F\",\n    bigcap: \"⋂\",\n    bigcirc: \"◯\",\n    bigcup: \"⋃\",\n    bigodot: \"⨀\",\n    bigoplus: \"⨁\",\n    bigotimes: \"⨂\",\n    bigsqcup: \"⨆\",\n    bigstar: \"★\",\n    bigtriangledown: \"▽\",\n    bigtriangleup: \"△\",\n    biguplus: \"⨄\",\n    bigvee: \"⋁\",\n    bigwedge: \"⋀\",\n    bkarow: \"⤍\",\n    blacklozenge: \"⧫\",\n    blacksquare: \"▪\",\n    blacktriangle: \"▴\",\n    blacktriangledown: \"▾\",\n    blacktriangleleft: \"◂\",\n    blacktriangleright: \"▸\",\n    blank: \"␣\",\n    blk12: \"▒\",\n    blk14: \"░\",\n    blk34: \"▓\",\n    block: \"█\",\n    bne: \"=⃥\",\n    bnequiv: \"≡⃥\",\n    bNot: \"⫭\",\n    bnot: \"⌐\",\n    Bopf: \"\\uD835\\uDD39\",\n    bopf: \"\\uD835\\uDD53\",\n    bot: \"⊥\",\n    bottom: \"⊥\",\n    bowtie: \"⋈\",\n    boxbox: \"⧉\",\n    boxDL: \"╗\",\n    boxDl: \"╖\",\n    boxdL: \"╕\",\n    boxdl: \"┐\",\n    boxDR: \"╔\",\n    boxDr: \"╓\",\n    boxdR: \"╒\",\n    boxdr: \"┌\",\n    boxH: \"═\",\n    boxh: \"─\",\n    boxHD: \"╦\",\n    boxHd: \"╤\",\n    boxhD: \"╥\",\n    boxhd: \"┬\",\n    boxHU: \"╩\",\n    boxHu: \"╧\",\n    boxhU: \"╨\",\n    boxhu: \"┴\",\n    boxminus: \"⊟\",\n    boxplus: \"⊞\",\n    boxtimes: \"⊠\",\n    boxUL: \"╝\",\n    boxUl: \"╜\",\n    boxuL: \"╛\",\n    boxul: \"┘\",\n    boxUR: \"╚\",\n    boxUr: \"╙\",\n    boxuR: \"╘\",\n    boxur: \"└\",\n    boxV: \"║\",\n    boxv: \"│\",\n    boxVH: \"╬\",\n    boxVh: \"╫\",\n    boxvH: \"╪\",\n    boxvh: \"┼\",\n    boxVL: \"╣\",\n    boxVl: \"╢\",\n    boxvL: \"╡\",\n    boxvl: \"┤\",\n    boxVR: \"╠\",\n    boxVr: \"╟\",\n    boxvR: \"╞\",\n    boxvr: \"├\",\n    bprime: \"‵\",\n    Breve: \"˘\",\n    breve: \"˘\",\n    brvbar: \"\\xa6\",\n    Bscr: \"ℬ\",\n    bscr: \"\\uD835\\uDCB7\",\n    bsemi: \"⁏\",\n    bsim: \"∽\",\n    bsime: \"⋍\",\n    bsol: \"\\\\\",\n    bsolb: \"⧅\",\n    bsolhsub: \"⟈\",\n    bull: \"•\",\n    bullet: \"•\",\n    bump: \"≎\",\n    bumpE: \"⪮\",\n    bumpe: \"≏\",\n    Bumpeq: \"≎\",\n    bumpeq: \"≏\",\n    Cacute: \"Ć\",\n    cacute: \"ć\",\n    Cap: \"⋒\",\n    cap: \"∩\",\n    capand: \"⩄\",\n    capbrcup: \"⩉\",\n    capcap: \"⩋\",\n    capcup: \"⩇\",\n    capdot: \"⩀\",\n    CapitalDifferentialD: \"ⅅ\",\n    caps: \"∩︀\",\n    caret: \"⁁\",\n    caron: \"ˇ\",\n    Cayleys: \"ℭ\",\n    ccaps: \"⩍\",\n    Ccaron: \"Č\",\n    ccaron: \"č\",\n    Ccedil: \"\\xc7\",\n    ccedil: \"\\xe7\",\n    Ccirc: \"Ĉ\",\n    ccirc: \"ĉ\",\n    Cconint: \"∰\",\n    ccups: \"⩌\",\n    ccupssm: \"⩐\",\n    Cdot: \"Ċ\",\n    cdot: \"ċ\",\n    cedil: \"\\xb8\",\n    Cedilla: \"\\xb8\",\n    cemptyv: \"⦲\",\n    cent: \"\\xa2\",\n    CenterDot: \"\\xb7\",\n    centerdot: \"\\xb7\",\n    Cfr: \"ℭ\",\n    cfr: \"\\uD835\\uDD20\",\n    CHcy: \"Ч\",\n    chcy: \"ч\",\n    check: \"✓\",\n    checkmark: \"✓\",\n    Chi: \"Χ\",\n    chi: \"χ\",\n    cir: \"○\",\n    circ: \"ˆ\",\n    circeq: \"≗\",\n    circlearrowleft: \"↺\",\n    circlearrowright: \"↻\",\n    circledast: \"⊛\",\n    circledcirc: \"⊚\",\n    circleddash: \"⊝\",\n    CircleDot: \"⊙\",\n    circledR: \"\\xae\",\n    circledS: \"Ⓢ\",\n    CircleMinus: \"⊖\",\n    CirclePlus: \"⊕\",\n    CircleTimes: \"⊗\",\n    cirE: \"⧃\",\n    cire: \"≗\",\n    cirfnint: \"⨐\",\n    cirmid: \"⫯\",\n    cirscir: \"⧂\",\n    ClockwiseContourIntegral: \"∲\",\n    CloseCurlyDoubleQuote: \"”\",\n    CloseCurlyQuote: \"’\",\n    clubs: \"♣\",\n    clubsuit: \"♣\",\n    Colon: \"∷\",\n    colon: \":\",\n    Colone: \"⩴\",\n    colone: \"≔\",\n    coloneq: \"≔\",\n    comma: \",\",\n    commat: \"@\",\n    comp: \"∁\",\n    compfn: \"∘\",\n    complement: \"∁\",\n    complexes: \"ℂ\",\n    cong: \"≅\",\n    congdot: \"⩭\",\n    Congruent: \"≡\",\n    Conint: \"∯\",\n    conint: \"∮\",\n    ContourIntegral: \"∮\",\n    Copf: \"ℂ\",\n    copf: \"\\uD835\\uDD54\",\n    coprod: \"∐\",\n    Coproduct: \"∐\",\n    COPY: \"\\xa9\",\n    copy: \"\\xa9\",\n    copysr: \"℗\",\n    CounterClockwiseContourIntegral: \"∳\",\n    crarr: \"↵\",\n    Cross: \"⨯\",\n    cross: \"✗\",\n    Cscr: \"\\uD835\\uDC9E\",\n    cscr: \"\\uD835\\uDCB8\",\n    csub: \"⫏\",\n    csube: \"⫑\",\n    csup: \"⫐\",\n    csupe: \"⫒\",\n    ctdot: \"⋯\",\n    cudarrl: \"⤸\",\n    cudarrr: \"⤵\",\n    cuepr: \"⋞\",\n    cuesc: \"⋟\",\n    cularr: \"↶\",\n    cularrp: \"⤽\",\n    Cup: \"⋓\",\n    cup: \"∪\",\n    cupbrcap: \"⩈\",\n    CupCap: \"≍\",\n    cupcap: \"⩆\",\n    cupcup: \"⩊\",\n    cupdot: \"⊍\",\n    cupor: \"⩅\",\n    cups: \"∪︀\",\n    curarr: \"↷\",\n    curarrm: \"⤼\",\n    curlyeqprec: \"⋞\",\n    curlyeqsucc: \"⋟\",\n    curlyvee: \"⋎\",\n    curlywedge: \"⋏\",\n    curren: \"\\xa4\",\n    curvearrowleft: \"↶\",\n    curvearrowright: \"↷\",\n    cuvee: \"⋎\",\n    cuwed: \"⋏\",\n    cwconint: \"∲\",\n    cwint: \"∱\",\n    cylcty: \"⌭\",\n    Dagger: \"‡\",\n    dagger: \"†\",\n    daleth: \"ℸ\",\n    Darr: \"↡\",\n    dArr: \"⇓\",\n    darr: \"↓\",\n    dash: \"‐\",\n    Dashv: \"⫤\",\n    dashv: \"⊣\",\n    dbkarow: \"⤏\",\n    dblac: \"˝\",\n    Dcaron: \"Ď\",\n    dcaron: \"ď\",\n    Dcy: \"Д\",\n    dcy: \"д\",\n    DD: \"ⅅ\",\n    dd: \"ⅆ\",\n    ddagger: \"‡\",\n    ddarr: \"⇊\",\n    DDotrahd: \"⤑\",\n    ddotseq: \"⩷\",\n    deg: \"\\xb0\",\n    Del: \"∇\",\n    Delta: \"Δ\",\n    delta: \"δ\",\n    demptyv: \"⦱\",\n    dfisht: \"⥿\",\n    Dfr: \"\\uD835\\uDD07\",\n    dfr: \"\\uD835\\uDD21\",\n    dHar: \"⥥\",\n    dharl: \"⇃\",\n    dharr: \"⇂\",\n    DiacriticalAcute: \"\\xb4\",\n    DiacriticalDot: \"˙\",\n    DiacriticalDoubleAcute: \"˝\",\n    DiacriticalGrave: \"`\",\n    DiacriticalTilde: \"˜\",\n    diam: \"⋄\",\n    Diamond: \"⋄\",\n    diamond: \"⋄\",\n    diamondsuit: \"♦\",\n    diams: \"♦\",\n    die: \"\\xa8\",\n    DifferentialD: \"ⅆ\",\n    digamma: \"ϝ\",\n    disin: \"⋲\",\n    div: \"\\xf7\",\n    divide: \"\\xf7\",\n    divideontimes: \"⋇\",\n    divonx: \"⋇\",\n    DJcy: \"Ђ\",\n    djcy: \"ђ\",\n    dlcorn: \"⌞\",\n    dlcrop: \"⌍\",\n    dollar: \"$\",\n    Dopf: \"\\uD835\\uDD3B\",\n    dopf: \"\\uD835\\uDD55\",\n    Dot: \"\\xa8\",\n    dot: \"˙\",\n    DotDot: \"⃜\",\n    doteq: \"≐\",\n    doteqdot: \"≑\",\n    DotEqual: \"≐\",\n    dotminus: \"∸\",\n    dotplus: \"∔\",\n    dotsquare: \"⊡\",\n    doublebarwedge: \"⌆\",\n    DoubleContourIntegral: \"∯\",\n    DoubleDot: \"\\xa8\",\n    DoubleDownArrow: \"⇓\",\n    DoubleLeftArrow: \"⇐\",\n    DoubleLeftRightArrow: \"⇔\",\n    DoubleLeftTee: \"⫤\",\n    DoubleLongLeftArrow: \"⟸\",\n    DoubleLongLeftRightArrow: \"⟺\",\n    DoubleLongRightArrow: \"⟹\",\n    DoubleRightArrow: \"⇒\",\n    DoubleRightTee: \"⊨\",\n    DoubleUpArrow: \"⇑\",\n    DoubleUpDownArrow: \"⇕\",\n    DoubleVerticalBar: \"∥\",\n    DownArrow: \"↓\",\n    Downarrow: \"⇓\",\n    downarrow: \"↓\",\n    DownArrowBar: \"⤓\",\n    DownArrowUpArrow: \"⇵\",\n    DownBreve: \"̑\",\n    downdownarrows: \"⇊\",\n    downharpoonleft: \"⇃\",\n    downharpoonright: \"⇂\",\n    DownLeftRightVector: \"⥐\",\n    DownLeftTeeVector: \"⥞\",\n    DownLeftVector: \"↽\",\n    DownLeftVectorBar: \"⥖\",\n    DownRightTeeVector: \"⥟\",\n    DownRightVector: \"⇁\",\n    DownRightVectorBar: \"⥗\",\n    DownTee: \"⊤\",\n    DownTeeArrow: \"↧\",\n    drbkarow: \"⤐\",\n    drcorn: \"⌟\",\n    drcrop: \"⌌\",\n    Dscr: \"\\uD835\\uDC9F\",\n    dscr: \"\\uD835\\uDCB9\",\n    DScy: \"Ѕ\",\n    dscy: \"ѕ\",\n    dsol: \"⧶\",\n    Dstrok: \"Đ\",\n    dstrok: \"đ\",\n    dtdot: \"⋱\",\n    dtri: \"▿\",\n    dtrif: \"▾\",\n    duarr: \"⇵\",\n    duhar: \"⥯\",\n    dwangle: \"⦦\",\n    DZcy: \"Џ\",\n    dzcy: \"џ\",\n    dzigrarr: \"⟿\",\n    Eacute: \"\\xc9\",\n    eacute: \"\\xe9\",\n    easter: \"⩮\",\n    Ecaron: \"Ě\",\n    ecaron: \"ě\",\n    ecir: \"≖\",\n    Ecirc: \"\\xca\",\n    ecirc: \"\\xea\",\n    ecolon: \"≕\",\n    Ecy: \"Э\",\n    ecy: \"э\",\n    eDDot: \"⩷\",\n    Edot: \"Ė\",\n    eDot: \"≑\",\n    edot: \"ė\",\n    ee: \"ⅇ\",\n    efDot: \"≒\",\n    Efr: \"\\uD835\\uDD08\",\n    efr: \"\\uD835\\uDD22\",\n    eg: \"⪚\",\n    Egrave: \"\\xc8\",\n    egrave: \"\\xe8\",\n    egs: \"⪖\",\n    egsdot: \"⪘\",\n    el: \"⪙\",\n    Element: \"∈\",\n    elinters: \"⏧\",\n    ell: \"ℓ\",\n    els: \"⪕\",\n    elsdot: \"⪗\",\n    Emacr: \"Ē\",\n    emacr: \"ē\",\n    empty: \"∅\",\n    emptyset: \"∅\",\n    EmptySmallSquare: \"◻\",\n    emptyv: \"∅\",\n    EmptyVerySmallSquare: \"▫\",\n    emsp: \" \",\n    emsp13: \" \",\n    emsp14: \" \",\n    ENG: \"Ŋ\",\n    eng: \"ŋ\",\n    ensp: \" \",\n    Eogon: \"Ę\",\n    eogon: \"ę\",\n    Eopf: \"\\uD835\\uDD3C\",\n    eopf: \"\\uD835\\uDD56\",\n    epar: \"⋕\",\n    eparsl: \"⧣\",\n    eplus: \"⩱\",\n    epsi: \"ε\",\n    Epsilon: \"Ε\",\n    epsilon: \"ε\",\n    epsiv: \"ϵ\",\n    eqcirc: \"≖\",\n    eqcolon: \"≕\",\n    eqsim: \"≂\",\n    eqslantgtr: \"⪖\",\n    eqslantless: \"⪕\",\n    Equal: \"⩵\",\n    equals: \"=\",\n    EqualTilde: \"≂\",\n    equest: \"≟\",\n    Equilibrium: \"⇌\",\n    equiv: \"≡\",\n    equivDD: \"⩸\",\n    eqvparsl: \"⧥\",\n    erarr: \"⥱\",\n    erDot: \"≓\",\n    Escr: \"ℰ\",\n    escr: \"ℯ\",\n    esdot: \"≐\",\n    Esim: \"⩳\",\n    esim: \"≂\",\n    Eta: \"Η\",\n    eta: \"η\",\n    ETH: \"\\xd0\",\n    eth: \"\\xf0\",\n    Euml: \"\\xcb\",\n    euml: \"\\xeb\",\n    euro: \"€\",\n    excl: \"!\",\n    exist: \"∃\",\n    Exists: \"∃\",\n    expectation: \"ℰ\",\n    ExponentialE: \"ⅇ\",\n    exponentiale: \"ⅇ\",\n    fallingdotseq: \"≒\",\n    Fcy: \"Ф\",\n    fcy: \"ф\",\n    female: \"♀\",\n    ffilig: \"ﬃ\",\n    fflig: \"ﬀ\",\n    ffllig: \"ﬄ\",\n    Ffr: \"\\uD835\\uDD09\",\n    ffr: \"\\uD835\\uDD23\",\n    filig: \"ﬁ\",\n    FilledSmallSquare: \"◼\",\n    FilledVerySmallSquare: \"▪\",\n    fjlig: \"fj\",\n    flat: \"♭\",\n    fllig: \"ﬂ\",\n    fltns: \"▱\",\n    fnof: \"ƒ\",\n    Fopf: \"\\uD835\\uDD3D\",\n    fopf: \"\\uD835\\uDD57\",\n    ForAll: \"∀\",\n    forall: \"∀\",\n    fork: \"⋔\",\n    forkv: \"⫙\",\n    Fouriertrf: \"ℱ\",\n    fpartint: \"⨍\",\n    frac12: \"\\xbd\",\n    frac13: \"⅓\",\n    frac14: \"\\xbc\",\n    frac15: \"⅕\",\n    frac16: \"⅙\",\n    frac18: \"⅛\",\n    frac23: \"⅔\",\n    frac25: \"⅖\",\n    frac34: \"\\xbe\",\n    frac35: \"⅗\",\n    frac38: \"⅜\",\n    frac45: \"⅘\",\n    frac56: \"⅚\",\n    frac58: \"⅝\",\n    frac78: \"⅞\",\n    frasl: \"⁄\",\n    frown: \"⌢\",\n    Fscr: \"ℱ\",\n    fscr: \"\\uD835\\uDCBB\",\n    gacute: \"ǵ\",\n    Gamma: \"Γ\",\n    gamma: \"γ\",\n    Gammad: \"Ϝ\",\n    gammad: \"ϝ\",\n    gap: \"⪆\",\n    Gbreve: \"Ğ\",\n    gbreve: \"ğ\",\n    Gcedil: \"Ģ\",\n    Gcirc: \"Ĝ\",\n    gcirc: \"ĝ\",\n    Gcy: \"Г\",\n    gcy: \"г\",\n    Gdot: \"Ġ\",\n    gdot: \"ġ\",\n    gE: \"≧\",\n    ge: \"≥\",\n    gEl: \"⪌\",\n    gel: \"⋛\",\n    geq: \"≥\",\n    geqq: \"≧\",\n    geqslant: \"⩾\",\n    ges: \"⩾\",\n    gescc: \"⪩\",\n    gesdot: \"⪀\",\n    gesdoto: \"⪂\",\n    gesdotol: \"⪄\",\n    gesl: \"⋛︀\",\n    gesles: \"⪔\",\n    Gfr: \"\\uD835\\uDD0A\",\n    gfr: \"\\uD835\\uDD24\",\n    Gg: \"⋙\",\n    gg: \"≫\",\n    ggg: \"⋙\",\n    gimel: \"ℷ\",\n    GJcy: \"Ѓ\",\n    gjcy: \"ѓ\",\n    gl: \"≷\",\n    gla: \"⪥\",\n    glE: \"⪒\",\n    glj: \"⪤\",\n    gnap: \"⪊\",\n    gnapprox: \"⪊\",\n    gnE: \"≩\",\n    gne: \"⪈\",\n    gneq: \"⪈\",\n    gneqq: \"≩\",\n    gnsim: \"⋧\",\n    Gopf: \"\\uD835\\uDD3E\",\n    gopf: \"\\uD835\\uDD58\",\n    grave: \"`\",\n    GreaterEqual: \"≥\",\n    GreaterEqualLess: \"⋛\",\n    GreaterFullEqual: \"≧\",\n    GreaterGreater: \"⪢\",\n    GreaterLess: \"≷\",\n    GreaterSlantEqual: \"⩾\",\n    GreaterTilde: \"≳\",\n    Gscr: \"\\uD835\\uDCA2\",\n    gscr: \"ℊ\",\n    gsim: \"≳\",\n    gsime: \"⪎\",\n    gsiml: \"⪐\",\n    Gt: \"≫\",\n    GT: \">\",\n    gt: \">\",\n    gtcc: \"⪧\",\n    gtcir: \"⩺\",\n    gtdot: \"⋗\",\n    gtlPar: \"⦕\",\n    gtquest: \"⩼\",\n    gtrapprox: \"⪆\",\n    gtrarr: \"⥸\",\n    gtrdot: \"⋗\",\n    gtreqless: \"⋛\",\n    gtreqqless: \"⪌\",\n    gtrless: \"≷\",\n    gtrsim: \"≳\",\n    gvertneqq: \"≩︀\",\n    gvnE: \"≩︀\",\n    Hacek: \"ˇ\",\n    hairsp: \" \",\n    half: \"\\xbd\",\n    hamilt: \"ℋ\",\n    HARDcy: \"Ъ\",\n    hardcy: \"ъ\",\n    hArr: \"⇔\",\n    harr: \"↔\",\n    harrcir: \"⥈\",\n    harrw: \"↭\",\n    Hat: \"^\",\n    hbar: \"ℏ\",\n    Hcirc: \"Ĥ\",\n    hcirc: \"ĥ\",\n    hearts: \"♥\",\n    heartsuit: \"♥\",\n    hellip: \"…\",\n    hercon: \"⊹\",\n    Hfr: \"ℌ\",\n    hfr: \"\\uD835\\uDD25\",\n    HilbertSpace: \"ℋ\",\n    hksearow: \"⤥\",\n    hkswarow: \"⤦\",\n    hoarr: \"⇿\",\n    homtht: \"∻\",\n    hookleftarrow: \"↩\",\n    hookrightarrow: \"↪\",\n    Hopf: \"ℍ\",\n    hopf: \"\\uD835\\uDD59\",\n    horbar: \"―\",\n    HorizontalLine: \"─\",\n    Hscr: \"ℋ\",\n    hscr: \"\\uD835\\uDCBD\",\n    hslash: \"ℏ\",\n    Hstrok: \"Ħ\",\n    hstrok: \"ħ\",\n    HumpDownHump: \"≎\",\n    HumpEqual: \"≏\",\n    hybull: \"⁃\",\n    hyphen: \"‐\",\n    Iacute: \"\\xcd\",\n    iacute: \"\\xed\",\n    ic: \"⁣\",\n    Icirc: \"\\xce\",\n    icirc: \"\\xee\",\n    Icy: \"И\",\n    icy: \"и\",\n    Idot: \"İ\",\n    IEcy: \"Е\",\n    iecy: \"е\",\n    iexcl: \"\\xa1\",\n    iff: \"⇔\",\n    Ifr: \"ℑ\",\n    ifr: \"\\uD835\\uDD26\",\n    Igrave: \"\\xcc\",\n    igrave: \"\\xec\",\n    ii: \"ⅈ\",\n    iiiint: \"⨌\",\n    iiint: \"∭\",\n    iinfin: \"⧜\",\n    iiota: \"℩\",\n    IJlig: \"Ĳ\",\n    ijlig: \"ĳ\",\n    Im: \"ℑ\",\n    Imacr: \"Ī\",\n    imacr: \"ī\",\n    image: \"ℑ\",\n    ImaginaryI: \"ⅈ\",\n    imagline: \"ℐ\",\n    imagpart: \"ℑ\",\n    imath: \"ı\",\n    imof: \"⊷\",\n    imped: \"Ƶ\",\n    Implies: \"⇒\",\n    in: \"∈\",\n    incare: \"℅\",\n    infin: \"∞\",\n    infintie: \"⧝\",\n    inodot: \"ı\",\n    Int: \"∬\",\n    int: \"∫\",\n    intcal: \"⊺\",\n    integers: \"ℤ\",\n    Integral: \"∫\",\n    intercal: \"⊺\",\n    Intersection: \"⋂\",\n    intlarhk: \"⨗\",\n    intprod: \"⨼\",\n    InvisibleComma: \"⁣\",\n    InvisibleTimes: \"⁢\",\n    IOcy: \"Ё\",\n    iocy: \"ё\",\n    Iogon: \"Į\",\n    iogon: \"į\",\n    Iopf: \"\\uD835\\uDD40\",\n    iopf: \"\\uD835\\uDD5A\",\n    Iota: \"Ι\",\n    iota: \"ι\",\n    iprod: \"⨼\",\n    iquest: \"\\xbf\",\n    Iscr: \"ℐ\",\n    iscr: \"\\uD835\\uDCBE\",\n    isin: \"∈\",\n    isindot: \"⋵\",\n    isinE: \"⋹\",\n    isins: \"⋴\",\n    isinsv: \"⋳\",\n    isinv: \"∈\",\n    it: \"⁢\",\n    Itilde: \"Ĩ\",\n    itilde: \"ĩ\",\n    Iukcy: \"І\",\n    iukcy: \"і\",\n    Iuml: \"\\xcf\",\n    iuml: \"\\xef\",\n    Jcirc: \"Ĵ\",\n    jcirc: \"ĵ\",\n    Jcy: \"Й\",\n    jcy: \"й\",\n    Jfr: \"\\uD835\\uDD0D\",\n    jfr: \"\\uD835\\uDD27\",\n    jmath: \"ȷ\",\n    Jopf: \"\\uD835\\uDD41\",\n    jopf: \"\\uD835\\uDD5B\",\n    Jscr: \"\\uD835\\uDCA5\",\n    jscr: \"\\uD835\\uDCBF\",\n    Jsercy: \"Ј\",\n    jsercy: \"ј\",\n    Jukcy: \"Є\",\n    jukcy: \"є\",\n    Kappa: \"Κ\",\n    kappa: \"κ\",\n    kappav: \"ϰ\",\n    Kcedil: \"Ķ\",\n    kcedil: \"ķ\",\n    Kcy: \"К\",\n    kcy: \"к\",\n    Kfr: \"\\uD835\\uDD0E\",\n    kfr: \"\\uD835\\uDD28\",\n    kgreen: \"ĸ\",\n    KHcy: \"Х\",\n    khcy: \"х\",\n    KJcy: \"Ќ\",\n    kjcy: \"ќ\",\n    Kopf: \"\\uD835\\uDD42\",\n    kopf: \"\\uD835\\uDD5C\",\n    Kscr: \"\\uD835\\uDCA6\",\n    kscr: \"\\uD835\\uDCC0\",\n    lAarr: \"⇚\",\n    Lacute: \"Ĺ\",\n    lacute: \"ĺ\",\n    laemptyv: \"⦴\",\n    lagran: \"ℒ\",\n    Lambda: \"Λ\",\n    lambda: \"λ\",\n    Lang: \"⟪\",\n    lang: \"⟨\",\n    langd: \"⦑\",\n    langle: \"⟨\",\n    lap: \"⪅\",\n    Laplacetrf: \"ℒ\",\n    laquo: \"\\xab\",\n    Larr: \"↞\",\n    lArr: \"⇐\",\n    larr: \"←\",\n    larrb: \"⇤\",\n    larrbfs: \"⤟\",\n    larrfs: \"⤝\",\n    larrhk: \"↩\",\n    larrlp: \"↫\",\n    larrpl: \"⤹\",\n    larrsim: \"⥳\",\n    larrtl: \"↢\",\n    lat: \"⪫\",\n    lAtail: \"⤛\",\n    latail: \"⤙\",\n    late: \"⪭\",\n    lates: \"⪭︀\",\n    lBarr: \"⤎\",\n    lbarr: \"⤌\",\n    lbbrk: \"❲\",\n    lbrace: \"{\",\n    lbrack: \"[\",\n    lbrke: \"⦋\",\n    lbrksld: \"⦏\",\n    lbrkslu: \"⦍\",\n    Lcaron: \"Ľ\",\n    lcaron: \"ľ\",\n    Lcedil: \"Ļ\",\n    lcedil: \"ļ\",\n    lceil: \"⌈\",\n    lcub: \"{\",\n    Lcy: \"Л\",\n    lcy: \"л\",\n    ldca: \"⤶\",\n    ldquo: \"“\",\n    ldquor: \"„\",\n    ldrdhar: \"⥧\",\n    ldrushar: \"⥋\",\n    ldsh: \"↲\",\n    lE: \"≦\",\n    le: \"≤\",\n    LeftAngleBracket: \"⟨\",\n    LeftArrow: \"←\",\n    Leftarrow: \"⇐\",\n    leftarrow: \"←\",\n    LeftArrowBar: \"⇤\",\n    LeftArrowRightArrow: \"⇆\",\n    leftarrowtail: \"↢\",\n    LeftCeiling: \"⌈\",\n    LeftDoubleBracket: \"⟦\",\n    LeftDownTeeVector: \"⥡\",\n    LeftDownVector: \"⇃\",\n    LeftDownVectorBar: \"⥙\",\n    LeftFloor: \"⌊\",\n    leftharpoondown: \"↽\",\n    leftharpoonup: \"↼\",\n    leftleftarrows: \"⇇\",\n    LeftRightArrow: \"↔\",\n    Leftrightarrow: \"⇔\",\n    leftrightarrow: \"↔\",\n    leftrightarrows: \"⇆\",\n    leftrightharpoons: \"⇋\",\n    leftrightsquigarrow: \"↭\",\n    LeftRightVector: \"⥎\",\n    LeftTee: \"⊣\",\n    LeftTeeArrow: \"↤\",\n    LeftTeeVector: \"⥚\",\n    leftthreetimes: \"⋋\",\n    LeftTriangle: \"⊲\",\n    LeftTriangleBar: \"⧏\",\n    LeftTriangleEqual: \"⊴\",\n    LeftUpDownVector: \"⥑\",\n    LeftUpTeeVector: \"⥠\",\n    LeftUpVector: \"↿\",\n    LeftUpVectorBar: \"⥘\",\n    LeftVector: \"↼\",\n    LeftVectorBar: \"⥒\",\n    lEg: \"⪋\",\n    leg: \"⋚\",\n    leq: \"≤\",\n    leqq: \"≦\",\n    leqslant: \"⩽\",\n    les: \"⩽\",\n    lescc: \"⪨\",\n    lesdot: \"⩿\",\n    lesdoto: \"⪁\",\n    lesdotor: \"⪃\",\n    lesg: \"⋚︀\",\n    lesges: \"⪓\",\n    lessapprox: \"⪅\",\n    lessdot: \"⋖\",\n    lesseqgtr: \"⋚\",\n    lesseqqgtr: \"⪋\",\n    LessEqualGreater: \"⋚\",\n    LessFullEqual: \"≦\",\n    LessGreater: \"≶\",\n    lessgtr: \"≶\",\n    LessLess: \"⪡\",\n    lesssim: \"≲\",\n    LessSlantEqual: \"⩽\",\n    LessTilde: \"≲\",\n    lfisht: \"⥼\",\n    lfloor: \"⌊\",\n    Lfr: \"\\uD835\\uDD0F\",\n    lfr: \"\\uD835\\uDD29\",\n    lg: \"≶\",\n    lgE: \"⪑\",\n    lHar: \"⥢\",\n    lhard: \"↽\",\n    lharu: \"↼\",\n    lharul: \"⥪\",\n    lhblk: \"▄\",\n    LJcy: \"Љ\",\n    ljcy: \"љ\",\n    Ll: \"⋘\",\n    ll: \"≪\",\n    llarr: \"⇇\",\n    llcorner: \"⌞\",\n    Lleftarrow: \"⇚\",\n    llhard: \"⥫\",\n    lltri: \"◺\",\n    Lmidot: \"Ŀ\",\n    lmidot: \"ŀ\",\n    lmoust: \"⎰\",\n    lmoustache: \"⎰\",\n    lnap: \"⪉\",\n    lnapprox: \"⪉\",\n    lnE: \"≨\",\n    lne: \"⪇\",\n    lneq: \"⪇\",\n    lneqq: \"≨\",\n    lnsim: \"⋦\",\n    loang: \"⟬\",\n    loarr: \"⇽\",\n    lobrk: \"⟦\",\n    LongLeftArrow: \"⟵\",\n    Longleftarrow: \"⟸\",\n    longleftarrow: \"⟵\",\n    LongLeftRightArrow: \"⟷\",\n    Longleftrightarrow: \"⟺\",\n    longleftrightarrow: \"⟷\",\n    longmapsto: \"⟼\",\n    LongRightArrow: \"⟶\",\n    Longrightarrow: \"⟹\",\n    longrightarrow: \"⟶\",\n    looparrowleft: \"↫\",\n    looparrowright: \"↬\",\n    lopar: \"⦅\",\n    Lopf: \"\\uD835\\uDD43\",\n    lopf: \"\\uD835\\uDD5D\",\n    loplus: \"⨭\",\n    lotimes: \"⨴\",\n    lowast: \"∗\",\n    lowbar: \"_\",\n    LowerLeftArrow: \"↙\",\n    LowerRightArrow: \"↘\",\n    loz: \"◊\",\n    lozenge: \"◊\",\n    lozf: \"⧫\",\n    lpar: \"(\",\n    lparlt: \"⦓\",\n    lrarr: \"⇆\",\n    lrcorner: \"⌟\",\n    lrhar: \"⇋\",\n    lrhard: \"⥭\",\n    lrm: \"‎\",\n    lrtri: \"⊿\",\n    lsaquo: \"‹\",\n    Lscr: \"ℒ\",\n    lscr: \"\\uD835\\uDCC1\",\n    Lsh: \"↰\",\n    lsh: \"↰\",\n    lsim: \"≲\",\n    lsime: \"⪍\",\n    lsimg: \"⪏\",\n    lsqb: \"[\",\n    lsquo: \"‘\",\n    lsquor: \"‚\",\n    Lstrok: \"Ł\",\n    lstrok: \"ł\",\n    Lt: \"≪\",\n    LT: \"<\",\n    lt: \"<\",\n    ltcc: \"⪦\",\n    ltcir: \"⩹\",\n    ltdot: \"⋖\",\n    lthree: \"⋋\",\n    ltimes: \"⋉\",\n    ltlarr: \"⥶\",\n    ltquest: \"⩻\",\n    ltri: \"◃\",\n    ltrie: \"⊴\",\n    ltrif: \"◂\",\n    ltrPar: \"⦖\",\n    lurdshar: \"⥊\",\n    luruhar: \"⥦\",\n    lvertneqq: \"≨︀\",\n    lvnE: \"≨︀\",\n    macr: \"\\xaf\",\n    male: \"♂\",\n    malt: \"✠\",\n    maltese: \"✠\",\n    Map: \"⤅\",\n    map: \"↦\",\n    mapsto: \"↦\",\n    mapstodown: \"↧\",\n    mapstoleft: \"↤\",\n    mapstoup: \"↥\",\n    marker: \"▮\",\n    mcomma: \"⨩\",\n    Mcy: \"М\",\n    mcy: \"м\",\n    mdash: \"—\",\n    mDDot: \"∺\",\n    measuredangle: \"∡\",\n    MediumSpace: \" \",\n    Mellintrf: \"ℳ\",\n    Mfr: \"\\uD835\\uDD10\",\n    mfr: \"\\uD835\\uDD2A\",\n    mho: \"℧\",\n    micro: \"\\xb5\",\n    mid: \"∣\",\n    midast: \"*\",\n    midcir: \"⫰\",\n    middot: \"\\xb7\",\n    minus: \"−\",\n    minusb: \"⊟\",\n    minusd: \"∸\",\n    minusdu: \"⨪\",\n    MinusPlus: \"∓\",\n    mlcp: \"⫛\",\n    mldr: \"…\",\n    mnplus: \"∓\",\n    models: \"⊧\",\n    Mopf: \"\\uD835\\uDD44\",\n    mopf: \"\\uD835\\uDD5E\",\n    mp: \"∓\",\n    Mscr: \"ℳ\",\n    mscr: \"\\uD835\\uDCC2\",\n    mstpos: \"∾\",\n    Mu: \"Μ\",\n    mu: \"μ\",\n    multimap: \"⊸\",\n    mumap: \"⊸\",\n    nabla: \"∇\",\n    Nacute: \"Ń\",\n    nacute: \"ń\",\n    nang: \"∠⃒\",\n    nap: \"≉\",\n    napE: \"⩰̸\",\n    napid: \"≋̸\",\n    napos: \"ŉ\",\n    napprox: \"≉\",\n    natur: \"♮\",\n    natural: \"♮\",\n    naturals: \"ℕ\",\n    nbsp: \"\\xa0\",\n    nbump: \"≎̸\",\n    nbumpe: \"≏̸\",\n    ncap: \"⩃\",\n    Ncaron: \"Ň\",\n    ncaron: \"ň\",\n    Ncedil: \"Ņ\",\n    ncedil: \"ņ\",\n    ncong: \"≇\",\n    ncongdot: \"⩭̸\",\n    ncup: \"⩂\",\n    Ncy: \"Н\",\n    ncy: \"н\",\n    ndash: \"–\",\n    ne: \"≠\",\n    nearhk: \"⤤\",\n    neArr: \"⇗\",\n    nearr: \"↗\",\n    nearrow: \"↗\",\n    nedot: \"≐̸\",\n    NegativeMediumSpace: \"​\",\n    NegativeThickSpace: \"​\",\n    NegativeThinSpace: \"​\",\n    NegativeVeryThinSpace: \"​\",\n    nequiv: \"≢\",\n    nesear: \"⤨\",\n    nesim: \"≂̸\",\n    NestedGreaterGreater: \"≫\",\n    NestedLessLess: \"≪\",\n    NewLine: \"\\n\",\n    nexist: \"∄\",\n    nexists: \"∄\",\n    Nfr: \"\\uD835\\uDD11\",\n    nfr: \"\\uD835\\uDD2B\",\n    ngE: \"≧̸\",\n    nge: \"≱\",\n    ngeq: \"≱\",\n    ngeqq: \"≧̸\",\n    ngeqslant: \"⩾̸\",\n    nges: \"⩾̸\",\n    nGg: \"⋙̸\",\n    ngsim: \"≵\",\n    nGt: \"≫⃒\",\n    ngt: \"≯\",\n    ngtr: \"≯\",\n    nGtv: \"≫̸\",\n    nhArr: \"⇎\",\n    nharr: \"↮\",\n    nhpar: \"⫲\",\n    ni: \"∋\",\n    nis: \"⋼\",\n    nisd: \"⋺\",\n    niv: \"∋\",\n    NJcy: \"Њ\",\n    njcy: \"њ\",\n    nlArr: \"⇍\",\n    nlarr: \"↚\",\n    nldr: \"‥\",\n    nlE: \"≦̸\",\n    nle: \"≰\",\n    nLeftarrow: \"⇍\",\n    nleftarrow: \"↚\",\n    nLeftrightarrow: \"⇎\",\n    nleftrightarrow: \"↮\",\n    nleq: \"≰\",\n    nleqq: \"≦̸\",\n    nleqslant: \"⩽̸\",\n    nles: \"⩽̸\",\n    nless: \"≮\",\n    nLl: \"⋘̸\",\n    nlsim: \"≴\",\n    nLt: \"≪⃒\",\n    nlt: \"≮\",\n    nltri: \"⋪\",\n    nltrie: \"⋬\",\n    nLtv: \"≪̸\",\n    nmid: \"∤\",\n    NoBreak: \"⁠\",\n    NonBreakingSpace: \"\\xa0\",\n    Nopf: \"ℕ\",\n    nopf: \"\\uD835\\uDD5F\",\n    Not: \"⫬\",\n    not: \"\\xac\",\n    NotCongruent: \"≢\",\n    NotCupCap: \"≭\",\n    NotDoubleVerticalBar: \"∦\",\n    NotElement: \"∉\",\n    NotEqual: \"≠\",\n    NotEqualTilde: \"≂̸\",\n    NotExists: \"∄\",\n    NotGreater: \"≯\",\n    NotGreaterEqual: \"≱\",\n    NotGreaterFullEqual: \"≧̸\",\n    NotGreaterGreater: \"≫̸\",\n    NotGreaterLess: \"≹\",\n    NotGreaterSlantEqual: \"⩾̸\",\n    NotGreaterTilde: \"≵\",\n    NotHumpDownHump: \"≎̸\",\n    NotHumpEqual: \"≏̸\",\n    notin: \"∉\",\n    notindot: \"⋵̸\",\n    notinE: \"⋹̸\",\n    notinva: \"∉\",\n    notinvb: \"⋷\",\n    notinvc: \"⋶\",\n    NotLeftTriangle: \"⋪\",\n    NotLeftTriangleBar: \"⧏̸\",\n    NotLeftTriangleEqual: \"⋬\",\n    NotLess: \"≮\",\n    NotLessEqual: \"≰\",\n    NotLessGreater: \"≸\",\n    NotLessLess: \"≪̸\",\n    NotLessSlantEqual: \"⩽̸\",\n    NotLessTilde: \"≴\",\n    NotNestedGreaterGreater: \"⪢̸\",\n    NotNestedLessLess: \"⪡̸\",\n    notni: \"∌\",\n    notniva: \"∌\",\n    notnivb: \"⋾\",\n    notnivc: \"⋽\",\n    NotPrecedes: \"⊀\",\n    NotPrecedesEqual: \"⪯̸\",\n    NotPrecedesSlantEqual: \"⋠\",\n    NotReverseElement: \"∌\",\n    NotRightTriangle: \"⋫\",\n    NotRightTriangleBar: \"⧐̸\",\n    NotRightTriangleEqual: \"⋭\",\n    NotSquareSubset: \"⊏̸\",\n    NotSquareSubsetEqual: \"⋢\",\n    NotSquareSuperset: \"⊐̸\",\n    NotSquareSupersetEqual: \"⋣\",\n    NotSubset: \"⊂⃒\",\n    NotSubsetEqual: \"⊈\",\n    NotSucceeds: \"⊁\",\n    NotSucceedsEqual: \"⪰̸\",\n    NotSucceedsSlantEqual: \"⋡\",\n    NotSucceedsTilde: \"≿̸\",\n    NotSuperset: \"⊃⃒\",\n    NotSupersetEqual: \"⊉\",\n    NotTilde: \"≁\",\n    NotTildeEqual: \"≄\",\n    NotTildeFullEqual: \"≇\",\n    NotTildeTilde: \"≉\",\n    NotVerticalBar: \"∤\",\n    npar: \"∦\",\n    nparallel: \"∦\",\n    nparsl: \"⫽⃥\",\n    npart: \"∂̸\",\n    npolint: \"⨔\",\n    npr: \"⊀\",\n    nprcue: \"⋠\",\n    npre: \"⪯̸\",\n    nprec: \"⊀\",\n    npreceq: \"⪯̸\",\n    nrArr: \"⇏\",\n    nrarr: \"↛\",\n    nrarrc: \"⤳̸\",\n    nrarrw: \"↝̸\",\n    nRightarrow: \"⇏\",\n    nrightarrow: \"↛\",\n    nrtri: \"⋫\",\n    nrtrie: \"⋭\",\n    nsc: \"⊁\",\n    nsccue: \"⋡\",\n    nsce: \"⪰̸\",\n    Nscr: \"\\uD835\\uDCA9\",\n    nscr: \"\\uD835\\uDCC3\",\n    nshortmid: \"∤\",\n    nshortparallel: \"∦\",\n    nsim: \"≁\",\n    nsime: \"≄\",\n    nsimeq: \"≄\",\n    nsmid: \"∤\",\n    nspar: \"∦\",\n    nsqsube: \"⋢\",\n    nsqsupe: \"⋣\",\n    nsub: \"⊄\",\n    nsubE: \"⫅̸\",\n    nsube: \"⊈\",\n    nsubset: \"⊂⃒\",\n    nsubseteq: \"⊈\",\n    nsubseteqq: \"⫅̸\",\n    nsucc: \"⊁\",\n    nsucceq: \"⪰̸\",\n    nsup: \"⊅\",\n    nsupE: \"⫆̸\",\n    nsupe: \"⊉\",\n    nsupset: \"⊃⃒\",\n    nsupseteq: \"⊉\",\n    nsupseteqq: \"⫆̸\",\n    ntgl: \"≹\",\n    Ntilde: \"\\xd1\",\n    ntilde: \"\\xf1\",\n    ntlg: \"≸\",\n    ntriangleleft: \"⋪\",\n    ntrianglelefteq: \"⋬\",\n    ntriangleright: \"⋫\",\n    ntrianglerighteq: \"⋭\",\n    Nu: \"Ν\",\n    nu: \"ν\",\n    num: \"#\",\n    numero: \"№\",\n    numsp: \" \",\n    nvap: \"≍⃒\",\n    nVDash: \"⊯\",\n    nVdash: \"⊮\",\n    nvDash: \"⊭\",\n    nvdash: \"⊬\",\n    nvge: \"≥⃒\",\n    nvgt: \">⃒\",\n    nvHarr: \"⤄\",\n    nvinfin: \"⧞\",\n    nvlArr: \"⤂\",\n    nvle: \"≤⃒\",\n    nvlt: \"<⃒\",\n    nvltrie: \"⊴⃒\",\n    nvrArr: \"⤃\",\n    nvrtrie: \"⊵⃒\",\n    nvsim: \"∼⃒\",\n    nwarhk: \"⤣\",\n    nwArr: \"⇖\",\n    nwarr: \"↖\",\n    nwarrow: \"↖\",\n    nwnear: \"⤧\",\n    Oacute: \"\\xd3\",\n    oacute: \"\\xf3\",\n    oast: \"⊛\",\n    ocir: \"⊚\",\n    Ocirc: \"\\xd4\",\n    ocirc: \"\\xf4\",\n    Ocy: \"О\",\n    ocy: \"о\",\n    odash: \"⊝\",\n    Odblac: \"Ő\",\n    odblac: \"ő\",\n    odiv: \"⨸\",\n    odot: \"⊙\",\n    odsold: \"⦼\",\n    OElig: \"Œ\",\n    oelig: \"œ\",\n    ofcir: \"⦿\",\n    Ofr: \"\\uD835\\uDD12\",\n    ofr: \"\\uD835\\uDD2C\",\n    ogon: \"˛\",\n    Ograve: \"\\xd2\",\n    ograve: \"\\xf2\",\n    ogt: \"⧁\",\n    ohbar: \"⦵\",\n    ohm: \"Ω\",\n    oint: \"∮\",\n    olarr: \"↺\",\n    olcir: \"⦾\",\n    olcross: \"⦻\",\n    oline: \"‾\",\n    olt: \"⧀\",\n    Omacr: \"Ō\",\n    omacr: \"ō\",\n    Omega: \"Ω\",\n    omega: \"ω\",\n    Omicron: \"Ο\",\n    omicron: \"ο\",\n    omid: \"⦶\",\n    ominus: \"⊖\",\n    Oopf: \"\\uD835\\uDD46\",\n    oopf: \"\\uD835\\uDD60\",\n    opar: \"⦷\",\n    OpenCurlyDoubleQuote: \"“\",\n    OpenCurlyQuote: \"‘\",\n    operp: \"⦹\",\n    oplus: \"⊕\",\n    Or: \"⩔\",\n    or: \"∨\",\n    orarr: \"↻\",\n    ord: \"⩝\",\n    order: \"ℴ\",\n    orderof: \"ℴ\",\n    ordf: \"\\xaa\",\n    ordm: \"\\xba\",\n    origof: \"⊶\",\n    oror: \"⩖\",\n    orslope: \"⩗\",\n    orv: \"⩛\",\n    oS: \"Ⓢ\",\n    Oscr: \"\\uD835\\uDCAA\",\n    oscr: \"ℴ\",\n    Oslash: \"\\xd8\",\n    oslash: \"\\xf8\",\n    osol: \"⊘\",\n    Otilde: \"\\xd5\",\n    otilde: \"\\xf5\",\n    Otimes: \"⨷\",\n    otimes: \"⊗\",\n    otimesas: \"⨶\",\n    Ouml: \"\\xd6\",\n    ouml: \"\\xf6\",\n    ovbar: \"⌽\",\n    OverBar: \"‾\",\n    OverBrace: \"⏞\",\n    OverBracket: \"⎴\",\n    OverParenthesis: \"⏜\",\n    par: \"∥\",\n    para: \"\\xb6\",\n    parallel: \"∥\",\n    parsim: \"⫳\",\n    parsl: \"⫽\",\n    part: \"∂\",\n    PartialD: \"∂\",\n    Pcy: \"П\",\n    pcy: \"п\",\n    percnt: \"%\",\n    period: \".\",\n    permil: \"‰\",\n    perp: \"⊥\",\n    pertenk: \"‱\",\n    Pfr: \"\\uD835\\uDD13\",\n    pfr: \"\\uD835\\uDD2D\",\n    Phi: \"Φ\",\n    phi: \"φ\",\n    phiv: \"ϕ\",\n    phmmat: \"ℳ\",\n    phone: \"☎\",\n    Pi: \"Π\",\n    pi: \"π\",\n    pitchfork: \"⋔\",\n    piv: \"ϖ\",\n    planck: \"ℏ\",\n    planckh: \"ℎ\",\n    plankv: \"ℏ\",\n    plus: \"+\",\n    plusacir: \"⨣\",\n    plusb: \"⊞\",\n    pluscir: \"⨢\",\n    plusdo: \"∔\",\n    plusdu: \"⨥\",\n    pluse: \"⩲\",\n    PlusMinus: \"\\xb1\",\n    plusmn: \"\\xb1\",\n    plussim: \"⨦\",\n    plustwo: \"⨧\",\n    pm: \"\\xb1\",\n    Poincareplane: \"ℌ\",\n    pointint: \"⨕\",\n    Popf: \"ℙ\",\n    popf: \"\\uD835\\uDD61\",\n    pound: \"\\xa3\",\n    Pr: \"⪻\",\n    pr: \"≺\",\n    prap: \"⪷\",\n    prcue: \"≼\",\n    prE: \"⪳\",\n    pre: \"⪯\",\n    prec: \"≺\",\n    precapprox: \"⪷\",\n    preccurlyeq: \"≼\",\n    Precedes: \"≺\",\n    PrecedesEqual: \"⪯\",\n    PrecedesSlantEqual: \"≼\",\n    PrecedesTilde: \"≾\",\n    preceq: \"⪯\",\n    precnapprox: \"⪹\",\n    precneqq: \"⪵\",\n    precnsim: \"⋨\",\n    precsim: \"≾\",\n    Prime: \"″\",\n    prime: \"′\",\n    primes: \"ℙ\",\n    prnap: \"⪹\",\n    prnE: \"⪵\",\n    prnsim: \"⋨\",\n    prod: \"∏\",\n    Product: \"∏\",\n    profalar: \"⌮\",\n    profline: \"⌒\",\n    profsurf: \"⌓\",\n    prop: \"∝\",\n    Proportion: \"∷\",\n    Proportional: \"∝\",\n    propto: \"∝\",\n    prsim: \"≾\",\n    prurel: \"⊰\",\n    Pscr: \"\\uD835\\uDCAB\",\n    pscr: \"\\uD835\\uDCC5\",\n    Psi: \"Ψ\",\n    psi: \"ψ\",\n    puncsp: \" \",\n    Qfr: \"\\uD835\\uDD14\",\n    qfr: \"\\uD835\\uDD2E\",\n    qint: \"⨌\",\n    Qopf: \"ℚ\",\n    qopf: \"\\uD835\\uDD62\",\n    qprime: \"⁗\",\n    Qscr: \"\\uD835\\uDCAC\",\n    qscr: \"\\uD835\\uDCC6\",\n    quaternions: \"ℍ\",\n    quatint: \"⨖\",\n    quest: \"?\",\n    questeq: \"≟\",\n    QUOT: '\"',\n    quot: '\"',\n    rAarr: \"⇛\",\n    race: \"∽̱\",\n    Racute: \"Ŕ\",\n    racute: \"ŕ\",\n    radic: \"√\",\n    raemptyv: \"⦳\",\n    Rang: \"⟫\",\n    rang: \"⟩\",\n    rangd: \"⦒\",\n    range: \"⦥\",\n    rangle: \"⟩\",\n    raquo: \"\\xbb\",\n    Rarr: \"↠\",\n    rArr: \"⇒\",\n    rarr: \"→\",\n    rarrap: \"⥵\",\n    rarrb: \"⇥\",\n    rarrbfs: \"⤠\",\n    rarrc: \"⤳\",\n    rarrfs: \"⤞\",\n    rarrhk: \"↪\",\n    rarrlp: \"↬\",\n    rarrpl: \"⥅\",\n    rarrsim: \"⥴\",\n    Rarrtl: \"⤖\",\n    rarrtl: \"↣\",\n    rarrw: \"↝\",\n    rAtail: \"⤜\",\n    ratail: \"⤚\",\n    ratio: \"∶\",\n    rationals: \"ℚ\",\n    RBarr: \"⤐\",\n    rBarr: \"⤏\",\n    rbarr: \"⤍\",\n    rbbrk: \"❳\",\n    rbrace: \"}\",\n    rbrack: \"]\",\n    rbrke: \"⦌\",\n    rbrksld: \"⦎\",\n    rbrkslu: \"⦐\",\n    Rcaron: \"Ř\",\n    rcaron: \"ř\",\n    Rcedil: \"Ŗ\",\n    rcedil: \"ŗ\",\n    rceil: \"⌉\",\n    rcub: \"}\",\n    Rcy: \"Р\",\n    rcy: \"р\",\n    rdca: \"⤷\",\n    rdldhar: \"⥩\",\n    rdquo: \"”\",\n    rdquor: \"”\",\n    rdsh: \"↳\",\n    Re: \"ℜ\",\n    real: \"ℜ\",\n    realine: \"ℛ\",\n    realpart: \"ℜ\",\n    reals: \"ℝ\",\n    rect: \"▭\",\n    REG: \"\\xae\",\n    reg: \"\\xae\",\n    ReverseElement: \"∋\",\n    ReverseEquilibrium: \"⇋\",\n    ReverseUpEquilibrium: \"⥯\",\n    rfisht: \"⥽\",\n    rfloor: \"⌋\",\n    Rfr: \"ℜ\",\n    rfr: \"\\uD835\\uDD2F\",\n    rHar: \"⥤\",\n    rhard: \"⇁\",\n    rharu: \"⇀\",\n    rharul: \"⥬\",\n    Rho: \"Ρ\",\n    rho: \"ρ\",\n    rhov: \"ϱ\",\n    RightAngleBracket: \"⟩\",\n    RightArrow: \"→\",\n    Rightarrow: \"⇒\",\n    rightarrow: \"→\",\n    RightArrowBar: \"⇥\",\n    RightArrowLeftArrow: \"⇄\",\n    rightarrowtail: \"↣\",\n    RightCeiling: \"⌉\",\n    RightDoubleBracket: \"⟧\",\n    RightDownTeeVector: \"⥝\",\n    RightDownVector: \"⇂\",\n    RightDownVectorBar: \"⥕\",\n    RightFloor: \"⌋\",\n    rightharpoondown: \"⇁\",\n    rightharpoonup: \"⇀\",\n    rightleftarrows: \"⇄\",\n    rightleftharpoons: \"⇌\",\n    rightrightarrows: \"⇉\",\n    rightsquigarrow: \"↝\",\n    RightTee: \"⊢\",\n    RightTeeArrow: \"↦\",\n    RightTeeVector: \"⥛\",\n    rightthreetimes: \"⋌\",\n    RightTriangle: \"⊳\",\n    RightTriangleBar: \"⧐\",\n    RightTriangleEqual: \"⊵\",\n    RightUpDownVector: \"⥏\",\n    RightUpTeeVector: \"⥜\",\n    RightUpVector: \"↾\",\n    RightUpVectorBar: \"⥔\",\n    RightVector: \"⇀\",\n    RightVectorBar: \"⥓\",\n    ring: \"˚\",\n    risingdotseq: \"≓\",\n    rlarr: \"⇄\",\n    rlhar: \"⇌\",\n    rlm: \"‏\",\n    rmoust: \"⎱\",\n    rmoustache: \"⎱\",\n    rnmid: \"⫮\",\n    roang: \"⟭\",\n    roarr: \"⇾\",\n    robrk: \"⟧\",\n    ropar: \"⦆\",\n    Ropf: \"ℝ\",\n    ropf: \"\\uD835\\uDD63\",\n    roplus: \"⨮\",\n    rotimes: \"⨵\",\n    RoundImplies: \"⥰\",\n    rpar: \")\",\n    rpargt: \"⦔\",\n    rppolint: \"⨒\",\n    rrarr: \"⇉\",\n    Rrightarrow: \"⇛\",\n    rsaquo: \"›\",\n    Rscr: \"ℛ\",\n    rscr: \"\\uD835\\uDCC7\",\n    Rsh: \"↱\",\n    rsh: \"↱\",\n    rsqb: \"]\",\n    rsquo: \"’\",\n    rsquor: \"’\",\n    rthree: \"⋌\",\n    rtimes: \"⋊\",\n    rtri: \"▹\",\n    rtrie: \"⊵\",\n    rtrif: \"▸\",\n    rtriltri: \"⧎\",\n    RuleDelayed: \"⧴\",\n    ruluhar: \"⥨\",\n    rx: \"℞\",\n    Sacute: \"Ś\",\n    sacute: \"ś\",\n    sbquo: \"‚\",\n    Sc: \"⪼\",\n    sc: \"≻\",\n    scap: \"⪸\",\n    Scaron: \"Š\",\n    scaron: \"š\",\n    sccue: \"≽\",\n    scE: \"⪴\",\n    sce: \"⪰\",\n    Scedil: \"Ş\",\n    scedil: \"ş\",\n    Scirc: \"Ŝ\",\n    scirc: \"ŝ\",\n    scnap: \"⪺\",\n    scnE: \"⪶\",\n    scnsim: \"⋩\",\n    scpolint: \"⨓\",\n    scsim: \"≿\",\n    Scy: \"С\",\n    scy: \"с\",\n    sdot: \"⋅\",\n    sdotb: \"⊡\",\n    sdote: \"⩦\",\n    searhk: \"⤥\",\n    seArr: \"⇘\",\n    searr: \"↘\",\n    searrow: \"↘\",\n    sect: \"\\xa7\",\n    semi: \";\",\n    seswar: \"⤩\",\n    setminus: \"∖\",\n    setmn: \"∖\",\n    sext: \"✶\",\n    Sfr: \"\\uD835\\uDD16\",\n    sfr: \"\\uD835\\uDD30\",\n    sfrown: \"⌢\",\n    sharp: \"♯\",\n    SHCHcy: \"Щ\",\n    shchcy: \"щ\",\n    SHcy: \"Ш\",\n    shcy: \"ш\",\n    ShortDownArrow: \"↓\",\n    ShortLeftArrow: \"←\",\n    shortmid: \"∣\",\n    shortparallel: \"∥\",\n    ShortRightArrow: \"→\",\n    ShortUpArrow: \"↑\",\n    shy: \"\\xad\",\n    Sigma: \"Σ\",\n    sigma: \"σ\",\n    sigmaf: \"ς\",\n    sigmav: \"ς\",\n    sim: \"∼\",\n    simdot: \"⩪\",\n    sime: \"≃\",\n    simeq: \"≃\",\n    simg: \"⪞\",\n    simgE: \"⪠\",\n    siml: \"⪝\",\n    simlE: \"⪟\",\n    simne: \"≆\",\n    simplus: \"⨤\",\n    simrarr: \"⥲\",\n    slarr: \"←\",\n    SmallCircle: \"∘\",\n    smallsetminus: \"∖\",\n    smashp: \"⨳\",\n    smeparsl: \"⧤\",\n    smid: \"∣\",\n    smile: \"⌣\",\n    smt: \"⪪\",\n    smte: \"⪬\",\n    smtes: \"⪬︀\",\n    SOFTcy: \"Ь\",\n    softcy: \"ь\",\n    sol: \"/\",\n    solb: \"⧄\",\n    solbar: \"⌿\",\n    Sopf: \"\\uD835\\uDD4A\",\n    sopf: \"\\uD835\\uDD64\",\n    spades: \"♠\",\n    spadesuit: \"♠\",\n    spar: \"∥\",\n    sqcap: \"⊓\",\n    sqcaps: \"⊓︀\",\n    sqcup: \"⊔\",\n    sqcups: \"⊔︀\",\n    Sqrt: \"√\",\n    sqsub: \"⊏\",\n    sqsube: \"⊑\",\n    sqsubset: \"⊏\",\n    sqsubseteq: \"⊑\",\n    sqsup: \"⊐\",\n    sqsupe: \"⊒\",\n    sqsupset: \"⊐\",\n    sqsupseteq: \"⊒\",\n    squ: \"□\",\n    Square: \"□\",\n    square: \"□\",\n    SquareIntersection: \"⊓\",\n    SquareSubset: \"⊏\",\n    SquareSubsetEqual: \"⊑\",\n    SquareSuperset: \"⊐\",\n    SquareSupersetEqual: \"⊒\",\n    SquareUnion: \"⊔\",\n    squarf: \"▪\",\n    squf: \"▪\",\n    srarr: \"→\",\n    Sscr: \"\\uD835\\uDCAE\",\n    sscr: \"\\uD835\\uDCC8\",\n    ssetmn: \"∖\",\n    ssmile: \"⌣\",\n    sstarf: \"⋆\",\n    Star: \"⋆\",\n    star: \"☆\",\n    starf: \"★\",\n    straightepsilon: \"ϵ\",\n    straightphi: \"ϕ\",\n    strns: \"\\xaf\",\n    Sub: \"⋐\",\n    sub: \"⊂\",\n    subdot: \"⪽\",\n    subE: \"⫅\",\n    sube: \"⊆\",\n    subedot: \"⫃\",\n    submult: \"⫁\",\n    subnE: \"⫋\",\n    subne: \"⊊\",\n    subplus: \"⪿\",\n    subrarr: \"⥹\",\n    Subset: \"⋐\",\n    subset: \"⊂\",\n    subseteq: \"⊆\",\n    subseteqq: \"⫅\",\n    SubsetEqual: \"⊆\",\n    subsetneq: \"⊊\",\n    subsetneqq: \"⫋\",\n    subsim: \"⫇\",\n    subsub: \"⫕\",\n    subsup: \"⫓\",\n    succ: \"≻\",\n    succapprox: \"⪸\",\n    succcurlyeq: \"≽\",\n    Succeeds: \"≻\",\n    SucceedsEqual: \"⪰\",\n    SucceedsSlantEqual: \"≽\",\n    SucceedsTilde: \"≿\",\n    succeq: \"⪰\",\n    succnapprox: \"⪺\",\n    succneqq: \"⪶\",\n    succnsim: \"⋩\",\n    succsim: \"≿\",\n    SuchThat: \"∋\",\n    Sum: \"∑\",\n    sum: \"∑\",\n    sung: \"♪\",\n    Sup: \"⋑\",\n    sup: \"⊃\",\n    sup1: \"\\xb9\",\n    sup2: \"\\xb2\",\n    sup3: \"\\xb3\",\n    supdot: \"⪾\",\n    supdsub: \"⫘\",\n    supE: \"⫆\",\n    supe: \"⊇\",\n    supedot: \"⫄\",\n    Superset: \"⊃\",\n    SupersetEqual: \"⊇\",\n    suphsol: \"⟉\",\n    suphsub: \"⫗\",\n    suplarr: \"⥻\",\n    supmult: \"⫂\",\n    supnE: \"⫌\",\n    supne: \"⊋\",\n    supplus: \"⫀\",\n    Supset: \"⋑\",\n    supset: \"⊃\",\n    supseteq: \"⊇\",\n    supseteqq: \"⫆\",\n    supsetneq: \"⊋\",\n    supsetneqq: \"⫌\",\n    supsim: \"⫈\",\n    supsub: \"⫔\",\n    supsup: \"⫖\",\n    swarhk: \"⤦\",\n    swArr: \"⇙\",\n    swarr: \"↙\",\n    swarrow: \"↙\",\n    swnwar: \"⤪\",\n    szlig: \"\\xdf\",\n    Tab: \"\t\",\n    target: \"⌖\",\n    Tau: \"Τ\",\n    tau: \"τ\",\n    tbrk: \"⎴\",\n    Tcaron: \"Ť\",\n    tcaron: \"ť\",\n    Tcedil: \"Ţ\",\n    tcedil: \"ţ\",\n    Tcy: \"Т\",\n    tcy: \"т\",\n    tdot: \"⃛\",\n    telrec: \"⌕\",\n    Tfr: \"\\uD835\\uDD17\",\n    tfr: \"\\uD835\\uDD31\",\n    there4: \"∴\",\n    Therefore: \"∴\",\n    therefore: \"∴\",\n    Theta: \"Θ\",\n    theta: \"θ\",\n    thetasym: \"ϑ\",\n    thetav: \"ϑ\",\n    thickapprox: \"≈\",\n    thicksim: \"∼\",\n    ThickSpace: \"  \",\n    thinsp: \" \",\n    ThinSpace: \" \",\n    thkap: \"≈\",\n    thksim: \"∼\",\n    THORN: \"\\xde\",\n    thorn: \"\\xfe\",\n    Tilde: \"∼\",\n    tilde: \"˜\",\n    TildeEqual: \"≃\",\n    TildeFullEqual: \"≅\",\n    TildeTilde: \"≈\",\n    times: \"\\xd7\",\n    timesb: \"⊠\",\n    timesbar: \"⨱\",\n    timesd: \"⨰\",\n    tint: \"∭\",\n    toea: \"⤨\",\n    top: \"⊤\",\n    topbot: \"⌶\",\n    topcir: \"⫱\",\n    Topf: \"\\uD835\\uDD4B\",\n    topf: \"\\uD835\\uDD65\",\n    topfork: \"⫚\",\n    tosa: \"⤩\",\n    tprime: \"‴\",\n    TRADE: \"™\",\n    trade: \"™\",\n    triangle: \"▵\",\n    triangledown: \"▿\",\n    triangleleft: \"◃\",\n    trianglelefteq: \"⊴\",\n    triangleq: \"≜\",\n    triangleright: \"▹\",\n    trianglerighteq: \"⊵\",\n    tridot: \"◬\",\n    trie: \"≜\",\n    triminus: \"⨺\",\n    TripleDot: \"⃛\",\n    triplus: \"⨹\",\n    trisb: \"⧍\",\n    tritime: \"⨻\",\n    trpezium: \"⏢\",\n    Tscr: \"\\uD835\\uDCAF\",\n    tscr: \"\\uD835\\uDCC9\",\n    TScy: \"Ц\",\n    tscy: \"ц\",\n    TSHcy: \"Ћ\",\n    tshcy: \"ћ\",\n    Tstrok: \"Ŧ\",\n    tstrok: \"ŧ\",\n    twixt: \"≬\",\n    twoheadleftarrow: \"↞\",\n    twoheadrightarrow: \"↠\",\n    Uacute: \"\\xda\",\n    uacute: \"\\xfa\",\n    Uarr: \"↟\",\n    uArr: \"⇑\",\n    uarr: \"↑\",\n    Uarrocir: \"⥉\",\n    Ubrcy: \"Ў\",\n    ubrcy: \"ў\",\n    Ubreve: \"Ŭ\",\n    ubreve: \"ŭ\",\n    Ucirc: \"\\xdb\",\n    ucirc: \"\\xfb\",\n    Ucy: \"У\",\n    ucy: \"у\",\n    udarr: \"⇅\",\n    Udblac: \"Ű\",\n    udblac: \"ű\",\n    udhar: \"⥮\",\n    ufisht: \"⥾\",\n    Ufr: \"\\uD835\\uDD18\",\n    ufr: \"\\uD835\\uDD32\",\n    Ugrave: \"\\xd9\",\n    ugrave: \"\\xf9\",\n    uHar: \"⥣\",\n    uharl: \"↿\",\n    uharr: \"↾\",\n    uhblk: \"▀\",\n    ulcorn: \"⌜\",\n    ulcorner: \"⌜\",\n    ulcrop: \"⌏\",\n    ultri: \"◸\",\n    Umacr: \"Ū\",\n    umacr: \"ū\",\n    uml: \"\\xa8\",\n    UnderBar: \"_\",\n    UnderBrace: \"⏟\",\n    UnderBracket: \"⎵\",\n    UnderParenthesis: \"⏝\",\n    Union: \"⋃\",\n    UnionPlus: \"⊎\",\n    Uogon: \"Ų\",\n    uogon: \"ų\",\n    Uopf: \"\\uD835\\uDD4C\",\n    uopf: \"\\uD835\\uDD66\",\n    UpArrow: \"↑\",\n    Uparrow: \"⇑\",\n    uparrow: \"↑\",\n    UpArrowBar: \"⤒\",\n    UpArrowDownArrow: \"⇅\",\n    UpDownArrow: \"↕\",\n    Updownarrow: \"⇕\",\n    updownarrow: \"↕\",\n    UpEquilibrium: \"⥮\",\n    upharpoonleft: \"↿\",\n    upharpoonright: \"↾\",\n    uplus: \"⊎\",\n    UpperLeftArrow: \"↖\",\n    UpperRightArrow: \"↗\",\n    Upsi: \"ϒ\",\n    upsi: \"υ\",\n    upsih: \"ϒ\",\n    Upsilon: \"Υ\",\n    upsilon: \"υ\",\n    UpTee: \"⊥\",\n    UpTeeArrow: \"↥\",\n    upuparrows: \"⇈\",\n    urcorn: \"⌝\",\n    urcorner: \"⌝\",\n    urcrop: \"⌎\",\n    Uring: \"Ů\",\n    uring: \"ů\",\n    urtri: \"◹\",\n    Uscr: \"\\uD835\\uDCB0\",\n    uscr: \"\\uD835\\uDCCA\",\n    utdot: \"⋰\",\n    Utilde: \"Ũ\",\n    utilde: \"ũ\",\n    utri: \"▵\",\n    utrif: \"▴\",\n    uuarr: \"⇈\",\n    Uuml: \"\\xdc\",\n    uuml: \"\\xfc\",\n    uwangle: \"⦧\",\n    vangrt: \"⦜\",\n    varepsilon: \"ϵ\",\n    varkappa: \"ϰ\",\n    varnothing: \"∅\",\n    varphi: \"ϕ\",\n    varpi: \"ϖ\",\n    varpropto: \"∝\",\n    vArr: \"⇕\",\n    varr: \"↕\",\n    varrho: \"ϱ\",\n    varsigma: \"ς\",\n    varsubsetneq: \"⊊︀\",\n    varsubsetneqq: \"⫋︀\",\n    varsupsetneq: \"⊋︀\",\n    varsupsetneqq: \"⫌︀\",\n    vartheta: \"ϑ\",\n    vartriangleleft: \"⊲\",\n    vartriangleright: \"⊳\",\n    Vbar: \"⫫\",\n    vBar: \"⫨\",\n    vBarv: \"⫩\",\n    Vcy: \"В\",\n    vcy: \"в\",\n    VDash: \"⊫\",\n    Vdash: \"⊩\",\n    vDash: \"⊨\",\n    vdash: \"⊢\",\n    Vdashl: \"⫦\",\n    Vee: \"⋁\",\n    vee: \"∨\",\n    veebar: \"⊻\",\n    veeeq: \"≚\",\n    vellip: \"⋮\",\n    Verbar: \"‖\",\n    verbar: \"|\",\n    Vert: \"‖\",\n    vert: \"|\",\n    VerticalBar: \"∣\",\n    VerticalLine: \"|\",\n    VerticalSeparator: \"❘\",\n    VerticalTilde: \"≀\",\n    VeryThinSpace: \" \",\n    Vfr: \"\\uD835\\uDD19\",\n    vfr: \"\\uD835\\uDD33\",\n    vltri: \"⊲\",\n    vnsub: \"⊂⃒\",\n    vnsup: \"⊃⃒\",\n    Vopf: \"\\uD835\\uDD4D\",\n    vopf: \"\\uD835\\uDD67\",\n    vprop: \"∝\",\n    vrtri: \"⊳\",\n    Vscr: \"\\uD835\\uDCB1\",\n    vscr: \"\\uD835\\uDCCB\",\n    vsubnE: \"⫋︀\",\n    vsubne: \"⊊︀\",\n    vsupnE: \"⫌︀\",\n    vsupne: \"⊋︀\",\n    Vvdash: \"⊪\",\n    vzigzag: \"⦚\",\n    Wcirc: \"Ŵ\",\n    wcirc: \"ŵ\",\n    wedbar: \"⩟\",\n    Wedge: \"⋀\",\n    wedge: \"∧\",\n    wedgeq: \"≙\",\n    weierp: \"℘\",\n    Wfr: \"\\uD835\\uDD1A\",\n    wfr: \"\\uD835\\uDD34\",\n    Wopf: \"\\uD835\\uDD4E\",\n    wopf: \"\\uD835\\uDD68\",\n    wp: \"℘\",\n    wr: \"≀\",\n    wreath: \"≀\",\n    Wscr: \"\\uD835\\uDCB2\",\n    wscr: \"\\uD835\\uDCCC\",\n    xcap: \"⋂\",\n    xcirc: \"◯\",\n    xcup: \"⋃\",\n    xdtri: \"▽\",\n    Xfr: \"\\uD835\\uDD1B\",\n    xfr: \"\\uD835\\uDD35\",\n    xhArr: \"⟺\",\n    xharr: \"⟷\",\n    Xi: \"Ξ\",\n    xi: \"ξ\",\n    xlArr: \"⟸\",\n    xlarr: \"⟵\",\n    xmap: \"⟼\",\n    xnis: \"⋻\",\n    xodot: \"⨀\",\n    Xopf: \"\\uD835\\uDD4F\",\n    xopf: \"\\uD835\\uDD69\",\n    xoplus: \"⨁\",\n    xotime: \"⨂\",\n    xrArr: \"⟹\",\n    xrarr: \"⟶\",\n    Xscr: \"\\uD835\\uDCB3\",\n    xscr: \"\\uD835\\uDCCD\",\n    xsqcup: \"⨆\",\n    xuplus: \"⨄\",\n    xutri: \"△\",\n    xvee: \"⋁\",\n    xwedge: \"⋀\",\n    Yacute: \"\\xdd\",\n    yacute: \"\\xfd\",\n    YAcy: \"Я\",\n    yacy: \"я\",\n    Ycirc: \"Ŷ\",\n    ycirc: \"ŷ\",\n    Ycy: \"Ы\",\n    ycy: \"ы\",\n    yen: \"\\xa5\",\n    Yfr: \"\\uD835\\uDD1C\",\n    yfr: \"\\uD835\\uDD36\",\n    YIcy: \"Ї\",\n    yicy: \"ї\",\n    Yopf: \"\\uD835\\uDD50\",\n    yopf: \"\\uD835\\uDD6A\",\n    Yscr: \"\\uD835\\uDCB4\",\n    yscr: \"\\uD835\\uDCCE\",\n    YUcy: \"Ю\",\n    yucy: \"ю\",\n    Yuml: \"Ÿ\",\n    yuml: \"\\xff\",\n    Zacute: \"Ź\",\n    zacute: \"ź\",\n    Zcaron: \"Ž\",\n    zcaron: \"ž\",\n    Zcy: \"З\",\n    zcy: \"з\",\n    Zdot: \"Ż\",\n    zdot: \"ż\",\n    zeetrf: \"ℨ\",\n    ZeroWidthSpace: \"​\",\n    Zeta: \"Ζ\",\n    zeta: \"ζ\",\n    Zfr: \"ℨ\",\n    zfr: \"\\uD835\\uDD37\",\n    ZHcy: \"Ж\",\n    zhcy: \"ж\",\n    zigrarr: \"⇝\",\n    Zopf: \"ℤ\",\n    zopf: \"\\uD835\\uDD6B\",\n    Zscr: \"\\uD835\\uDCB5\",\n    zscr: \"\\uD835\\uDCCF\",\n    zwj: \"‍\",\n    zwnj: \"‌\"\n});\n/**\n * @deprecated use `HTML_ENTITIES` instead\n * @see HTML_ENTITIES\n */ exports.entityMap = exports.HTML_ENTITIES;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmldom/xmldom/lib/entities.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmldom/xmldom/lib/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@xmldom/xmldom/lib/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var dom = __webpack_require__(/*! ./dom */ \"(ssr)/./node_modules/@xmldom/xmldom/lib/dom.js\");\nexports.DOMImplementation = dom.DOMImplementation;\nexports.XMLSerializer = dom.XMLSerializer;\nexports.DOMParser = __webpack_require__(/*! ./dom-parser */ \"(ssr)/./node_modules/@xmldom/xmldom/lib/dom-parser.js\").DOMParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHhtbGRvbS94bWxkb20vbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLElBQUlBLE1BQU1DLG1CQUFPQSxDQUFDO0FBQ2xCQyx5QkFBeUIsR0FBR0YsSUFBSUcsaUJBQWlCO0FBQ2pERCxxQkFBcUIsR0FBR0YsSUFBSUksYUFBYTtBQUN6Q0YsOEhBQXFEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVkLXBsYW5uZXItZnJvbnQtZW5kLy4vbm9kZV9tb2R1bGVzL0B4bWxkb20veG1sZG9tL2xpYi9pbmRleC5qcz82MmM2Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBkb20gPSByZXF1aXJlKCcuL2RvbScpXG5leHBvcnRzLkRPTUltcGxlbWVudGF0aW9uID0gZG9tLkRPTUltcGxlbWVudGF0aW9uXG5leHBvcnRzLlhNTFNlcmlhbGl6ZXIgPSBkb20uWE1MU2VyaWFsaXplclxuZXhwb3J0cy5ET01QYXJzZXIgPSByZXF1aXJlKCcuL2RvbS1wYXJzZXInKS5ET01QYXJzZXJcbiJdLCJuYW1lcyI6WyJkb20iLCJyZXF1aXJlIiwiZXhwb3J0cyIsIkRPTUltcGxlbWVudGF0aW9uIiwiWE1MU2VyaWFsaXplciIsIkRPTVBhcnNlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmldom/xmldom/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmldom/xmldom/lib/sax.js":
/*!************************************************!*\
  !*** ./node_modules/@xmldom/xmldom/lib/sax.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var NAMESPACE = (__webpack_require__(/*! ./conventions */ \"(ssr)/./node_modules/@xmldom/xmldom/lib/conventions.js\").NAMESPACE);\n//[4]   \tNameStartChar\t   ::=   \t\":\" | [A-Z] | \"_\" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]\n//[4a]   \tNameChar\t   ::=   \tNameStartChar | \"-\" | \".\" | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]\n//[5]   \tName\t   ::=   \tNameStartChar (NameChar)*\nvar nameStartChar = /[A-Z_a-z\\xC0-\\xD6\\xD8-\\xF6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/ //\\u10000-\\uEFFFF\n;\nvar nameChar = new RegExp(\"[\\\\-\\\\.0-9\" + nameStartChar.source.slice(1, -1) + \"\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040]\");\nvar tagNamePattern = new RegExp(\"^\" + nameStartChar.source + nameChar.source + \"*(?::\" + nameStartChar.source + nameChar.source + \"*)?$\");\n//var tagNamePattern = /^[a-zA-Z_][\\w\\-\\.]*(?:\\:[a-zA-Z_][\\w\\-\\.]*)?$/\n//var handlers = 'resolveEntity,getExternalSubset,characters,endDocument,endElement,endPrefixMapping,ignorableWhitespace,processingInstruction,setDocumentLocator,skippedEntity,startDocument,startElement,startPrefixMapping,notationDecl,unparsedEntityDecl,error,fatalError,warning,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,comment,endCDATA,endDTD,endEntity,startCDATA,startDTD,startEntity'.split(',')\n//S_TAG,\tS_ATTR,\tS_EQ,\tS_ATTR_NOQUOT_VALUE\n//S_ATTR_SPACE,\tS_ATTR_END,\tS_TAG_SPACE, S_TAG_CLOSE\nvar S_TAG = 0; //tag name offerring\nvar S_ATTR = 1; //attr name offerring\nvar S_ATTR_SPACE = 2; //attr name end and space offer\nvar S_EQ = 3; //=space?\nvar S_ATTR_NOQUOT_VALUE = 4; //attr value(no quot value only)\nvar S_ATTR_END = 5; //attr value end and no space(quot end)\nvar S_TAG_SPACE = 6; //(attr value end || tag end ) && (space offer)\nvar S_TAG_CLOSE = 7; //closed el<el />\n/**\n * Creates an error that will not be caught by XMLReader aka the SAX parser.\n *\n * @param {string} message\n * @param {any?} locator Optional, can provide details about the location in the source\n * @constructor\n */ function ParseError(message, locator) {\n    this.message = message;\n    this.locator = locator;\n    if (Error.captureStackTrace) Error.captureStackTrace(this, ParseError);\n}\nParseError.prototype = new Error();\nParseError.prototype.name = ParseError.name;\nfunction XMLReader() {}\nXMLReader.prototype = {\n    parse: function(source, defaultNSMap, entityMap) {\n        var domBuilder = this.domBuilder;\n        domBuilder.startDocument();\n        _copy(defaultNSMap, defaultNSMap = {});\n        parse(source, defaultNSMap, entityMap, domBuilder, this.errorHandler);\n        domBuilder.endDocument();\n    }\n};\nfunction parse(source, defaultNSMapCopy, entityMap, domBuilder, errorHandler) {\n    function fixedFromCharCode(code) {\n        // String.prototype.fromCharCode does not supports\n        // > 2 bytes unicode chars directly\n        if (code > 0xffff) {\n            code -= 0x10000;\n            var surrogate1 = 0xd800 + (code >> 10), surrogate2 = 0xdc00 + (code & 0x3ff);\n            return String.fromCharCode(surrogate1, surrogate2);\n        } else {\n            return String.fromCharCode(code);\n        }\n    }\n    function entityReplacer(a) {\n        var k = a.slice(1, -1);\n        if (Object.hasOwnProperty.call(entityMap, k)) {\n            return entityMap[k];\n        } else if (k.charAt(0) === \"#\") {\n            return fixedFromCharCode(parseInt(k.substr(1).replace(\"x\", \"0x\")));\n        } else {\n            errorHandler.error(\"entity not found:\" + a);\n            return a;\n        }\n    }\n    function appendText(end) {\n        if (end > start) {\n            var xt = source.substring(start, end).replace(/&#?\\w+;/g, entityReplacer);\n            locator && position(start);\n            domBuilder.characters(xt, 0, end - start);\n            start = end;\n        }\n    }\n    function position(p, m) {\n        while(p >= lineEnd && (m = linePattern.exec(source))){\n            lineStart = m.index;\n            lineEnd = lineStart + m[0].length;\n            locator.lineNumber++;\n        //console.log('line++:',locator,startPos,endPos)\n        }\n        locator.columnNumber = p - lineStart + 1;\n    }\n    var lineStart = 0;\n    var lineEnd = 0;\n    var linePattern = /.*(?:\\r\\n?|\\n)|.*$/g;\n    var locator = domBuilder.locator;\n    var parseStack = [\n        {\n            currentNSMap: defaultNSMapCopy\n        }\n    ];\n    var closeMap = {};\n    var start = 0;\n    while(true){\n        try {\n            var tagStart = source.indexOf(\"<\", start);\n            if (tagStart < 0) {\n                if (!source.substr(start).match(/^\\s*$/)) {\n                    var doc = domBuilder.doc;\n                    var text = doc.createTextNode(source.substr(start));\n                    doc.appendChild(text);\n                    domBuilder.currentElement = text;\n                }\n                return;\n            }\n            if (tagStart > start) {\n                appendText(tagStart);\n            }\n            switch(source.charAt(tagStart + 1)){\n                case \"/\":\n                    var end = source.indexOf(\">\", tagStart + 3);\n                    var tagName = source.substring(tagStart + 2, end).replace(/[ \\t\\n\\r]+$/g, \"\");\n                    var config = parseStack.pop();\n                    if (end < 0) {\n                        tagName = source.substring(tagStart + 2).replace(/[\\s<].*/, \"\");\n                        errorHandler.error(\"end tag name: \" + tagName + \" is not complete:\" + config.tagName);\n                        end = tagStart + 1 + tagName.length;\n                    } else if (tagName.match(/\\s</)) {\n                        tagName = tagName.replace(/[\\s<].*/, \"\");\n                        errorHandler.error(\"end tag name: \" + tagName + \" maybe not complete\");\n                        end = tagStart + 1 + tagName.length;\n                    }\n                    var localNSMap = config.localNSMap;\n                    var endMatch = config.tagName == tagName;\n                    var endIgnoreCaseMach = endMatch || config.tagName && config.tagName.toLowerCase() == tagName.toLowerCase();\n                    if (endIgnoreCaseMach) {\n                        domBuilder.endElement(config.uri, config.localName, tagName);\n                        if (localNSMap) {\n                            for(var prefix in localNSMap){\n                                if (Object.prototype.hasOwnProperty.call(localNSMap, prefix)) {\n                                    domBuilder.endPrefixMapping(prefix);\n                                }\n                            }\n                        }\n                        if (!endMatch) {\n                            errorHandler.fatalError(\"end tag name: \" + tagName + \" is not match the current start tagName:\" + config.tagName); // No known test case\n                        }\n                    } else {\n                        parseStack.push(config);\n                    }\n                    end++;\n                    break;\n                // end elment\n                case \"?\":\n                    locator && position(tagStart);\n                    end = parseInstruction(source, tagStart, domBuilder);\n                    break;\n                case \"!\":\n                    locator && position(tagStart);\n                    end = parseDCC(source, tagStart, domBuilder, errorHandler);\n                    break;\n                default:\n                    locator && position(tagStart);\n                    var el = new ElementAttributes();\n                    var currentNSMap = parseStack[parseStack.length - 1].currentNSMap;\n                    //elStartEnd\n                    var end = parseElementStartPart(source, tagStart, el, currentNSMap, entityReplacer, errorHandler);\n                    var len = el.length;\n                    if (!el.closed && fixSelfClosed(source, end, el.tagName, closeMap)) {\n                        el.closed = true;\n                        if (!entityMap.nbsp) {\n                            errorHandler.warning(\"unclosed xml attribute\");\n                        }\n                    }\n                    if (locator && len) {\n                        var locator2 = copyLocator(locator, {});\n                        //try{//attribute position fixed\n                        for(var i = 0; i < len; i++){\n                            var a = el[i];\n                            position(a.offset);\n                            a.locator = copyLocator(locator, {});\n                        }\n                        domBuilder.locator = locator2;\n                        if (appendElement(el, domBuilder, currentNSMap)) {\n                            parseStack.push(el);\n                        }\n                        domBuilder.locator = locator;\n                    } else {\n                        if (appendElement(el, domBuilder, currentNSMap)) {\n                            parseStack.push(el);\n                        }\n                    }\n                    if (NAMESPACE.isHTML(el.uri) && !el.closed) {\n                        end = parseHtmlSpecialContent(source, end, el.tagName, entityReplacer, domBuilder);\n                    } else {\n                        end++;\n                    }\n            }\n        } catch (e) {\n            if (e instanceof ParseError) {\n                throw e;\n            }\n            errorHandler.error(\"element parse error: \" + e);\n            end = -1;\n        }\n        if (end > start) {\n            start = end;\n        } else {\n            //TODO: 这里有可能sax回退，有位置错误风险\n            appendText(Math.max(tagStart, start) + 1);\n        }\n    }\n}\nfunction copyLocator(f, t) {\n    t.lineNumber = f.lineNumber;\n    t.columnNumber = f.columnNumber;\n    return t;\n}\n/**\n * @see #appendElement(source,elStartEnd,el,selfClosed,entityReplacer,domBuilder,parseStack);\n * @return end of the elementStartPart(end of elementEndPart for selfClosed el)\n */ function parseElementStartPart(source, start, el, currentNSMap, entityReplacer, errorHandler) {\n    /**\n\t * @param {string} qname\n\t * @param {string} value\n\t * @param {number} startIndex\n\t */ function addAttribute(qname, value, startIndex) {\n        if (el.attributeNames.hasOwnProperty(qname)) {\n            errorHandler.fatalError(\"Attribute \" + qname + \" redefined\");\n        }\n        el.addValue(qname, // @see https://www.w3.org/TR/xml/#AVNormalize\n        // since the xmldom sax parser does not \"interpret\" DTD the following is not implemented:\n        // - recursive replacement of (DTD) entity references\n        // - trimming and collapsing multiple spaces into a single one for attributes that are not of type CDATA\n        value.replace(/[\\t\\n\\r]/g, \" \").replace(/&#?\\w+;/g, entityReplacer), startIndex);\n    }\n    var attrName;\n    var value;\n    var p = ++start;\n    var s = S_TAG; //status\n    while(true){\n        var c = source.charAt(p);\n        switch(c){\n            case \"=\":\n                if (s === S_ATTR) {\n                    attrName = source.slice(start, p);\n                    s = S_EQ;\n                } else if (s === S_ATTR_SPACE) {\n                    s = S_EQ;\n                } else {\n                    //fatalError: equal must after attrName or space after attrName\n                    throw new Error(\"attribute equal must after attrName\"); // No known test case\n                }\n                break;\n            case \"'\":\n            case '\"':\n                if (s === S_EQ || s === S_ATTR //|| s == S_ATTR_SPACE\n                ) {\n                    if (s === S_ATTR) {\n                        errorHandler.warning('attribute value must after \"=\"');\n                        attrName = source.slice(start, p);\n                    }\n                    start = p + 1;\n                    p = source.indexOf(c, start);\n                    if (p > 0) {\n                        value = source.slice(start, p);\n                        addAttribute(attrName, value, start - 1);\n                        s = S_ATTR_END;\n                    } else {\n                        //fatalError: no end quot match\n                        throw new Error(\"attribute value no end '\" + c + \"' match\");\n                    }\n                } else if (s == S_ATTR_NOQUOT_VALUE) {\n                    value = source.slice(start, p);\n                    addAttribute(attrName, value, start);\n                    errorHandler.warning('attribute \"' + attrName + '\" missed start quot(' + c + \")!!\");\n                    start = p + 1;\n                    s = S_ATTR_END;\n                } else {\n                    //fatalError: no equal before\n                    throw new Error('attribute value must after \"=\"'); // No known test case\n                }\n                break;\n            case \"/\":\n                switch(s){\n                    case S_TAG:\n                        el.setTagName(source.slice(start, p));\n                    case S_ATTR_END:\n                    case S_TAG_SPACE:\n                    case S_TAG_CLOSE:\n                        s = S_TAG_CLOSE;\n                        el.closed = true;\n                    case S_ATTR_NOQUOT_VALUE:\n                    case S_ATTR:\n                        break;\n                    case S_ATTR_SPACE:\n                        el.closed = true;\n                        break;\n                    //case S_EQ:\n                    default:\n                        throw new Error(\"attribute invalid close char('/')\") // No known test case\n                        ;\n                }\n                break;\n            case \"\":\n                errorHandler.error(\"unexpected end of input\");\n                if (s == S_TAG) {\n                    el.setTagName(source.slice(start, p));\n                }\n                return p;\n            case \">\":\n                switch(s){\n                    case S_TAG:\n                        el.setTagName(source.slice(start, p));\n                    case S_ATTR_END:\n                    case S_TAG_SPACE:\n                    case S_TAG_CLOSE:\n                        break; //normal\n                    case S_ATTR_NOQUOT_VALUE:\n                    case S_ATTR:\n                        value = source.slice(start, p);\n                        if (value.slice(-1) === \"/\") {\n                            el.closed = true;\n                            value = value.slice(0, -1);\n                        }\n                    case S_ATTR_SPACE:\n                        if (s === S_ATTR_SPACE) {\n                            value = attrName;\n                        }\n                        if (s == S_ATTR_NOQUOT_VALUE) {\n                            errorHandler.warning('attribute \"' + value + '\" missed quot(\")!');\n                            addAttribute(attrName, value, start);\n                        } else {\n                            if (!NAMESPACE.isHTML(currentNSMap[\"\"]) || !value.match(/^(?:disabled|checked|selected)$/i)) {\n                                errorHandler.warning('attribute \"' + value + '\" missed value!! \"' + value + '\" instead!!');\n                            }\n                            addAttribute(value, value, start);\n                        }\n                        break;\n                    case S_EQ:\n                        throw new Error(\"attribute value missed!!\");\n                }\n                //\t\t\tconsole.log(tagName,tagNamePattern,tagNamePattern.test(tagName))\n                return p;\n            /*xml space '\\x20' | #x9 | #xD | #xA; */ case \"\\x80\":\n                c = \" \";\n            default:\n                if (c <= \" \") {\n                    switch(s){\n                        case S_TAG:\n                            el.setTagName(source.slice(start, p)); //tagName\n                            s = S_TAG_SPACE;\n                            break;\n                        case S_ATTR:\n                            attrName = source.slice(start, p);\n                            s = S_ATTR_SPACE;\n                            break;\n                        case S_ATTR_NOQUOT_VALUE:\n                            var value = source.slice(start, p);\n                            errorHandler.warning('attribute \"' + value + '\" missed quot(\")!!');\n                            addAttribute(attrName, value, start);\n                        case S_ATTR_END:\n                            s = S_TAG_SPACE;\n                            break;\n                    }\n                } else {\n                    //S_TAG,\tS_ATTR,\tS_EQ,\tS_ATTR_NOQUOT_VALUE\n                    //S_ATTR_SPACE,\tS_ATTR_END,\tS_TAG_SPACE, S_TAG_CLOSE\n                    switch(s){\n                        //case S_TAG:void();break;\n                        //case S_ATTR:void();break;\n                        //case S_ATTR_NOQUOT_VALUE:void();break;\n                        case S_ATTR_SPACE:\n                            var tagName = el.tagName;\n                            if (!NAMESPACE.isHTML(currentNSMap[\"\"]) || !attrName.match(/^(?:disabled|checked|selected)$/i)) {\n                                errorHandler.warning('attribute \"' + attrName + '\" missed value!! \"' + attrName + '\" instead2!!');\n                            }\n                            addAttribute(attrName, attrName, start);\n                            start = p;\n                            s = S_ATTR;\n                            break;\n                        case S_ATTR_END:\n                            errorHandler.warning('attribute space is required\"' + attrName + '\"!!');\n                        case S_TAG_SPACE:\n                            s = S_ATTR;\n                            start = p;\n                            break;\n                        case S_EQ:\n                            s = S_ATTR_NOQUOT_VALUE;\n                            start = p;\n                            break;\n                        case S_TAG_CLOSE:\n                            throw new Error(\"elements closed character '/' and '>' must be connected to\");\n                    }\n                }\n        } //end outer switch\n        //console.log('p++',p)\n        p++;\n    }\n}\n/**\n * @return true if has new namespace define\n */ function appendElement(el, domBuilder, currentNSMap) {\n    var tagName = el.tagName;\n    var localNSMap = null;\n    //var currentNSMap = parseStack[parseStack.length-1].currentNSMap;\n    var i = el.length;\n    while(i--){\n        var a = el[i];\n        var qName = a.qName;\n        var value = a.value;\n        var nsp = qName.indexOf(\":\");\n        if (nsp > 0) {\n            var prefix = a.prefix = qName.slice(0, nsp);\n            var localName = qName.slice(nsp + 1);\n            var nsPrefix = prefix === \"xmlns\" && localName;\n        } else {\n            localName = qName;\n            prefix = null;\n            nsPrefix = qName === \"xmlns\" && \"\";\n        }\n        //can not set prefix,because prefix !== ''\n        a.localName = localName;\n        //prefix == null for no ns prefix attribute\n        if (nsPrefix !== false) {\n            if (localNSMap == null) {\n                localNSMap = {};\n                //console.log(currentNSMap,0)\n                _copy(currentNSMap, currentNSMap = {});\n            //console.log(currentNSMap,1)\n            }\n            currentNSMap[nsPrefix] = localNSMap[nsPrefix] = value;\n            a.uri = NAMESPACE.XMLNS;\n            domBuilder.startPrefixMapping(nsPrefix, value);\n        }\n    }\n    var i = el.length;\n    while(i--){\n        a = el[i];\n        var prefix = a.prefix;\n        if (prefix) {\n            if (prefix === \"xml\") {\n                a.uri = NAMESPACE.XML;\n            }\n            if (prefix !== \"xmlns\") {\n                a.uri = currentNSMap[prefix || \"\"];\n            //{console.log('###'+a.qName,domBuilder.locator.systemId+'',currentNSMap,a.uri)}\n            }\n        }\n    }\n    var nsp = tagName.indexOf(\":\");\n    if (nsp > 0) {\n        prefix = el.prefix = tagName.slice(0, nsp);\n        localName = el.localName = tagName.slice(nsp + 1);\n    } else {\n        prefix = null; //important!!\n        localName = el.localName = tagName;\n    }\n    //no prefix element has default namespace\n    var ns = el.uri = currentNSMap[prefix || \"\"];\n    domBuilder.startElement(ns, localName, tagName, el);\n    //endPrefixMapping and startPrefixMapping have not any help for dom builder\n    //localNSMap = null\n    if (el.closed) {\n        domBuilder.endElement(ns, localName, tagName);\n        if (localNSMap) {\n            for(prefix in localNSMap){\n                if (Object.prototype.hasOwnProperty.call(localNSMap, prefix)) {\n                    domBuilder.endPrefixMapping(prefix);\n                }\n            }\n        }\n    } else {\n        el.currentNSMap = currentNSMap;\n        el.localNSMap = localNSMap;\n        //parseStack.push(el);\n        return true;\n    }\n}\nfunction parseHtmlSpecialContent(source, elStartEnd, tagName, entityReplacer, domBuilder) {\n    if (/^(?:script|textarea)$/i.test(tagName)) {\n        var elEndStart = source.indexOf(\"</\" + tagName + \">\", elStartEnd);\n        var text = source.substring(elStartEnd + 1, elEndStart);\n        if (/[&<]/.test(text)) {\n            if (/^script$/i.test(tagName)) {\n                //if(!/\\]\\]>/.test(text)){\n                //lexHandler.startCDATA();\n                domBuilder.characters(text, 0, text.length);\n                //lexHandler.endCDATA();\n                return elEndStart;\n            //}\n            } //}else{//text area\n            text = text.replace(/&#?\\w+;/g, entityReplacer);\n            domBuilder.characters(text, 0, text.length);\n            return elEndStart;\n        //}\n        }\n    }\n    return elStartEnd + 1;\n}\nfunction fixSelfClosed(source, elStartEnd, tagName, closeMap) {\n    //if(tagName in closeMap){\n    var pos = closeMap[tagName];\n    if (pos == null) {\n        //console.log(tagName)\n        pos = source.lastIndexOf(\"</\" + tagName + \">\");\n        if (pos < elStartEnd) {\n            pos = source.lastIndexOf(\"</\" + tagName);\n        }\n        closeMap[tagName] = pos;\n    }\n    return pos < elStartEnd;\n//}\n}\nfunction _copy(source, target) {\n    for(var n in source){\n        if (Object.prototype.hasOwnProperty.call(source, n)) {\n            target[n] = source[n];\n        }\n    }\n}\nfunction parseDCC(source, start, domBuilder, errorHandler) {\n    var next = source.charAt(start + 2);\n    switch(next){\n        case \"-\":\n            if (source.charAt(start + 3) === \"-\") {\n                var end = source.indexOf(\"-->\", start + 4);\n                //append comment source.substring(4,end)//<!--\n                if (end > start) {\n                    domBuilder.comment(source, start + 4, end - start - 4);\n                    return end + 3;\n                } else {\n                    errorHandler.error(\"Unclosed comment\");\n                    return -1;\n                }\n            } else {\n                //error\n                return -1;\n            }\n        default:\n            if (source.substr(start + 3, 6) == \"CDATA[\") {\n                var end = source.indexOf(\"]]>\", start + 9);\n                domBuilder.startCDATA();\n                domBuilder.characters(source, start + 9, end - start - 9);\n                domBuilder.endCDATA();\n                return end + 3;\n            }\n            //<!DOCTYPE\n            //startDTD(java.lang.String name, java.lang.String publicId, java.lang.String systemId)\n            var matchs = split(source, start);\n            var len = matchs.length;\n            if (len > 1 && /!doctype/i.test(matchs[0][0])) {\n                var name = matchs[1][0];\n                var pubid = false;\n                var sysid = false;\n                if (len > 3) {\n                    if (/^public$/i.test(matchs[2][0])) {\n                        pubid = matchs[3][0];\n                        sysid = len > 4 && matchs[4][0];\n                    } else if (/^system$/i.test(matchs[2][0])) {\n                        sysid = matchs[3][0];\n                    }\n                }\n                var lastMatch = matchs[len - 1];\n                domBuilder.startDTD(name, pubid, sysid);\n                domBuilder.endDTD();\n                return lastMatch.index + lastMatch[0].length;\n            }\n    }\n    return -1;\n}\nfunction parseInstruction(source, start, domBuilder) {\n    var end = source.indexOf(\"?>\", start);\n    if (end) {\n        var match = source.substring(start, end).match(/^<\\?(\\S*)\\s*([\\s\\S]*?)\\s*$/);\n        if (match) {\n            var len = match[0].length;\n            domBuilder.processingInstruction(match[1], match[2]);\n            return end + 2;\n        } else {\n            return -1;\n        }\n    }\n    return -1;\n}\nfunction ElementAttributes() {\n    this.attributeNames = {};\n}\nElementAttributes.prototype = {\n    setTagName: function(tagName) {\n        if (!tagNamePattern.test(tagName)) {\n            throw new Error(\"invalid tagName:\" + tagName);\n        }\n        this.tagName = tagName;\n    },\n    addValue: function(qName, value, offset) {\n        if (!tagNamePattern.test(qName)) {\n            throw new Error(\"invalid attribute:\" + qName);\n        }\n        this.attributeNames[qName] = this.length;\n        this[this.length++] = {\n            qName: qName,\n            value: value,\n            offset: offset\n        };\n    },\n    length: 0,\n    getLocalName: function(i) {\n        return this[i].localName;\n    },\n    getLocator: function(i) {\n        return this[i].locator;\n    },\n    getQName: function(i) {\n        return this[i].qName;\n    },\n    getURI: function(i) {\n        return this[i].uri;\n    },\n    getValue: function(i) {\n        return this[i].value;\n    }\n};\nfunction split(source, start) {\n    var match;\n    var buf = [];\n    var reg = /'[^']+'|\"[^\"]+\"|[^\\s<>\\/=]+=?|(\\/?\\s*>|<)/g;\n    reg.lastIndex = start;\n    reg.exec(source); //skip <\n    while(match = reg.exec(source)){\n        buf.push(match);\n        if (match[1]) return buf;\n    }\n}\nexports.XMLReader = XMLReader;\nexports.ParseError = ParseError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmldom/xmldom/lib/sax.js\n");

/***/ })

};
;