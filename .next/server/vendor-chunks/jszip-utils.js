"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/jszip-utils";
exports.ids = ["vendor-chunks/jszip-utils"];
exports.modules = {

/***/ "(ssr)/./node_modules/jszip-utils/lib/index.js":
/*!***********************************************!*\
  !*** ./node_modules/jszip-utils/lib/index.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\n/*globals Promise */ var JSZipUtils = {};\n// just use the responseText with xhr1, response with xhr2.\n// The transformation doesn't throw away high-order byte (with responseText)\n// because JSZip handles that case. If not used with JSZip, you may need to\n// do it, see https://developer.mozilla.org/En/Using_XMLHttpRequest#Handling_binary_data\nJSZipUtils._getBinaryFromXHR = function(xhr) {\n    // for xhr.responseText, the 0xFF mask is applied by JSZip\n    return xhr.response || xhr.responseText;\n};\n// taken from jQuery\nfunction createStandardXHR() {\n    try {\n        return new window.XMLHttpRequest();\n    } catch (e) {}\n}\nfunction createActiveXHR() {\n    try {\n        return new window.ActiveXObject(\"Microsoft.XMLHTTP\");\n    } catch (e) {}\n}\n// Create the request object\nvar createXHR =  false ? /* Microsoft failed to properly\n     * implement the XMLHttpRequest in IE7 (can't request local files),\n     * so we use the ActiveXObject when it is available\n     * Additionally XMLHttpRequest can be disabled in IE7/IE8 so\n     * we need a fallback.\n     */ 0 : // For all other browsers, use the standard XMLHttpRequest object\ncreateStandardXHR;\n/**\n * @param  {string} path    The path to the resource to GET.\n * @param  {function|{callback: function, progress: function}} options\n * @return {Promise|undefined} If no callback is passed then a promise is returned\n */ JSZipUtils.getBinaryContent = function(path, options) {\n    var promise, resolve, reject;\n    var callback;\n    if (!options) {\n        options = {};\n    }\n    // backward compatible callback\n    if (typeof options === \"function\") {\n        callback = options;\n        options = {};\n    } else if (typeof options.callback === \"function\") {\n        // callback inside options object\n        callback = options.callback;\n    }\n    if (!callback && typeof Promise !== \"undefined\") {\n        promise = new Promise(function(_resolve, _reject) {\n            resolve = _resolve;\n            reject = _reject;\n        });\n    } else {\n        resolve = function(data) {\n            callback(null, data);\n        };\n        reject = function(err) {\n            callback(err, null);\n        };\n    }\n    /*\n     * Here is the tricky part : getting the data.\n     * In firefox/chrome/opera/... setting the mimeType to 'text/plain; charset=x-user-defined'\n     * is enough, the result is in the standard xhr.responseText.\n     * cf https://developer.mozilla.org/En/XMLHttpRequest/Using_XMLHttpRequest#Receiving_binary_data_in_older_browsers\n     * In IE <= 9, we must use (the IE only) attribute responseBody\n     * (for binary data, its content is different from responseText).\n     * In IE 10, the 'charset=x-user-defined' trick doesn't work, only the\n     * responseType will work :\n     * http://msdn.microsoft.com/en-us/library/ie/hh673569%28v=vs.85%29.aspx#Binary_Object_upload_and_download\n     *\n     * I'd like to use jQuery to avoid this XHR madness, but it doesn't support\n     * the responseType attribute : http://bugs.jquery.com/ticket/11461\n     */ try {\n        var xhr = createXHR();\n        xhr.open(\"GET\", path, true);\n        // recent browsers\n        if (\"responseType\" in xhr) {\n            xhr.responseType = \"arraybuffer\";\n        }\n        // older browser\n        if (xhr.overrideMimeType) {\n            xhr.overrideMimeType(\"text/plain; charset=x-user-defined\");\n        }\n        xhr.onreadystatechange = function(event) {\n            // use `xhr` and not `this`... thanks IE\n            if (xhr.readyState === 4) {\n                if (xhr.status === 200 || xhr.status === 0) {\n                    try {\n                        resolve(JSZipUtils._getBinaryFromXHR(xhr));\n                    } catch (err) {\n                        reject(new Error(err));\n                    }\n                } else {\n                    reject(new Error(\"Ajax error for \" + path + \" : \" + this.status + \" \" + this.statusText));\n                }\n            }\n        };\n        if (options.progress) {\n            xhr.onprogress = function(e) {\n                options.progress({\n                    path: path,\n                    originalEvent: e,\n                    percent: e.loaded / e.total * 100,\n                    loaded: e.loaded,\n                    total: e.total\n                });\n            };\n        }\n        xhr.send();\n    } catch (e) {\n        reject(new Error(e), null);\n    }\n    // returns a promise or undefined depending on whether a callback was\n    // provided\n    return promise;\n};\n// export\nmodule.exports = JSZipUtils; // enforcing Stuk's coding style\n // vim: set shiftwidth=4 softtabstop=4:\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jszip-utils/lib/index.js\n");

/***/ })

};
;